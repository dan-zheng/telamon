set Instructions subsetof Statements:
  item_type = "ir::Instruction"
  id_type = "ir::InstId"
  item_getter = "$fun.inst($id)"
  id_getter = "$item.id()"
  iterator = "$fun.insts()"
  var_prefix = "inst"
  from_superset = "$item.as_inst()"
  new_objs = "$objs.instructions"
end

set MemInsts subsetof Instructions:
  item_type = "ir::Instruction"
  id_type = "ir::InstId"
  item_getter = "$fun.inst($id)"
  id_getter = "$item.id()"
  iterator = "$fun.mem_insts()"
  var_prefix = "inst"
  from_superset = "$item.as_mem_inst()"
  new_objs = "$objs.mem_insts"
end

/// Specifies the version of an instruction to use.
define enum inst_flag($inst in MemInsts):
  /// Don't use caches.
  value NO_CACHE:
  /// Use a global cache, coherent between all threads.
  value CACHE_GLOBAL:
    requires "$fun.device().supported_mem_flags($inst.operator()).contains(InstFlag::CACHE_GLOBAL)"
  /// Use a cache only coherent between threads of the same block.
  value CACHE_SHARED:
    requires "$fun.device().supported_mem_flags($inst.operator()).contains(InstFlag::CACHE_SHARED)"
  /// Use a read-only cache, not guaranteed to see any read.
  value CACHE_READ_ONLY:
    requires "$fun.device().supported_mem_flags($inst.operator()).contains(InstFlag::CACHE_READ_ONLY)"
  /// Ensure coherency between memory accesses.
  alias COHERENT = NO_CACHE | CACHE_GLOBAL:
  /// Ensure coherency within a block between memory accesses.
  alias BLOCK_COHERENT = COHERENT | CACHE_SHARED:
end

// Intruction orders
require forall $inst in Instructions:
  forall $stmt in Statements:
    order($inst, $stmt) is INNER | ORDERED

require forall $inst in Instructions:
  forall $dim in Dimensions:
    "$inst.iteration_dims().contains(&$dim.id())" || "!$inst.has_side_effects()"
      || is_iteration_dim($inst, $dim) is FALSE

// Limit cache directives for memory accesses to preallocated arrays.
require forall $inst in MemInsts:
  "match unwrap!($inst.operator().mem_access_pattern()).accessed_array() {\
    ir::ArrayId::Static(mem) => $fun.mem_block(mem).space == ir::MemorySpace::Global,
    _ => true,
  }" || inst_flag($inst) is NO_CACHE
