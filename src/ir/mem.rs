//! A module for handling accesses to the device memory.
use ir;

/// Uniquely identifies a fixed block of memory.
#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, Serialize, Deserialize)]
#[repr(C)]
/// cbindgen:field-names=[id]
pub struct MemId(pub u32);

/// A block of memory allocated on the device by the kernel.
#[derive(Clone, Debug)]
pub struct Block {
    pub id: MemId,
    pub elements_type: ir::Type,
    pub len: u32,
    pub space: MemorySpace,
}

impl Block {
    /// Return the base size of the block in bytes.
    pub fn byte_size(&self) -> u32 {
        self.len * unwrap!(self.elements_type.len_byte())
    }
}

/// Indicates in which memory space a block resides. This is intended for predefined
/// memory blocks as opposed to the one generated by the search space.
#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, PartialOrd, Ord)]
pub enum MemorySpace {
    Global,
    Shared,
}

/// Indentitfies the memory being accessed.
#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
pub enum ArrayId {
    External,
    Static(ir::MemId),
    Variable(ir::VarId),
}

impl From<MemId> for ArrayId {
    fn from(id: MemId) -> Self {
        ArrayId::Static(id)
    }
}
