initSidebarItems({"enum":[["Rounding","The rounding mode of an arithmetic operation."]],"fn":[["telamon_ir_dimension_size","Returns the size of a dimension."],["telamon_ir_function_add_dimensions","Adds a logical dimension of the given size to the function. In practice, this creates a dimension for each tiling level plus one. Takes ownership of `size` and writes the unique identifier of the logical dimension in `logical_id`. Writes the ids of the dimensions, from the outermost to the innermost, in `dim_ids`. `dim_ids` must be at least of size `num_tiles + 1`. Returns `Ok` except if an error occurs."],["telamon_ir_function_add_instruction","Adds an instruction performing the given operator in the given dimensions to the function. Writes the unique identifier of the instruction in `inst_id`. Returns `Ok` except if an error occurs. Takes ownership of the operator but does not keeps any reference to `dimensions`."],["telamon_ir_function_free","Frees a function allocated with `telamon_ir_function_new`."],["telamon_ir_function_new","Creates a function to optimize. The function must be freed with `telamon_ir_function_free`. `signature` and `device` must outlive the function."],["telamon_ir_operand_new_float","Creates a constant floating point operand. The provided type must be a float type. Returns `null` if an error is encountered."],["telamon_ir_operand_new_index","Creates an operand that fetches the value of a parameter. The created operand holds a reference to `parameter`. Creates an operand that returns the current index on a dimension."],["telamon_ir_operand_new_inst","Creates an operand that references the value of an instruction. The value of the instruction is transmitted point-to-point between the source dimensions (`src_dims`, in which the instruction is produced) and destination dimensions (`dst_dims`, in which the operand is used). `num_mapped_dims` indicates the number of dimensions in `src_dims` and in `dst_dims`. If `allow_tmp_mem` is non-zero, Telamon can allocate memory to transfer data between the two loop nests. Otherwise, it makes sure the data can be stored in registers (for example by fusing or unrolling loops)."],["telamon_ir_operand_new_int","Create a constant integer operand. The provided type must be an integer type. Returns `null` if an error is encountered."],["telamon_ir_operand_new_reduction","Creates an operand that take the value of `init_inst` the first time is is encountered and then reuse the value produced by the instruction using the operand, effectivelly creating a reduction. The value is is transmitted point-to-point between the source dimensions (`src_dims`, in which `init_inst` is produced) and destination dimensions (`dst_dims`, in which the operand is used). `num_mapped_dims` indicates the number of dimensions in `src_dims` and in `dst_dims`. `reduction_dims` indicates on which dimensions the reduction occurs: values are not reused accross other dimensions."],["telamon_ir_operator_new_binop","Creates a binary operator. Takes ownership of the operands."],["telamon_ir_operator_new_cast","Creates a `cast` operator. Takes ownership of `operand`. No reference to `return_type` is hold after the function returns."],["telamon_ir_operator_new_mad","Creates a `mad` operator, that computes `mul_lhs * mul_rhs + add_rhs`. If the operator operates on integer, the type of `add_rhs` can either be the type of both `mul_lhs` and `mul_rhs` or an integer type having twice the size of the multiplied types. Takes ownership of `mul_lhs`, `mul_rhs` and `add_rhs`."],["telamon_ir_operator_new_mov","Creates a `mov` operator. Takes ownership of `operand`."],["telamon_ir_operator_new_mul","Creates a `mul` operator. The return type can either be the operands type or, if the multplication operates on integers, a type twice the size of the input. Takes ownership of both `lhs` and `rhs`. No references to `return_type` is hold after the function returns."],["telamon_ir_operator_new_tensor_load","Creates an operator that loads a tensor stored in memory. Takes the ownership of `base_address` and creates copies of `strided_dims`, `strides` and `loaded_type`. This function also adds the necessary address computation code to `function`."],["telamon_ir_operator_new_tensor_store","Creates an operator that stores a tensor in memory. Takes the ownership of `base_address` and `value` and creates copies of `strided_dims`, `strides` and `loaded_type`. This function also adds the necessary address computation code to `function`."],["telamon_ir_signature_add_array","Adds an array parameter to the function signature."],["telamon_ir_signature_add_scalar","Adds a scalar parameter to the function signature."],["telamon_ir_signature_free","Deallocates a signature created with `telamon_ir_signature_new`."],["telamon_ir_signature_new","Creates a function signature that must be deallocated with `telamon_ir_signature_free`."],["telamon_ir_signature_param","Returns the parameter at the given position."],["telamon_ir_size_free","Create a size equal to: `const_factor * param_factors[0] * .. * param_factors[num_params-1]` The size must be freed calling `telamon_ir_size_free` or passed to a function that takes its ownership. Frees a size allocated with `telamon_ir_size_new`."],["telamon_ir_size_into_partial","Converts an `ir::Size` into an `ir::PartialSize`."],["telamon_ir_size_mul","Multiplies `lhs` by `rhs`."],["telamon_ir_type_free","Frees a type allocated with `telamon_ir_type_new_int` or `telamon_ir_type_new_float`."],["telamon_ir_type_new_float","Creates a floating point type that must be freed with `telamon_ir_type_free`."],["telamon_ir_type_new_int","Creates an integer type that must be freed with `telamon_ir_type_free`."]],"struct":[["Function","Opaque type that abstracts away the lifetime parameter of `ir::Function` so that cbindgen generates the bindings."],["Operand","Opaque type that abstracts away the lifetime parameter of `ir::Operand` so that cbindgen can generate bindings."],["Operator","Opaque type that abstracts away the lifetime parameter of `ir::Operator` so that cbindgen can generate bindings."],["PartialSize","Opaque type that abstracts away the lifetime parameter of `ir::SizeiPartial` so cbindgen can generate bindings."],["Size","Opaque type that abstracts away the lifetime parameter of `ir::Size` so cbindgen can generate bindings."]]});