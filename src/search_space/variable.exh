set Variables:
  item_type = "ir::Variable"
  id_type = "ir::VarId"
  item_getter = "$fun.variable($id)"
  id_getter = "$item.id()"
  iterator = "$fun.variables()"
  var_prefix = "variable"
  new_objs = "$objs.variables"
end

set DefStatements($var in Variables) subsetof Statements:
  item_type = "ir::Statement"
  id_type = "ir::StmtId"
  item_getter = "$fun.statement($id)"
  id_getter = "$item.id()"
  iterator = "$var.def_points().map(|id| $fun.statement(id))"
  from_superset = "if $item.defined_vars().contains(&$var.id()) { Some($item) } else { None }"
  reverse forall $stmt in Statements = "$stmt.defined_vars().iter().map(|&id| $fun.variable(id))"
  var_prefix = "def"
  new_objs = "$objs.def_statements"
end

set UseStatements($var in Variables) subsetof Statements:
  item_type = "ir::Statement"
  id_type = "ir::StmtId"
  item_getter = "$fun.statement($id)"
  id_getter = "$item.id()"
  iterator = "$var.use_points().map(|id| $fun.statement(id))"
  from_superset = "if $item.used_vars().contains(&$var.id()) { Some($item) } else { None }"
  reverse forall $stmt in Statements = "$stmt.used_vars().iter().map(|&id| $fun.variable(id))"
  var_prefix = "use"
  new_objs = "$objs.use_statements"
end

// Enforce data dependencies.
require forall $var in Variables:
  forall $def in DefStatements($var):
    forall $use in UseStatements($var):
      order($def, $use) is BEFORE

/// Lists the dimensions on which $var can vary.
set VarDims($var in Variables) subsetof Dimensions:
  item_type = "ir::Dimension"
  id_type = "ir::DimId"
  item_getter = "$fun.dim($id)"
  id_getter = "$item.id()"
  iterator = "$var.dimensions().iter().map(|&dim| $fun.dim(dim))"
  from_superset = "if $var.dimensions().contains(&$item.id()) { Some($item) } else { None }"
  reverse forall $dim in Dimensions = "$dim.inner_vars().iter().map(|&id| $fun.variable(id))"
  new_objs = "$objs.var_dims"
end

require forall $var in Variables:
  forall $use in UseStatements($var):
    forall $dim in VarDims($var):
      order($dim, $use) is OUTER

/// Specifies where to store a variable.
define enum memory_space($var in Variables):
  value REGISTER:
    requires forall $dim in VarDims($var):
      "!$fun.device().has_vector_registers()" || dim_kind($dim) is not VECTOR
  value VECTOR_REGISTER:
    requires "$fun.device().has_vector_registers()"
    // Ensure vector registers are the same at source and destination.
    requires forall $mapping in VarMappings($var):
      forall $lhs in MappedDims($mapping):
        forall $rhs in MappedDims($mapping):
          dim_kind($lhs) is not INNER_VECTOR || dim_kind($rhs) is INNER_VECTOR
          dim_kind($lhs) is not OUTER_VECTOR || dim_kind($rhs) is OUTER_VECTOR
    // The order of mapped vector dimensions is preserved.
    requires forall $outer_mapping in VarMappings($var):
      forall $inner_mapping in VarMappings($var):
        forall $outer_lhs in MappedDims($outer_mapping):
          forall $outer_rhs in MappedDims($outer_mapping):
            forall $inner_lhs in MappedDims($inner_mapping):
              forall $inner_rhs in MappedDims($inner_mapping):
                dim_kind($outer_lhs) is not VECTOR || dim_kind($inner_lhs) is not VECTOR
                || order($outer_lhs, $inner_lhs) is not OUTER
                || order($outer_rhs, $inner_rhs) is OUTER
end

/// List pairs of dimensions that must have the same size and can be use for
/// point-to-point communication.
set DimMappings:
  item_type = "ir::DimMapping"
  id_type = "ir::DimMappingId"
  item_getter = "$fun.dim_mapping($id)"
  id_getter = "$item.id()"
  iterator = "$fun.dim_mappings()"
  var_prefix = "dim_pair"
  new_objs = "$objs.dim_mappings"
end

/// If the value is a `DimMap`, indicates which dimensions are mapped together.
set VarMappings($var in Variables) subsetof DimMappings:
  item_type = "ir::DimMapping"
  id_type = "ir::DimMappingId"
  item_getter = "$fun.dim_mapping($id)"
  id_getter = "$item.id()"
  iterator = "$var.def().mapped_dims().map(|id| $fun.dim_mapping(id))"
  from_superset = "if $item.users().contains(&$var.id()) { Some($item) } else { None }"
  reverse forall $mapping in DimMappings =
    "$mapping.users().iter().map(|&id| $fun.variable(id))"
  new_objs = "$objs.var_mappings"
end

/// Lists the static dimensions in a dimension mapping.
set MappedDims($pair in DimMappings) subsetof Dimensions:
  item_type = "ir::Dimension"
  id_type = "ir::DimId"
  item_getter = "$fun.dim($id)"
  id_getter = "$item.id()"
  iterator = "$pair.dims().iter().map(|&dim| $fun.dim(dim))"
  var_prefix = "mapped_dim"
  from_superset =
    "(if $item.dim_mappings().contains(&$pair.id()) { Some($item) } else { None })"
  reverse forall $dim in Dimensions =
    "$dim.dim_mappings().iter().map(|&id| $fun.dim_mapping(id))"
  new_objs = "$objs.mapped_dims"
end

require forall $mapping in DimMappings:
  forall $lhs in MappedDims($mapping):
    forall $rhs in MappedDims($mapping):
      order($lhs, $rhs) is ORDERED | MERGED
      // For now, limit mappings to dimensions with a known size.
      // TODO(ulysse): allow generating memory blocks with a dynamic size.
      "$lhs.possible_sizes().is_some()" || order($lhs, $rhs) is MERGED

require forall $var in Variables:
  forall $mapping in DimMappings:
    forall $lhs in MappedDims($mapping):
      forall $rhs in MappedDims($mapping):
        "$var.max_memory_level() <= ir::MemoryLevel::RegisterNoSync"
          || order($lhs, $rhs) is MERGED
          || dim_kind($lhs) is UNROLL | VECTOR

/// Lists the static dimensions in a dimension mapping.
set StaticMappedDims($pair in DimMappings) subsetof StaticDims:
  item_type = "ir::Dimension"
  id_type = "ir::DimId"
  item_getter = "$fun.dim($id)"
  id_getter = "$item.id()"
  iterator = "$pair.dims().iter().map(|&dim| $fun.dim(dim))\
    .filter(|dim| dim.possible_sizes().is_some())"
  var_prefix = "mapped_dim"
  from_superset =
    "(if $item.dim_mappings().contains(&$pair.id()) { Some($item) } else { None })"
  reverse forall $dim in StaticDims =
    "$dim.dim_mappings().iter().map(|&id| $fun.dim_mapping(id))"
  new_objs = "$objs.static_mapped_dims"
end

// Ensure mapped dimensions have the same size. We currently have no way to constrain the
// size of dynamic dimensions: it would require to name the reverse set of
// `TiledDimension($logical_dim)`. However, it is enough to constrain the size of static
// dimensions as the tiling factor of dynamic dimensions only depend on the size of static
// dimensions.
require forall $mapping in DimMappings:
  forall $lhs in StaticMappedDims($mapping):
    forall $rhs in StaticMappedDims($mapping):
      size($lhs) == size($rhs)

set MemoryRegions:
  item_type = "ir::mem::Block"
  id_type = "ir::MemId"
  item_getter = "$fun.mem_block($id)"
  id_getter = "$item.mem_id()"
  iterator = "$fun.mem_blocks()"
  var_prefix = "mem"
  new_objs = "$objs.mem_blocks"
end

/// Indicates where a memory block is located.
define enum mem_space($mem in MemoryRegions):
  /// The block is in the device RAM.
  value GLOBAL:
  /// The block is in the memory shared between the threads of a block.
  value SHARED:
    requires forall $inst in MemInsts:
      "$inst.operator().mem_used() != Some($mem.mem_id())"
        || inst_flag($inst) is NO_CACHE
end

/// Computes the size of each memory block.
// TODO(cleanup): use dependent sets to only iterate on necessary pairs.
// FIXME: remove cubic choice choices
define half counter mem_size($mem in MemoryRegions):
  base "$mem.byte_size()"
  forall $lhs in StaticDims:
    forall $rhs in StaticDims:
      mul size($lhs) when:
        "$mem.maps_dims($lhs.id(), $rhs.id())"
        order($lhs, $rhs) is not MERGED
end

/// The total amount of shared memory used.
define half counter shared_mem_used():
  forall $mem in MemoryRegions:
    sum mem_size($mem) when: mem_space($mem) is SHARED
end

// Cannot use more shared memory that what is available.
require shared_mem_used() <= "$fun.device().shared_mem()"

include "layout.exh"
