// TODO(cc_perf): expose reduce instructions in a separate set
// FIXME: shared memory is not forbidden when the dimensions of the tmp mem are unsized
// - solution: a value object, superset of memblock, with a location in REG | SHARED | GLOBAL

set Statements:
  item_type = "dyn ir::Statement"
  id_type = "ir::StmtId"
  item_getter = "$fun.statement($id)"
  id_getter = "$item.stmt_id()"
  iterator = "$fun.statements()"
  var_prefix = "stmt"
  new_objs = "$objs.statements"
end

include "instructions.exh"

set Dimensions subsetof Statements:
  disjoint: Instructions
  item_type = "ir::Dimension"
  id_type = "ir::DimId"
  item_getter = "$fun.dim($id)"
  id_getter = "$item.id()"
  iterator = "$fun.dims()"
  var_prefix = "dim"
  from_superset = "$item.as_dim()"
  new_objs = "$objs.dimensions"
end

/// The set of dimensions for which the sizes it can take is statically known.
set StaticDims subsetof Dimensions:
  item_type = "ir::Dimension"
  id_type = "ir::DimId"
  item_getter = "$fun.dim($id)"
  id_getter = "$item.id()"
  iterator = "$fun.static_dims()"
  var_prefix = "dim"
  from_superset = "$item.possible_sizes().map(|_| $item)"
  new_objs = "$objs.static_dims"
end

/// The size of a dimension with a constant size.
define integer size($dim in StaticDims): "unwrap!($dim.possible_sizes())" end

include "logical_dimensions.exh"
include "thread_dimensions.exh"

quotient IterationDims($inst in Instructions) of $dim in Dimensions:
  is_iteration_dim = order($dim, $inst) is OUTER / order is MERGED
  item_type = "ir::Dimension"
  id_type = "ir::DimId"
  item_getter = "$fun.dim($id)"
  id_getter = "$item.id()"
  iterator = "$inst.iteration_dims().iter().map(|&d| $fun.dim(d))"
  var_prefix = "iter_dim"
  new_objs = "$objs.iteration_dims"
  from_superset = "$inst.iteration_dims().get(&$item.id()).map(|_| $item)"
  reverse forall $dim in Dimensions = "$dim.iterated().map(|id| $fun.inst(id))"
  add_to_set = "crate::search_space::add_iteration_dim($fun, $inst, $item)"
end

include "variable.exh"

/// Specifies how iteration dimensions are implemented.
define enum dim_kind($dim in Dimensions):
  /// The dimension is implemented as a regular loop.
  value LOOP:
  /// The dimension is fully unrolled.
  value UNROLL:
    requires "$dim.possible_sizes().is_some()"
    // It doesn't makes sens to unroll outer loops.
    requires forall $other_dim in Dimensions:
      order($other_dim, $dim) is not INNER || dim_kind($other_dim) is VECTOR | UNROLL
  /// The dimension is mapped to the inner vector dimension.
  value INNER_VECTOR:
    requires forall $other_dim in Dimensions:
      order($dim, $other_dim) is not OUTER || dim_kind($other_dim) is INNER_VECTOR
  value OUTER_VECTOR:
  /// The dimension is mapped to a block dimension on the device.
  value BLOCK:
    requires forall $other_dim in Dimensions:
      dim_kind($other_dim) is BLOCK || order($dim, $other_dim) is OUTER
    requires forall $other in Statements:
      order($dim, $other) is NESTED | MERGED
  /// The dimension is mapped to a thread dimension on the device.
  value THREAD:
    requires "$dim.possible_sizes().is_some()"
  /// The dimension is implemented by vectorizing the instruction inside it.
  alias VECTOR = INNER_VECTOR | OUTER_VECTOR:
    requires "$dim.possible_sizes().is_some()"
    requires forall $other_dim in Dimensions:
      order($dim, $other_dim) is not OUTER || dim_kind($other_dim) is VECTOR
  /// The dimension is parallel.
  alias PARALLEL = BLOCK | THREAD | VECTOR:
    requires "$dim.is_parallelizable()"
  /// The dimension is sequential.
  alias SEQUENTIAL = LOOP | UNROLL:
end

// Ensure inner block dimensions are not too big.
require forall $outer_dim in Dimensions:
  forall $logical in LogicalDimensions:
  forall $dim in TiledDimension($logical):
    dim_kind($dim) is not BLOCK
    || order($outer_dim, $dim) is not OUTER
    || tiling_factor($logical) >=
      "($logical.total_size().max() + $fun.device().max_inner_block_size() - 1)/$fun.device().max_inner_block_size()"
require forall $outer_dim in Dimensions:
  forall $dim in StaticDims:
    dim_kind($dim) is not BLOCK
    || order($outer_dim, $dim) is not OUTER
    || size($dim) <= "$fun.device().max_inner_block_size()"

/// Defines how two statements are ordered.
define enum order($lhs in Statements, $rhs in Statements):
  antisymmetric:
    BEFORE -> AFTER
    INNER -> OUTER
  /// $lhs is executed before $rhs.
  value BEFORE:
  /// $lhs is executed after $rhs.
  value AFTER:
  /// $lhs is nested inside $rhs.
  value INNER:
  /// $rhs is nested outside $rhs.
  value OUTER:
  /// $lhs and $rhs are merged.
  value MERGED:

  /// $lhs and $rhs are nested.
  alias NESTED = INNER | OUTER:
  /// $lhs and $rhs are sequentially ordered.
  alias ORDERED = BEFORE | AFTER:
end

// Constraint triangles of orders
require forall $lhs in Statements:
  forall $mid in Statements:
    forall $rhs in Statements:
      // BEFORE is transitive
      order($lhs, $rhs) is BEFORE || order($lhs, $mid) is not BEFORE
        || order($mid, $rhs) is not BEFORE
      // INNER is transitive
      order($lhs, $rhs) is INNER || order($lhs, $mid) is not INNER
        || order($mid, $rhs) is not INNER
      // OUTER preseve the sequential ordering
      order($lhs, $rhs) == order($lhs, $mid) || order($lhs, $mid) is not ORDERED
        || order($mid, $rhs) is not OUTER
      // Two blocks outer a third one are nested.
      order($lhs, $mid) is not OUTER || order($rhs, $mid) is not OUTER
        || order($lhs, $rhs) is NESTED | MERGED
      // MERGED requires similar orderings on both sides
      order($lhs, $rhs) is not MERGED || order($rhs, $mid) == order($lhs, $mid)

// Merge constraints.
require forall $lhs in Dimensions:
  forall $rhs in Dimensions:
    order($lhs, $rhs) is not MERGED || dim_kind($lhs) == dim_kind($rhs)
    order($lhs, $rhs) is not MERGED
    || "$lhs.possible_sizes().is_some() == $rhs.possible_sizes().is_some()"

require forall $lhs in LogicalDimensions:
  forall $rhs in LogicalDimensions:
    forall $lhs_dim in TiledDimension($lhs):
      forall $rhs_dim in TiledDimension($rhs):
        order($lhs_dim, $rhs_dim) is not MERGED || "$lhs.total_size() == $rhs.total_size()"
        order($lhs_dim, $rhs_dim) is not MERGED || tiling_factor($lhs) == tiling_factor($rhs)

require forall $lhs in StaticDims:
  forall $rhs in StaticDims:
    size($lhs) == size($rhs) || order($lhs, $rhs) is not MERGED

/// Specifies the valid mappings between two dimensions.
define enum dim_mapping($lhs in Dimensions, $rhs in Dimensions):
  symmetric
  /// The dimensions cannot be mapped through registers.
  value NOT_MAPPED:
  /// Values may be transmitted using multiple registers within a thread
  value UNROLL_MAP:
    requires dim_kind($lhs) is UNROLL | VECTOR || order($lhs, $rhs) is MERGED
  /// Values may be transmitted using one register for each thread.
  value THREAD_MAP:
    requires dim_kind($lhs) is THREAD
  /// Values are transmitted through registers.
  alias MAPPED = UNROLL_MAP | THREAD_MAP:
end

require forall $lhs in StaticDims:
  forall $rhs in StaticDims:
    dim_mapping($lhs, $rhs) is not THREAD_MAP || thread_mapping($lhs, $rhs) is MAPPED
    thread_mapping($lhs, $rhs) is not MAPPED || size($lhs) == size($rhs)

/// Limits the number of nested unrolled loop.
define half counter unroll_factor($inst in Instructions):
  forall $dim in StaticDims:
    mul size($dim) when:
      is_iteration_dim($inst, $dim) is TRUE
      dim_kind($dim) is UNROLL
end

/// Limits the inner vectorization factor.
define half counter inner_vector_factor($inst in Instructions):
  forall $dim in StaticDims:
    mul size($dim) when:
      is_iteration_dim($inst, $dim) is TRUE
      dim_kind($dim) is INNER_VECTOR
end

/// Limits the outer vectorization factor.
define half counter outer_vector_factor($inst in Instructions):
  forall $dim in StaticDims:
    mul size($dim) when:
      is_iteration_dim($inst, $dim) is TRUE
      dim_kind($dim) is OUTER_VECTOR
end

/// Limits the number of block dimensions.
define half counter num_block_dims($inst in Instructions):
  forall $dim in Dimensions:
    sum "1" when:
      is_iteration_dim($inst, $dim) is TRUE
      dim_kind($dim) is BLOCK
end

require forall $inst in Instructions:
  unroll_factor($inst) <= "$fun.device().max_unrolling()"
  outer_vector_factor($inst) <= "$fun.device().max_vectorization($inst.operator())[0]"
  inner_vector_factor($inst) <= "$fun.device().max_vectorization($inst.operator())[1]"
  num_block_dims($inst) <= "$fun.device().max_block_dims()"

/// Counts the number on instructions nested in each dimension.
define half counter num_nested_inst($dim in StaticDims):
  forall $inst in Instructions:
    sum "1" when:
      order($dim, $inst) is OUTER
end

// Vectorization constraints.
require forall $dim in StaticDims:
  dim_kind($dim) is not VECTOR || num_nested_inst($dim) <= "1"
require forall $dim in StaticDims:
  forall $inst in Instructions:
    // This constraint effectively forbids VECTOR dimensions to be merged as dimensions
    // that originates from other loop nests will not be declared in the access pattern
    // and thus will have no possible vectorization factors.
    //
    // If we ever want to merge VECTOR dimensions, we will need to restric this constraint
    // to iteration dimensions.
    dim_kind($dim) is not VECTOR || order($dim, $inst) is not OUTER
      || "$fun.device().can_vectorize($dim, $inst.operator())"

require forall $dim in Dimensions:
  forall $init in Instructions:
    forall $reduce in Instructions:
      "!$reduce.is_reduction_common_dim($init.id(), $dim.id())"
        || is_iteration_dim($reduce, $dim) is FALSE || order($dim, $init) is OUTER

// Specifies whether the statement should be advanced in the dimension.  If
// advanced, the first iteration of the statement is put in the prologue and
// each iteration of the dimension executes the statement with an offset.
define enum advance($stmt in Statements, $dim in Dimensions):
	value YES:
		requires order($stmt, $dim) is INNER
		requires dim_kind($dim) is SEQUENTIAL

	value NO:
end

// If a statement is advanced in a dimension, it is also advanced in all inner
// dimensions.
require forall $stmt in Statements:
	forall $outer in Dimensions:
		forall $inner in Dimensions:
			order($inner, $stmt) is not OUTER || order($outer, $inner) is not OUTER
				|| advance($stmt, $outer) is not YES || advance($stmt, $inner) is YES
				|| dim_kind($inner) is not SEQUENTIAL

// Ensure MERGED dimensions are compatible wrt advance
require forall $stmt in Statements:
	forall $lhs in Dimensions:
		forall $rhs in Dimensions:
			order($lhs, $rhs) is not MERGED || advance($stmt, $lhs) == advance($stmt, $rhs)

// Count the number of dimensions which are advanced
define counter num_dim_advances($stmt in Statements):
	forall $dim in Dimensions:
		sum "1" when:
			advance($stmt, $dim) is YES
end

// Represents the dependencies of a statement
set Dependencies($stmt in Statements) subsetof Statements:
	item_type = "dyn ir::Statement"
	id_type = "ir::StmtId"
	item_getter = "$fun.statement($id)"
	id_getter = "$item.stmt_id()"
	iterator = "$stmt.dependencies().iter().map(|&id| $fun.statement(id))"
	from_superset = "if $stmt.dependencies().contains(&$item.stmt_id()) { Some($item) } else { None }"
	reverse forall $dep in Statements = "$dep.users().iter().map(|&id| $fun.statement(id))"
	var_prefix = "dep"
	new_objs = "$objs.dependencies"
end

// Enforce order between dependent statements depending on the advance level
require forall $user in Statements:
	forall $dep in Dependencies($user):
		order($user, $dep) is AFTER | MERGED
		num_dim_advances($user) <= num_dim_advances($dep)

// dim_map lowering.
trigger forall $lhs in Dimensions:
  forall $rhs in Dimensions:
    "crate::search_space::dim_map::dim_not_mapped($lhs, $rhs, ir_instance)"
      when dim_mapping($lhs, $rhs) is NOT_MAPPED && "$lhs.id() < $rhs.id()"

// Layout Lowering.
trigger forall $lhs in Dimensions:
  forall $rhs in Dimensions:
    "crate::search_space::dim_map::dim_not_merged($lhs, $rhs, ir_instance)"
      when order($lhs, $rhs) is not MERGED && "$lhs.id() < $rhs.id()"

// Merge lowering
trigger forall $lhs in Dimensions:
  forall $rhs in Dimensions:
    "crate::search_space::merge_dims($lhs, $rhs, ir_instance)"
      when order($lhs, $rhs) is MERGED && "$lhs.id() > $rhs.id()"
