/// Lists hardware thread dimensions.
quotient ThreadDims of $dim in StaticDims:
  is_thread_dim = dim_kind($dim) is THREAD / thread_mapping is MAPPED
  item_type = "ir::Dimension"
  id_type = "ir::DimId"
  item_getter = "$fun.dim($id)"
  id_getter = "$item.id()"
  iterator = "$fun.thread_dims()"
  var_prefix = "thread_dim"
  new_objs = "$objs.thread_dims"
  from_superset = "(if $item.is_thread_dim() { Some($item) } else { None })"
  add_to_set = "crate::search_space::add_thread_dim($fun, $item)"
end

/// Limits the number of threads.
///
/// The counter iterates on `StaticDims` instead of just `ThreadDims` because we want the
/// constraint `num_threads() <= "$fun.device().max_threads()"` to propagate to dimensions
/// that still have the possibility of not being thread dimensions. Otherwise the
/// constraint would only apply to dimensions for wich we already took the decision they
/// were threads.
define half counter num_threads():
  forall $dim in StaticDims:
    mul size($dim) when:
      is_thread_dim($dim) is TRUE
end

require num_threads() <= "$fun.device().max_threads()"

/// Limits the number of thread dimensions.
///
/// The counter iterates on `StaticDims` instead of just `ThreadDims` because we want the
/// constraint `num_thread_dims() <= 3` to propagate to dimensions that still have the
/// possibility of not being thread dimensions. Otherwise the constraint would only apply
/// to dimensions for wich we already took the decision they were threads.
define half counter num_thread_dims():
  forall $dim in StaticDims:
    sum "1" when: is_thread_dim($dim) is TRUE
end

require num_thread_dims() <= "3"

/// Indicates how are thread dimensions mapped on the GPU.
define enum thread_mapping($lhs in StaticDims, $rhs in StaticDims):
  antisymmetric:
    MAPPED_OUT -> MAPPED_IN
  /// One of the dimensions is a not thread.
  value NOT_THREADS:
    requires dim_kind($lhs) is not THREAD || dim_kind($rhs) is not THREAD
  /// The two dimensions are threads mapped to the same dimension on the GPU.
  value MAPPED:
    requires dim_kind($lhs) is THREAD
    requires dim_kind($rhs) is THREAD
    requires order($lhs, $rhs) is MERGED | ORDERED
    requires size($lhs) == size($rhs)
  /// The two dimensions are threads, but `lhs` is mapped to a dimension outside of `rhs`.
  value MAPPED_OUT:
    requires dim_kind($lhs) is THREAD
    requires dim_kind($rhs) is THREAD
    requires order($lhs, $rhs) is OUTER | ORDERED
  /// The two dimensions are threads, but `lhs` is mapped to a dimension inside of `rhs`.
  value MAPPED_IN:
    requires dim_kind($lhs) is THREAD
    requires dim_kind($rhs) is THREAD
    requires order($lhs, $rhs) is INNER | ORDERED
end

// Enforce coherence between threads activations.
require forall $lhs in StaticDims:
  forall $rhs in StaticDims:
    forall $other in StaticDims:
      thread_mapping($lhs, $rhs) is not MAPPED ||
        thread_mapping($lhs, $other) == thread_mapping($rhs, $other)
      thread_mapping($lhs, $other) is not MAPPED_OUT ||
        thread_mapping($other, $rhs) is not MAPPED_OUT ||
        thread_mapping($lhs, $rhs) is MAPPED_OUT

// Thread dimensions are grouped together
require forall $outer in StaticDims:
  forall $inner in StaticDims:
    forall $mid in Dimensions:
      order($outer, $mid) is not OUTER || order($mid, $inner) is not OUTER
        || dim_kind($outer) is not THREAD || dim_kind($inner) is not THREAD
        || dim_kind($mid) is THREAD

// outer thread dimensions are limited to a size of 64.
require forall $outer in StaticDims:
  forall $inner in StaticDims:
    thread_mapping($outer, $inner) is not MAPPED_OUT
      || size($outer) <= "64"

// A statement nested with a thread dimension is nested or merged with the other
require forall $stmt in Statements:
  forall $nested_thread in StaticDims:
    forall $other_thread in StaticDims:
      order($stmt, $nested_thread) is not NESTED || dim_kind($nested_thread) is not THREAD
        || order($other_thread, $nested_thread) is not NESTED
        || dim_kind($other_thread) is not THREAD
        || order($stmt, $other_thread) is not ORDERED

