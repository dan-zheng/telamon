var N = null;var searchIndex = {};
searchIndex["characterize"]={"doc":"","items":[],"paths":[]};
searchIndex["expandconfig"]={"doc":"","items":[],"paths":[]};
searchIndex["parse_event_log"]={"doc":"","items":[],"paths":[]};
searchIndex["telamon"]={"doc":"","items":[[0,"codegen","telamon","Helpers to generate code from an IR instance and fully…",N,N],[3,"Dimension","telamon::codegen","An iteration dimension composed of one or mure fused…",N,N],[3,"InductionLevel","","An induction level associated to a dimension.",N,N],[12,"ind_var","","",0,N],[12,"increment","","",0,N],[12,"base","","",0,N],[3,"InductionVar","","An induction variable, composed of multiple induction…",N,N],[12,"id","","",1,N],[12,"value","","",1,N],[3,"Function","","A function ready to execute on a device, derived from a…",N,N],[3,"MemoryRegion","","A memory block allocated by the kernel.",N,N],[3,"Instruction","","An instruction to execute.",N,N],[3,"NameMap","","Maps variables to names.",N,N],[3,"Size","","The size of an iteration dimension. The size is of the…",N,N],[3,"Variable","","Wraps an `ir::Variable` to expose specified decisions.",N,N],[4,"Cfg","","Represents a CFG of the targeted device.",N,N],[13,"Root","","Represents the root node of the CFG.",2,N],[13,"Loop","","Represents a loop in the CFG.",2,N],[13,"Instruction","","An instruction in the CFG, potentially vectorized on 2…",2,N],[13,"Threads","","Defines the set of active thread dimensions.",2,N],[4,"ParamVal","","Represents the value of a parameter passed to the kernel…",N,N],[13,"External","","A parameter given by the caller.",3,N],[13,"Size","","A tiled dimension size computed on the host.",3,N],[13,"GlobalMem","","A pointer to a global memory block, allocated by the…",3,N],[4,"ParamValKey","","Uniquely identifies a `ParamVal`.",N,N],[13,"External","","",4,N],[13,"Size","","",4,N],[13,"GlobalMem","","",4,N],[4,"AllocationScheme","","Indicates how is a memory block allocated.",N,N],[13,"Global","","",5,N],[13,"PrivatisedGlobal","","",5,N],[13,"Shared","","",5,N],[4,"Operand","","A value that can be named.",N,N],[13,"InductionLevel","","",6,N],[13,"Operand","","",6,N],[4,"MulMode","","",N,N],[13,"Wide","","",7,N],[13,"Low","","",7,N],[13,"High","","",7,N],[13,"Empty","","",7,N],[11,"dimensions","","Iterates over the dimensions of the `Cfg`.",2,N],[11,"instructions","","Iterates over the instructions of the `Cfg`.",2,N],[11,"induction_levels","","Iterates over the induction levels in the `Cfg`.",2,N],[11,"id","","Returns the ID of the representant.",8,[[["self"]],["dimid"]]],[11,"kind","","Returns the kind of the dimension.",8,[[["self"]],["dimkind"]]],[11,"size","","Returns the size of the dimensions.",8,[[["self"]],["size"]]],[11,"dim_ids","","Returns the ids of the `ir::Dimensions` represented by…",8,N],[11,"induction_levels","","Returns the induction levels handled by this loop.",8,N],[11,"drain_induction_levels","","Gives the ownership on the induction levels computed by…",8,[[["self"]],["vec",["inductionlevel"]]]],[11,"merge_from","","Merge another `Dimension` into this one.",8,[[["self"],["self"]]]],[11,"host_values","","Returns the values to pass from the host to the device to…",8,N],[11,"t","","Returns the type of the value created by the induction…",0,[[["self"]],["type"]]],[11,"host_values","","Returns the values to pass from the host to the device to…",0,N],[11,"host_values","","Returns the values to pass from the host to the device to…",1,N],[11,"build","","Creates a device `Function` from an IR instance.",9,[[["searchspace"]],["function"]]],[11,"thread_dims","","Returns the ordered list of thread dimensions.",9,N],[11,"block_dims","","Returns the ordered list of block dimensions.",9,N],[11,"variables","","Iterate on the function variables.",9,N],[11,"dimensions","","Iterates other all `codegen::Dimension`.",9,N],[11,"induction_vars","","Returns the list of induction variables.",9,N],[11,"num_threads","","Returns the total number of threads to allocate.",9,[[["self"]],["u32"]]],[11,"device_code_args","","Returns the values to pass from the host to the device.",9,N],[11,"cfg","","Returns the control flow graph.",9,[[["self"]],["cfg"]]],[11,"induction_levels","","Returns all the induction levels in the function.",9,N],[11,"mem_blocks","","Returns the memory blocks allocated by the function.",9,N],[11,"space","","Returns the underlying implementation space.",9,[[["self"]],["searchspace"]]],[11,"init_induction_levels","","Returns the induction levels computed at the beginning of…",9,N],[11,"from_operand","","Builds the `ParamVal` needed to implement an operand, if…",3,[[["operand"],["searchspace"]],["option"]]],[11,"from_size","","Builds the `ParamVal` needed to get a size value, if any.",3,[[["size"]],["option"]]],[11,"t","","Returns the type of the parameter.",3,[[["self"]],["type"]]],[11,"is_pointer","","Indicates if the parameter is a pointer.",3,[[["self"]],["bool"]]],[11,"key","","Returns a unique identifier for the `ParamVal`.",3,[[["self"]],["paramvalkey"]]],[11,"new","","Creates a new MemoryRegion from an `ir::Mem`.",10,[[["block"],["option"],["searchspace"]],["self"]]],[11,"host_values","","Returns the value to pass from the host to the device to…",10,N],[11,"id","","Returns the memory ID.",10,[[["self"]],["memid"]]],[11,"alloc_scheme","","Indicates how is the memory block allocated.",10,[[["self"]],["allocationscheme"]]],[11,"alloc_size","","Generates the size of the memory to allocate.",10,[[["self"]],["size"]]],[11,"local_size","","Returns the size of the part of the allocated memory…",10,[[["self"]],["size"]]],[11,"mem_space","","Returns the memory space the block is allocated in.",10,[[["self"]],["memspace"]]],[11,"ptr_type","","Returns the type of the pointer to the memory block.",10,[[["self"]],["type"]]],[11,"new","","Creates a new `Instruction`.",11,[[["instruction"],["searchspace"]],["self"]]],[11,"id","","Returns the ID of the instruction.",11,[[["self"]],["instid"]]],[11,"host_values","","Returns the values to pass from the host to implement this…",11,N],[11,"t","","Returns the type of the instruction.",11,[[["self"]],["option",["type"]]]],[11,"operator","","Returns the operator computed by the instruction.",11,[[["self"]],["operator"]]],[11,"instantiation_dims","","Returns the dimensions on which to instantiate the…",11,N],[11,"as_reduction","","Indicates if the instruction performs a reduction, in wich…",11,[[["self"]],["option"]]],[11,"mem_flag","","Returns the memory flag of the intruction, if any.",11,[[["self"]],["option",["instflag"]]]],[11,"has_side_effects","","Indicates if the instruction has observable side effects.",11,[[["self"]],["bool"]]],[11,"result_variable","","Indicates where to store the result of the instruction.",11,[[["self"]],["option",["varid"]]]],[11,"new","","Creates a new `NameMap`.",12,[[["function"],["namer"]],["self"]]],[11,"gen_name","","Generates a variable of the given `Type`.",12,[[["self"],["type"]],["string"]]],[11,"gen_loop_id","","Generates an ID for a loop.",12,[[["self"]],["u32"]]],[11,"name","","",12,[[["self"],["operand"]],["cow",["str"]]]],[11,"name_op","","Asigns a name to an operand.",12,[[["self"],["operand"]],["cow",["str"]]]],[11,"name_inst","","Returns the name of the instruction.",12,[[["self"],["instid"]],["str"]]],[11,"indexed_inst_name","","",12,N],[11,"indexed_op_name","","",12,N],[11,"name_index","","Returns the name of an index.",12,[[["self"],["dimid"]],["str"]]],[11,"set_current_index","","Set the current index of an unrolled dimension.",12,[[["self"],["dimension"],["u32"]]]],[11,"unset_current_index","","Unset the current index of an unrolled dimension.",12,[[["self"],["dimension"]]]],[11,"name_param","","Returns the name of a variable representing a parameter.",12,[[["self"],["paramvalkey"]],["cow",["str"]]]],[11,"name_param_val","","Returns the name of a variable representing a parameter…",12,[[["self"],["paramvalkey"]],["cow",["str"]]]],[11,"name_addr","","Returns the name of the address of a memory block.",12,[[["self"],["memid"]],["cow",["str"]]]],[11,"name_induction_var","","Assigns a name to an induction variable.",12,[[["self"],["indvarid"],["option",["dimid"]]],["cow",["str"]]]],[11,"declare_size_cast","","Declares a size cast. Returns the name of the variable…",12,[[["self"],["size"],["type"]],["option",["string"]]]],[11,"name_size","","Assigns a name to a size.",12,[[["self"],["size"],["type"]],["cow",["str"]]]],[11,"side_effect_guard","","Returns the side-effect guard, if any is set.",12,[[["self"]],["option",["rcstr"]]]],[11,"set_side_effect_guard","","Sets the predicate to use in front of side-effect…",12,[[["self"],["option",["rcstr"]]]]],[11,"new","","Creates a new 'Size'.",13,[[["u32"],["vec",["parameter"]],["u32"]],["self"]]],[11,"from_ir","","Converts an `ir::Size` to `Self`.",13,[[["partialsize"],["searchspace"]],["self"]]],[11,"as_int","","Returns the size of a dimension if it is staticaly known.",13,[[["self"]],["option",["u32"]]]],[11,"dividend","","Returns the dividends.",13,N],[11,"divisor","","Returns the divisor.",13,[[["self"]],["u32"]]],[11,"factor","","Returns the factor.",13,[[["self"]],["u32"]]],[11,"id","","Returns the ID of the variable.",14,[[["self"]],["varid"]]],[11,"t","","Returns the type of the variable.",14,[[["self"]],["type"]]],[11,"alias","","Indicates if the variable aliases with another.",14,[[["self"]],["option",["alias"]]]],[11,"instantiation_dims","","Returns the dimensions (and their size) along wich the…",14,N],[8,"Namer","","Assign names to variables.",N,N],[10,"name","","Provides a name for a variable of the given type.",15,[[["self"],["type"]],["string"]]],[10,"name_param","","Generates a name for a parameter.",15,[[["self"],["paramvalkey"]],["string"]]],[10,"name_float","","Provides a name for a floating point constant.",15,[[["self"],["ratio"],["u16"]],["string"]]],[10,"name_int","","Provides a name for an integer constant.",15,[[["self"],["bigint"],["u16"]],["string"]]],[8,"Printer","","",N,N],[10,"get_int","","Get the representation of an integer in the target language.",16,[[["u32"]],["string"]]],[10,"print_binop","","Print return_id = lhs op rhs",16,N],[10,"print_unary_op","","Print return_id = op",16,N],[10,"print_mul","","Print return_id = op1 * op2",16,N],[10,"print_mad","","Print return_id = mlhs * mrhs + arhs",16,N],[10,"print_ld","","Print return_id = load [addr]",16,N],[10,"print_st","","Print store val [addr]",16,N],[10,"print_label","","print a label where to jump",16,[[["self"],["str"]]]],[10,"print_cond_jump","","Print if (cond) jump label(label_id)",16,[[["self"],["str"],["str"]]]],[10,"print_sync","","Print wait on all threads",16,[[["self"]]]],[10,"name_operand","","Name an operand, vectorized on the given dimensions.",16,N],[10,"name_inst","","Names an instruction, vectorized on the given dimensions.",16,N],[11,"print_lt_int","","Prints a scalar less-than on integers.",16,[[["self"],["type"],["str"],["str"],["str"]]]],[11,"print_equals","","Prints a scalar equals instruction.",16,[[["self"],["type"],["str"],["str"],["str"]]]],[11,"print_add_int","","Prints a scalar addition on integers.",16,[[["self"],["type"],["str"],["str"],["str"]]]],[11,"print_and","","Prints an AND operation.",16,[[["self"],["type"],["str"],["str"],["str"]]]],[11,"print_move","","Prints a move instruction.",16,[[["self"],["type"],["str"],["str"]]]],[11,"cfg_vec","","",16,N],[11,"cfg","","Prints a cfg.",16,[[["self"],["function"],["cfg"],["namemap"]]]],[11,"parallel_induction_level","","Prints a multiplicative induction var level.",16,[[["self"],["inductionlevel"],["namemap"]]]],[11,"enable_threads","","Change the side-effect guards so that only the specified…",16,N],[11,"gen_loop","","Prints a Loop",16,N],[11,"standard_loop","","Prints a classic loop - that is, a sequential loop with an…",16,N],[11,"unroll_loop","","Prints an unroll loop - loop without jumps",16,N],[11,"privatise_global_block","","",16,[[["self"],["memoryregion"],["namemap"],["function"]]]],[11,"inst","","Prints an instruction.",16,N],[11,"lower_type","","",16,[[["type"],["function"]],["type"]]],[11,"mul_mode","","",16,[[["type"],["type"]],["mulmode"]]],[0,"helper","telamon","Helper functions to build an IR instance.",N,N],[3,"Builder","telamon::helper","Helper to build a `Function`.",N,N],[3,"Reduce","","Helper to build `Reduce` operands.",N,N],[12,"0","","",17,N],[3,"TmpArray","","Helper to build dim maps that can be lowered to temporary…",N,N],[12,"0","","",18,N],[3,"SignatureBuilder","","Helper struct to build a `Signature`.",N,N],[3,"LogicalDim","","A groups of dimensions that act as a single logical…",N,N],[3,"TilingPattern","","Indicates how a logical dimension should be tiled.",N,N],[11,"new","","Creates a new `Builder` for a `Function` with the given…",19,[[["signature"],["device"]],["builder"]]],[11,"get","","Returns the function created by the builder",19,[[["self"]],["searchspace"]]],[11,"get_clone","","Returns the function created by the builder",19,[[["self"]],["searchspace"]]],[11,"binop","","Creates a binary operator.",19,[[["self"],["binop"],["autooperand"],["autooperand"]],["instid"]]],[11,"add","","Adds an `Add` instruction to the fuction.",19,[[["self"],["autooperand"],["autooperand"]],["instid"]]],[11,"sub","","Adds a `Sub` instruction to the function.",19,[[["self"],["autooperand"],["autooperand"]],["instid"]]],[11,"mul","","Adds a `Mul` instruction to the function. Defaults to low…",19,[[["self"],["autooperand"],["autooperand"]],["instid"]]],[11,"mul_ex","","Adds a 'Mul` instruction with a wide mode to the function.",19,[[["self"],["autooperand"],["autooperand"],["type"]],["instid"]]],[11,"mad","","Adds a `Mad` or `Fma` instruction to the function.…",19,[[["self"],["autooperand"],["autooperand"],["autooperand"]],["instid"]]],[11,"div","","Adds a `Div` instruction to the fuction.",19,[[["self"],["autooperand"],["autooperand"]],["instid"]]],[11,"mov","","Adds a `Mov` instruction to the function.",19,[[["self"],["autooperand"]],["instid"]]],[11,"ld","","Adds a coherent load from global memory instruction to the…",19,[[["self"],["type"],["autooperand"],["accesspattern"]],["instid"]]],[11,"ld_nc","","Adds a non-coherent load from global memory instruction to…",19,[[["self"],["type"],["autooperand"],["accesspattern"]],["instid"]]],[11,"ld_ex","","Adds a load instruction with the given flags and memory…",19,[[["self"],["type"],["autooperand"],["accesspattern"],["instflag"]],["instid"]]],[11,"st","","Adds a store instruction.",19,[[["self"],["autooperand"],["autooperand"],["accesspattern"]],["instid"]]],[11,"st_ex","","Adds a store instruction with the given flags and memory…",19,[[["self"],["autooperand"],["autooperand"],["bool"],["accesspattern"],["instflag"]],["instid"]]],[11,"cast","","Adds a cast instruction to the given type.",19,[[["self"],["autooperand"],["type"]],["instid"]]],[11,"order","","Restricts the order between two basic blocks. Does not…",19,[[["self"],["metastatement"],["metastatement"],["order"]]]],[11,"get_inst_variable","","Returns the variable holding the result of an instruction.…",19,[[["self"],["instid"]],["varid"]]],[11,"create_last_variable","","Creates a new variable that takes the last value of…",19,N],[11,"create_dim_map_variable","","Creates a new variable that takes point-to-point the value…",19,N],[11,"action","","Applies an action on the function.",19,[[["self"],["action"]]]],[11,"open_dim","","Opens a new dimension.",19,[[["self"],["size"]],["logicaldim"]]],[11,"open_dim_ex","","Opens a nest of new dimension with the given kinds and…",19,[[["self"],["size"],["dimkind"]],["logicaldim"]]],[11,"open_tiled_dim","","Open multiple dimensions to represent a tiled dimension.",19,[[["self"],["size"],["tilingpattern"]],["logicaldim"]]],[11,"open_mapped_dim","","Opens a new dimension mapped to an existing one.",19,[[["self"],["logicaldim"]],["logicaldim"]]],[11,"reopen_dim","","Opens an existing dimension.",19,[[["self"],["logicaldim"]]]],[11,"reopen_mapped_dim","","Opens an existing dimension and maps it to another one.…",19,[[["self"],["logicaldim"],["logicaldim"]]]],[11,"close_dim","","Closes a dimension.",19,[[["self"],["logicaldim"]]]],[11,"cst_size","","Returns a constant size.",19,[[["self"],["u32"]],["size"]]],[11,"param_size","","Returns a parameter size.",19,[[["self"],["str"],["u32"]],["size"]]],[11,"allocate_shared","","Allocates a memory block in shared memory.",19,[[["self"],["u32"]],["memid"]]],[11,"allocate","","Allocates a memory block.",19,[[["self"],["u32"],["bool"]],["memid"]]],[11,"tensor_access","","Builds both an induction variable for a tensor memory…",19,N],[11,"tensor_access_pattern","","Generates the access pattern corresponding to accessing a…",19,[[["self"],["option",["memid"]],["vec"]],["accesspattern"]]],[11,"induction_var","","Builds an induction variable.",19,[[["self"],["autooperand"],["vec"]],["indvarid"]]],[11,"dim_map","","Creates a dim-map operand.",19,N],[11,"find_param","","Finds a paramter given its name.",19,[[["self"],["str"]],["parameter"]]],[11,"new","","Creates a new builder for a function with the given name.",20,[[["str"],["am"]],["self"]]],[11,"set_random_fill","","Arrays are filled with random data if set to true.",20,[[["self"],["bool"]]]],[11,"scalar","","Creates a new parameter and binds it to the given value.",20,[[["self"],["str"],["t"]]]],[11,"max_size","","Creates a new `i32` paramter and returns a size equals to…",20,[[["self"],["str"],["u32"]],["dimsize"]]],[11,"array","","Creates a new parameter and binds it to a freshly…",20,[[["self"],["str"],["usize"]],["arc",["arrayargument"]]]],[11,"tensor","","Allocates an n-dimensional array.",20,[[["self"],["str"],["vec",["dimsize"]],["bool"]],["tensor"]]],[11,"get","","Returns the `Signature` created by the builder.",20,[[["self"]],["signature"]]],[11,"context","","Returns the underlying context.",20,[[["self"]],["am"]]],[0,"tensor","","Utilities to allocate and operate on tensors.",N,N],[3,"DimSize","telamon::helper::tensor","A dimension size, before tiling.",N,N],[12,"factor","","",21,N],[12,"params","","",21,N],[12,"max_size","","",21,N],[3,"TensorBuilder","","An helper to build a tensor.",N,N],[3,"Tensor","","A tensor allocated in main memory.",N,N],[3,"VirtualTensor","","A tensor loaded in registers.",N,N],[11,"to_ir_size","","Convert the size into the size type used by the IR.",21,[[["self"],["builder"]],["size"]]],[11,"eval","","Converts the size into a numerical value for a given…",21,[[["self"],["context"]],["u32"]]],[11,"new_param","","Creates a new size equals to the given parameter.",21,[[["str"],["u32"]],["self"]]],[11,"new","","Start building a `Tensor` with the given logical layout.",22,[[["str"],["vec",["dimsize"]]],["self"]]],[11,"transpose","","Swap two dimensions in the memory layout of the tensor.…",22,[[["self"],["usize"],["usize"]],["self"]]],[11,"stride_dim","","Removes a logical dimension but keeps it in the storage.",22,[[["self"],["usize"]],["self"]]],[11,"enable_writes","","Allows writing to the tensor.",22,[[["self"]],["self"]]],[11,"finish","","Builds the `Tensor`.",22,[[["self"],["signaturebuilder"]],["tensor"]]],[11,"new","","Allocates a new `Tensor` in the context.",23,[[["str"],["vec",["dimsize"]],["bool"],["arc",["arrayargument"]]],["self"]]],[11,"load","","Creates a `VirtualTensor` that contains the values of…",23,[[["self"],["vec",["tilingpattern"]],["builder"]],["virtualtensor"]]],[11,"read_to_host","","Reads the tensor value in the context and copies it on the…",23,[[["self"],["context"]],["arrayd"]]],[11,"new","","Creates a new `VirtualTensor`.",24,[[["instid"],["vec",["logicaldim"]]],["self"]]],[11,"dim_map","","Creates an operand that yeilds the values of the tensor in…",24,N],[11,"store","","Stores the `VirtualTensor` in memory. Stores contiguously…",24,[[["self"],["tensor"],["builder"]],["virtualtensor"]]],[11,"inst","","Returns the underlying instruction.",24,[[["self"]],["instid"]]],[8,"AutoOperand","telamon::helper","Represents values that can be turned into an `Operand`.",N,N],[10,"get","","Returns the corresponding `Operand`.",25,[[["self"],["builder"]],["operand"]]],[8,"MetaStatement","","A logical basic block, that can actually be implemented by…",N,N],[10,"ids","","Returns the ids on the underlying basic blocks.",26,[[["self"]],["box",["iterator"]]]],[11,"iter","","Iterates on the reals IDs, from the outermost to the…",27,N],[11,"id","","Returns the id of the logical dimension.",27,[[["self"]],["logicaldimid"]]],[11,"new_fixed","","Creates a new fixed tiling pattern, with dimensions of the…",28,N],[11,"infer_pattern","","Infer a tiling pattern for a dimension whose size is a…",28,N],[0,"device","telamon","Code generation and candidate evaluation for specific…",N,N],[4,"EvalMode","telamon::device","Indicates how evaluation should be performed.",N,N],[13,"FindBest","","Find the best candidate, skip bad candidates and allow…",29,N],[13,"TestEval","","Test the evaluation function, same as `FindBest` but do…",29,N],[13,"TestBound","","Test the performance model, do not skip candidates and do…",29,N],[0,"fake","","",N,N],[3,"FakeContext","telamon::device::fake","A fake context to use when we don't actually care about…",N,N],[3,"FakeArray","","A fake array implementation which doesn't read or write…",N,N],[11,"new","","",30,[[["d"]],["self"]]],[0,"x86","telamon::device","Defines the CPU target.",N,N],[3,"Context","telamon::device::x86","A CPU evaluation context.",N,N],[3,"Cpu","","Represents CUDA GPUs.",N,N],[12,"name","","The name of the CPU.",31,N],[3,"X86printer","","",N,N],[11,"get_param","","Returns a parameter given its name.",32,[[["self"],["str"]],["argument"]]],[11,"dummy_cpu","","",31,[[],["self"]]],[11,"function","","Prints a `Function`.",33,[[["self"],["function"]],["string"]]],[11,"wrapper_function","","wrap the kernel call into a function with a fixed interface",33,[[["self"],["function"]],["string"]]],[11,"skip_bad_candidates","telamon::device","Indicates if candidates with a bound above the cut can be…",29,[[["self"]],["bool"]]],[6,"AsyncCallback","","A callback that is called after evaluating a kernel.",N,N],[8,"ArrayArgument","","Represents an array on the device.",N,N],[10,"read_i8","","Copies the array to the host as a vector of bytes.",34,[[["self"]],["vec",["i8"]]]],[10,"write_i8","","Copies an array to the device from a slice of bytes.",34,N],[8,"ArrayArgumentExt","","",N,N],[11,"read","","Copies the array to the host, interpreting it as an array…",35,[[["self"]],["vec"]]],[11,"write","","Copies an values to the device array from the host array…",35,N],[8,"ScalarArgument","","Represents a value that can be used as a `Function`…",N,N],[11,"as_size","","Returns the argument interpreted as an iteration dimension…",36,[[["self"]],["option",["u32"]]]],[10,"t","","Returns the type of the argument.",36,[[],["type"]]],[10,"get_type","","Returns the type of the argument. This is a version of…",36,[[["self"]],["type"]]],[10,"raw_ptr","","Returns a raw pointer to the object.",36,N],[10,"as_operand","","Returns an operand holding the argument value as a constant.",36,[[["self"]],["operand"]]],[10,"gen_random","","Generates a random instance of the argument type.",36,[[["r"]],["self"]]],[8,"ArgMap","","Binds the argument names to their values.",N,N],[10,"bind_erased_scalar","","",37,[[["self"],["parameter"],["box",["scalarargument"]]]]],[10,"bind_erased_array","","",37,[[["self"],["parameter"],["type"],["usize"]],["arc",["arrayargument"]]]],[8,"ArgMapExt","","",N,N],[11,"bind_scalar","","Binds a parameter to a given value.",38,[[["self"],["parameter"],["s"]]]],[11,"bind_array","","Allocates an array of the given size in bytes.",38,[[["self"],["parameter"],["usize"]],["arc",["arrayargument"]]]],[8,"AsyncEvaluator","","An evaluation context that runs kernels asynchronously on…",N,N],[10,"add_kernel","","Add a kernel to evaluate.",39,[[["self"],["candidate"],["asynccallback"]]]],[8,"Context","","Describes the context for which a function must be…",N,N],[10,"device","","Returns the description of the device the code runs on.",40,[[["self"]],["device"]]],[10,"evaluate","","Returns the execution time of a fully specified…",40,[[["self"],["function"],["evalmode"]],["result",["f64"]]]],[10,"benchmark","","Compiles and benchmarks a functions. As opposed to…",40,[[["self"],["function"],["usize"]],["vec",["f64"]]]],[10,"async_eval","","Calls the `inner` closure in parallel, and gives it a…",40,[[["self"],["usize"],["evalmode"],["fn"]]]],[10,"param_as_size","","Returns a parameter interpreted as a size, if possible.",40,[[["self"],["str"]],["option",["u32"]]]],[11,"eval_size","","Evaluate a size.",40,[[["self"],["size"]],["u32"]]],[8,"Device","","Holds the specifications of a target.",N,N],[10,"print","","Prints the code corresponding to a device `Function`.",41,[[["self"],["function"],["write"]]]],[10,"check_type","","Indicates if a `Type` can be implemented on the device.",41,[[["self"],["type"]],["result",["typeerror"]]]],[10,"max_block_dims","","Returns the maximal number of block dimensions.",41,[[["self"]],["u32"]]],[10,"max_inner_block_size","","The maximal size inner block dimensions can have.",41,[[["self"]],["u32"]]],[10,"max_threads","","Returns the maximal number of threads.",41,[[["self"]],["u32"]]],[10,"max_unrolling","","Returns the maximal unrolling factor.",41,[[["self"]],["u32"]]],[10,"has_vector_registers","","Indicates if the device uses vector registers or has…",41,[[["self"]],["bool"]]],[10,"can_vectorize","","Indicates if the operator can be vectorized along the…",41,[[["self"],["dimension"],["operator"]],["bool"]]],[10,"max_vectorization","","Indicates the maximal vectorization factor for the given…",41,N],[10,"shared_mem","","Returns the amount of shared memory available for each…",41,[[["self"]],["u32"]]],[10,"pointer_type","","Indicates the type of the pointer for the given memory…",41,[[["self"],["memspace"]],["type"]]],[10,"supported_mem_flags","","Indicates the memory flags supported by the operator.",41,[[["self"],["operator"]],["instflag"]]],[10,"name","","Returns the name of the device.",41,[[["self"]],["str"]]],[10,"hw_pressure","","Returns the pressure cause by a `Statement`. For a…",41,[[["self"],["searchspace"],["hashmap"],["hashmap"],["statement"],["context"]],["hwpressure"]]],[10,"loop_iter_pressure","","Returns the pressure produced by a single iteration of a…",41,N],[10,"thread_rates","","Returns the processing rates of a single thread, in units/ns",41,[[["self"]],["hwpressure"]]],[10,"block_rates","","Returns the processing rates of a single block, in units/ns.",41,[[["self"]],["hwpressure"]]],[10,"total_rates","","Returns the processing rates of the whole accelerator un…",41,[[["self"]],["hwpressure"]]],[10,"bottlenecks","","Returns the names of potential bottlenecks.",41,N],[10,"block_parallelism","","Returns the number of blocks that can be executed in…",41,[[["self"],["searchspace"]],["u32"]]],[10,"additive_indvar_pressure","","Returns the pressure caused by an additive induction…",41,[[["self"],["type"]],["hwpressure"]]],[10,"multiplicative_indvar_pressure","","Returns the pressure caused by a multiplicative induction…",41,[[["self"],["type"]],["hwpressure"]]],[10,"add_block_overhead","","Adds the overhead (per instance) due to partial wraps and…",41,[[["self"],["factorrange"],["factorrange"],["range"],["hwpressure"]]]],[10,"lower_type","","Lowers a type using the memory space information. Returns…",41,[[["self"],["type"],["searchspace"]],["option",["type"]]]],[11,"gen_code","","Builds and outputs a constrained IR instance.",41,[[["self"],["searchspace"],["write"]]]],[0,"explorer","telamon","exploration of the search space.",N,N],[3,"Candidate","telamon::explorer","A node of the search tree.",N,N],[12,"space","","Represents a part of the full search space.",42,N],[12,"bound","","Gives a lower bound in nanoseconds on the execution time…",42,N],[12,"depth","","The depth of the candidate in the search tree.",42,N],[12,"actions","","The list of actions already taken.",42,N],[4,"DeadEndSource","","",N,N],[13,"Tree","","Dead-end encountered in the tree",43,N],[12,"actions","telamon::explorer::DeadEndSource","List of actions defining the dead-end candidate",43,N],[13,"Rollout","telamon::explorer","Dead-end encountered in the rollout phase",43,N],[12,"actions","telamon::explorer::DeadEndSource","List of actions defining the dead-end candidate",43,N],[12,"depth","","Depth in the tree. The remaining actions were selected…",43,N],[12,"bound","","Performance model bound",43,N],[12,"cut","","Current cut value",43,N],[4,"TreeEvent","telamon::explorer","The possible tree events. WARNING: Changing the enums will…",N,N],[13,"Evaluation","","",44,N],[12,"actions","telamon::explorer::TreeEvent","",44,N],[12,"score","","",44,N],[13,"EvaluationV2","telamon::explorer","A fully-specified implementation was found and evaluated",44,N],[12,"actions","telamon::explorer::TreeEvent","List of actions defining the implementation",44,N],[12,"depth","","Depth in the tree. The remaining actions were selected…",44,N],[12,"score","","Execution time",44,N],[12,"bound","","Performance model lower bound",44,N],[12,"cut","","Cut value when the implementation was found. This is the…",44,N],[12,"discovery_time","","Time at which the implementation was found",44,N],[12,"evaluation_end_time","","Time at which the evaluation finished. Note that…",44,N],[12,"thread","","ID of the thread that found this implementation",44,N],[13,"DeadEnd","telamon::explorer","A dead-end was reached",44,N],[12,"source","telamon::explorer::TreeEvent","Source of this deadend",44,N],[12,"discovery_time","","Time at which the deadend was found after the start of the…",44,N],[12,"thread","","ID of the thread that found the deadend",44,N],[4,"LogMessage","telamon::explorer","",N,N],[13,"Event","","",45,N],[13,"NewBest","","",45,N],[12,"score","telamon::explorer::LogMessage","",45,N],[12,"cpt","","",45,N],[12,"timestamp","","",45,N],[13,"Finished","telamon::explorer","",45,N],[5,"find_best","","Entry point of the exploration. This function returns the…",N,[[["config"],["context"],["vec",["searchspace"]]],["option",["searchspace"]]]],[5,"find_best_ex","","Same as `find_best`, but allows to specify pre-existing…",N,[[["config"],["context"],["vec",["candidate"]]],["option",["candidate"]]]],[5,"gen_space","","Explores the full search space.",N,[[["context"],["searchspace"],["f"],["g"]]]],[11,"new","","Creates a new candidate, with depth 0.",42,[[["searchspace"],["bound"]],["self"]]],[11,"apply_choice","","",42,[[["self"],["context"],["vec",["actionex"]]],["vec",["candidate"]]]],[11,"apply_decision","","Applies a choice to a candidate.",42,[[["self"],["context"],["actionex"]],["result"]]],[0,"choice","","Choices that can be applied to split the search space.",N,N],[4,"ActionEx","telamon::explorer::choice","Either a regular action or a manually applied action.",N,N],[13,"Action","","",46,N],[13,"LowerLayout","","",46,N],[12,"mem","telamon::explorer::choice::ActionEx","",46,N],[12,"st_dims","","",46,N],[12,"ld_dims","","",46,N],[5,"list","telamon::explorer::choice","",N,N],[5,"default_list","","This function is to be either removed or reimplemented…",N,N],[5,"fix_order","","Chooses an order between instructions and dimensions when…",N,[[["searchspace"]],["searchspace"]]],[6,"Choice","","Represents a choice that splits a search space in multiple…",N,N],[0,"config","telamon::explorer","Defines a structure to store the configuration of the…",N,N],[3,"Config","telamon::explorer::config","Stores the configuration of the exploration.",N,N],[12,"log_file","","Name of the file in wich to store the logs.",47,N],[12,"event_log","","Name of the file in which to store the binary event log.",47,N],[12,"num_workers","","Number of exploration threads.",47,N],[12,"stop_bound","","Indicates the search must be stopped if a candidate with…",47,N],[12,"timeout","","Indicates the search must be stopped after the given…",47,N],[12,"max_evaluations","","Indicates the search must be stopped after the given…",47,N],[12,"distance_to_best","","A percentage cut indicate that we only care to find a…",47,N],[12,"algorithm","","Exploration algorithm to use. Needs to be last for TOML…",47,N],[3,"BanditConfig","","Configuration parameters specific to the multi-armed…",N,N],[12,"initial_cut","","Indicates the initial cut to use (in nanoseconds). This…",48,N],[12,"backtrack_deadends","","Indicates whether we should backtrack locally when a…",48,N],[12,"new_nodes_order","","Indicates how to select between nodes of the search tree…",48,N],[12,"choice_ordering","","Order in which the different choices are going to be…",48,N],[12,"tree_policy","","Indicates how to choose between nodes with at least one…",48,N],[3,"TAGConfig","","Configuration for the TAG algorithm",N,N],[12,"topk","","The number of best execution times to remember.",49,N],[12,"delta","","The biggest delta is, the more focused on the previous…",49,N],[3,"UCTConfig","","Configuration for the UCT algorithm",N,N],[12,"exploration_constant","","Constant multiplier for the exploration term. This is…",50,N],[12,"normalization","","Normalization to use for the exploration term.",50,N],[12,"value_reduction","","Reduction function to use when computing the state value.",50,N],[12,"reward","","Target to use as a reward.",50,N],[12,"formula","","Formula to use for the exploration term.",50,N],[3,"ParseChoiceGroupError","","An error which can be returned when parsing a group of…",N,N],[3,"ChoiceOrdering","","A list of ChoiceGroup representing the order in which we…",N,N],[4,"SearchAlgorithm","","Exploration algorithm to use.",N,N],[13,"BoundOrder","","Evaluate all the candidates that cannot be pruned.",51,N],[13,"MultiArmedBandit","","Use a multi-armed bandit algorithm.",51,N],[13,"Mcts","","Use a MCTS algorithm",51,N],[4,"TreePolicy","","Tree policy configuration",N,N],[13,"Bound","","Take the candidate with the best bound.",52,N],[13,"WeightedRandom","","Consider the nodes with a probability proportional to the…",52,N],[13,"TAG","","Policies based on TAG, as described in",52,N],[13,"UCT","","Policies based on UCT, including variants such as p-UCT.…",52,N],[4,"Formula","","",N,N],[13,"Uct","","Regular UCT formula: sqrt(log(\\sum visits) / visits)",53,N],[13,"AlphaPuct","","AlphaGo PUCT variant: p * sqrt(\\sum visits) / visits…",53,N],[4,"Reward","","",N,N],[13,"NegTime","","",54,N],[13,"Speed","","",54,N],[13,"LogSpeed","","",54,N],[4,"ValueReduction","","",N,N],[13,"Mean","","Use the mean evaluation time. This yields the regular UCT…",55,N],[13,"Best","","Use the best evaluation time. This yields an algorithm…",55,N],[4,"Normalization","","",N,N],[13,"GlobalBest","","Normalize the exploration term according to the current…",56,N],[4,"NewNodeOrder","","Indicates how to choose between nodes of the search tree…",N,N],[13,"Api","","Consider the nodes in the order given by the search space…",57,N],[13,"Random","","Consider the nodes in a random order.",57,N],[13,"Bound","","Consider the nodes with the lowest bound first.",57,N],[13,"WeightedRandom","","Consider the nodes with a probability proportional to the…",57,N],[4,"ChoiceGroup","","An enum listing the Group of choices we can make For…",N,N],[13,"LowerLayout","","",58,N],[13,"Size","","",58,N],[13,"DimKind","","",58,N],[13,"DimMap","","",58,N],[13,"Order","","",58,N],[13,"MemSpace","","",58,N],[13,"InstFlag","","",58,N],[11,"read","","Reads the configuration from the \"Settings.toml\" file and…",47,[[],["self"]]],[11,"read_from_file","","Extract the configuration from the configuration file, if…",47,[[],["self"]]],[11,"from_json","","Parse the configuration from a JSON string. Primary user…",47,[[["str"]],["self"]]],[0,"local_selection","telamon::explorer","Provides different methods to select a candidate in a list.",N,N],[3,"Rollout","telamon::explorer::local_selection","A random rollout configuration",N,N],[12,"choice_order","","The order in which choices should be considered during the…",59,N],[12,"node_order","","The policy to use when selecting among the available actions",59,N],[12,"context","","The context to use for propagation",59,N],[12,"cut","","Current best score. Used in a branch-and-bound fashion…",59,N],[4,"RolloutError","","",N,N],[13,"DeadEnd","","The candidate is a dead-end",60,N],[13,"Implementation","","The candidate is fully specified",60,N],[5,"descend","","A recursive function that takes a candidate and expands it…",N,[[["choiceordering"],["newnodeorder"],["context"],["candidate"],["f64"]],["option",["candidate"]]]],[11,"descend_backtrack","","Repeatedly perform rollout steps on the `candidate` until…",59,[[["self"],["candidate"]],["option",["candidate"]]]],[11,"descend","","Repeatedly perform rollout steps on the `candidate` until…",59,[[["self"],["candidate"]],["option",["candidate"]]]],[11,"descend_with_path","","Identical to `descend`, except that all intermediate…",59,[[["self"],["candidate"],["vec"]],["option",["candidate"]]]],[11,"pick_candidate","telamon::explorer::config","Called in montecarlo_descend, dispatch the choice of the…",57,N],[11,"pick_index","","Returns the index of the next candidate to consider.",57,[[["self"],["it"],["f64"]],["option",["usize"]]]],[0,"mcts","telamon::explorer","Search space exploration using MCTS-style algorithm",N,N],[3,"NodeId","telamon::explorer::mcts","Newtype wrapper to represent a node identifier. Node…",N,N],[3,"Node","","Represents a node in the search tree. This is represented…",N,N],[3,"WeakNode","","Non-owning reference to a node. The node can be accessed…",N,N],[3,"Edge","","An edge in the search tree, which can contain additional…",N,N],[3,"Env","","An environment in which candidates can be refined.",N,N],[3,"Timed","","Wrapper struct to annotate events with timing information.",N,N],[3,"Trace","","A path in the tree.",N,N],[3,"Tree","","Helper structure to manipulate a tree.",N,N],[3,"NodeCursor","","A cursor which can be moved in the tree and remembers its…",N,N],[3,"MctsStore","","Wrapper to interact with the `Store` trait.",N,N],[3,"UCTPolicy","","TODO(bclement): The UCT formula is wrong, because 1) we…",N,N],[3,"UCTStats","","",N,N],[3,"TAGPolicy","","",N,N],[3,"TAGStats","","Holds the TAG statistics for a given edge.",N,N],[4,"CauseOfDeath","","The possible causes for which a node can be killed.",N,N],[13,"Constraints","","Unsatisfied constraints.",61,N],[13,"PerfModel","","Cut by the performance model.",61,N],[12,"cut","telamon::explorer::mcts::CauseOfDeath","",61,N],[13,"Backtrack","telamon::explorer::mcts","All child nodes are dead.",61,N],[4,"Policy","","The types of policy used.",N,N],[13,"Bandit","","",62,N],[13,"Default","","",62,N],[4,"Event","","The possible events in a trace.",N,N],[13,"SelectNode","","Move to a node given by its ID. This is typically used at…",63,N],[13,"SelectChild","","Select the `n`th child of the current node.",63,N],[13,"Expand","","Expand the current node.",63,N],[13,"Kill","","Kill the current node for the given reason.",63,N],[13,"KillChild","","Kill the `n`th child of the current node for the given…",63,N],[13,"Implementation","","An implementation was found. This should occur at most…",63,N],[4,"Message","","A log message.",N,N],[13,"Node","","A new node was created",64,N],[12,"id","telamon::explorer::mcts::Message","Id of the newly created node",64,N],[12,"parent","","Parent of the node, if it exists. This is a pair…",64,N],[12,"children","","All available children for this node. This includes all…",64,N],[12,"bound","","Explained bound from the performance model. `None` if the…",64,N],[13,"Trace","telamon::explorer::mcts","Sequence of actions (moves in the tree) performed by a…",64,N],[12,"thread","telamon::explorer::mcts::Message","The thread performing the descent. There can be multiple…",64,N],[12,"events","","Sequence of events performed by the thread.",64,N],[13,"Evaluation","telamon::explorer::mcts","A node was evaluated",64,N],[12,"id","telamon::explorer::mcts::Message","Identifier of the evaluated node",64,N],[12,"value","","Evaluation result. If `None`, the node was cut at…",64,N],[8,"TreePolicy","telamon::explorer::mcts","",N,N],[10,"pick_child","","",65,N],[11,"backpropagate","","",65,[[["self"],["node"],["usize"],["option",["f64"]]]]],[11,"id","","The node identifier. Node identifiers are unique for nodes…",66,[[["self"]],["nodeid"]]],[11,"depth","","Depth of the node.  The root is at depth 0.",66,[[["self"]],["usize"]]],[11,"bound","","Bound from the performance model. If `None`, the node is…",66,[[["self"]],["option",["bound"]]]],[11,"is_live","","Returns whether the node is still live.",66,[[["self"]],["bool"]]],[11,"try_with_node","","Call a function on the destination node if there is one,…",67,[[["self"],["f"]],["option"]]],[11,"index","","Edge index across the parent's children.",67,[[["self"]],["usize"]]],[11,"action","","The action associated with this edge.",67,[[["self"]],["action"]]],[11,"data","","Algorithm-specific data associated with the edge.",67,[[["self"]],["e"]]],[11,"new","","Create a new environment.",68,[[["choiceordering"],["context"]],["self"]]],[11,"list_actions","","List the available actions for a candidate.",68,[[["self"],["searchspace"]],["vec",["action"]]]],[11,"apply_action","","Apply an action to an existing candidate, consuming the…",68,[[["self"],["searchspace"],["action"]],["option",["searchspace"]]]],[11,"bound","","Compute the performance model bound for a candidate.",68,[[["self"],["searchspace"]],["bound"]]],[11,"node","","Create a new node.",69,[[["self"],["option"],["option",["searchspace"]]],["node"]]],[11,"cut","","Apply the current cut to the pointed-to node. Returns…",70,[[["self"]],["bool"]]],[11,"live_children_iter","","An iterator on the live children of the pointed-to node.",70,N],[11,"live_children_iter_with_candidates","","An iterator on the live children of the pointed-to nodes…",70,N],[11,"kill","","Kill the currently pointed-to node.",70,[[["self"],["causeofdeath"]]]],[11,"evaluate","","",70,[[["self"],["searchspace"]],["result"]]],[11,"expand","","Expand the currently pointed-to node and returns the…",70,[[["self"]],["option",["searchspace"]]]],[11,"new","","",71,[[["searchspace"],["context"],["banditconfig"],["box",["treepolicy"]],["box",["treepolicy"]],["syncsender",["logmessage"]]],["self"]]],[0,"ir","telamon","Representation and manipulation of a set of possible…",N,N],[3,"DimMap","telamon::ir","Represents a mapping between dimenions.",N,N],[3,"DimId","","Provides a unique identifier for iteration dimensions.",N,N],[12,"0","","",72,N],[3,"DimMapping","","Specifies that two dimensions should be mapped together.",N,N],[3,"DimMappingId","","Uniquely identifies a pair of mapped dimensions.",N,N],[12,"0","","",73,N],[3,"Dimension","","Represents an iteration dimension.",N,N],[3,"LogicalDim","","A logic dimension composed of multiple `Dimension`s.",N,N],[3,"LogicalDimId","","Provides a unique identifier for logic dimensions.",N,N],[12,"0","","",74,N],[3,"Function","","Describes a function and the set of its possible…",N,N],[3,"Parameter","","Represents an argument of a function.",N,N],[12,"name","","The name of the `Parameter`",75,N],[12,"t","","The type of the `Parameter`.",75,N],[12,"elem_t","","If the parameter point to an array, indicates the element…",75,N],[3,"Signature","","Holds the signature of a function.",N,N],[12,"name","","Mame of the function.",76,N],[12,"params","","Arguments of the function.",76,N],[3,"IndVarId","","Unique identifier for `InductionVar`",N,N],[12,"0","","",77,N],[3,"InductionVar","","A multidimentional induction variable. No dimension should…",N,N],[3,"InstId","","Uniquely identifies an instruction.",N,N],[12,"0","","",78,N],[3,"Instruction","","Represents an instruction.",N,N],[3,"LoweringMap","","",N,N],[3,"PartialSize","","A size whose exact value is not yet decided. The value of…",N,N],[3,"Size","","A fully specified size.",N,N],[3,"VarId","","Uniquely identifies variables.",N,N],[12,"0","","",79,N],[3,"Variable","","A variable produced by the code.",N,N],[3,"NewObjs","","Stores the objects created by a lowering.",N,N],[12,"instructions","","",80,N],[12,"dimensions","","",80,N],[12,"static_dims","","",80,N],[12,"statements","","",80,N],[12,"mem_blocks","","",80,N],[12,"mem_insts","","",80,N],[12,"iteration_dims","","",80,N],[12,"thread_dims","","",80,N],[12,"logical_dims","","",80,N],[12,"tile_dimensions","","",80,N],[12,"tiled_dimensions","","",80,N],[12,"dim_mappings","","",80,N],[12,"mapped_dims","","",80,N],[12,"static_mapped_dims","","",80,N],[12,"variables","","",80,N],[12,"use_statements","","",80,N],[12,"def_statements","","",80,N],[12,"var_dims","","",80,N],[12,"var_mappings","","",80,N],[3,"LoweredDimMap","","A point-to-point communication lowered into a store and a…",N,N],[12,"mem","","",81,N],[12,"store","","",81,N],[12,"load","","",81,N],[12,"st_dims_mapping","","Mapping from production dimensions to store dimensions.",81,N],[12,"ld_dims_mapping","","Mapping from consumption dimensions to load dimensions.",81,N],[3,"Counter","","A wrapper used to count extra dimensions that will be…",N,N],[12,"next_mem","","",82,N],[12,"next_inst","","",82,N],[12,"next_dim","","",82,N],[12,"next_dim_mapping","","",82,N],[4,"AccessPattern","","",N,N],[13,"Unknown","","Unknown access pattern.",83,N],[13,"Tensor","","Access with a fixed stride on each dimensions. Accesses on…",83,N],[12,"mem_id","telamon::ir::AccessPattern","",83,N],[12,"dims","","",83,N],[4,"Stride","telamon::ir","A stride on a given dimensions.",N,N],[13,"Int","","A fixed stride.",84,N],[13,"Unknown","","A stride that is not statically known.",84,N],[4,"Error","","An error occuring while manipulating an ir instance.",N,N],[13,"Type","","",85,N],[13,"InvalidDimSize","","",85,N],[13,"DuplicateIncrement","","",85,N],[12,"dim","telamon::ir::Error","",85,N],[13,"MissingIterationDim","telamon::ir","",85,N],[12,"dim","telamon::ir::Error","",85,N],[13,"MissingDimMapping","telamon::ir","",85,N],[12,"lhs","telamon::ir::Error","",85,N],[12,"rhs","","",85,N],[4,"TypeError","telamon::ir","Errors that can be raised when creating an IR instance.",N,N],[13,"InvalidType","","",86,N],[12,"t","telamon::ir::TypeError","",86,N],[13,"ExpectedReturnType","telamon::ir","",86,N],[12,"inst","telamon::ir::TypeError","",86,N],[13,"InvalidRounding","telamon::ir","",86,N],[12,"rounding","telamon::ir::TypeError","",86,N],[12,"t","","",86,N],[13,"WrongType","telamon::ir","",86,N],[12,"given","telamon::ir::TypeError","",86,N],[12,"expected","","",86,N],[13,"UnexpectedType","telamon::ir","",86,N],[12,"t","telamon::ir::TypeError","",86,N],[4,"DimMapScope","telamon::ir","Indicates how dimensions can be mapped. The `L` type…",N,N],[13,"Local","","The dimensions are mapped within registers, without…",87,N],[13,"Thread","","The dimensions are mapped within registers.",87,N],[13,"Global","","The dimensions are mapped, possibly using temporary…",87,N],[4,"Operand","","Represents an instruction operand.",N,N],[13,"Int","","An integer constant, on a given number of bits.",88,N],[13,"Float","","A float constant, on a given number of bits.",88,N],[13,"Inst","","A value produced by an instruction. The boolean indicates…",88,N],[13,"Index","","The current index in a loop.",88,N],[13,"Param","","A parameter of the function.",88,N],[13,"Addr","","The address of a memory block.",88,N],[13,"Reduce","","The value of the current instruction at a previous…",88,N],[13,"InductionVar","","A variable increased by a fixed amount at every step of…",88,N],[13,"Variable","","A variable, stored in register.",88,N],[4,"BinOp","","Represents binary arithmetic operators.",N,N],[13,"Add","","Adds two operands.",89,N],[13,"Sub","","Substracts two operands.",89,N],[13,"Div","","Divides two operands,",89,N],[13,"And","","Computes the bitwise AND operation.",89,N],[13,"Or","","Computes the bitwise OR operation.",89,N],[13,"Lt","","Computes `lhs < rhs`.",89,N],[13,"Leq","","Computes `lhs <= rhs`.",89,N],[13,"Equals","","Computes `lhs == rhs`.",89,N],[4,"Operator","","The operation performed by an instruction.",N,N],[13,"BinOp","","A binary arithmetic operator.",90,N],[13,"UnaryOp","","Unary arithmetic operator.",90,N],[13,"Mul","","Performs a multiplication with the given return type.",90,N],[13,"Mad","","Performs s multiplication between the first two operands…",90,N],[13,"Ld","","Loads a value of the given type from the given address.",90,N],[13,"St","","Stores the second operand at the address given by the…",90,N],[13,"TmpLd","","Represents a load from a temporary memory that is not…",90,N],[13,"TmpSt","","Represents a store to a temporary memory that is not fully…",90,N],[4,"UnaryOp","","Arithmetic operators with a single operand.",N,N],[13,"Mov","","Simply copy the input.",91,N],[13,"Cast","","Casts the input to another type.",91,N],[4,"StmtId","","Provides a unique identifer for a basic block.",N,N],[13,"Inst","","cbindgen:field-names=[id]",92,N],[13,"Dim","","cbindgen:field-names=[id]",92,N],[4,"Type","","Values and intructions types.",N,N],[13,"I","","Type for integer values, with a fixed number of bits.",93,N],[13,"F","","Type for floating point values, with a fixed number of bits.",93,N],[13,"PtrTo","","Pointer type of the given memory space.",93,N],[4,"MemoryLevel","","Indicates the slowest memory level where a variable may be…",N,N],[13,"RegisterNoSync","","The variable must be stored in registers and the producer…",94,N],[13,"Register","","The variable must be stored in registers.",94,N],[13,"FastMemory","","The variable must be stored in registers or a local, fast,…",94,N],[13,"SlowMemory","","The variable may be stored anywhere.",94,N],[4,"VarDef","","Specifies how is a `Variable` defined.",N,N],[13,"Inst","","Takes the variable produced by an instruction.",95,N],[13,"DimMap","","Takes point-to-point the values of a variable produced in…",95,N],[13,"Last","","Takes the last value of a variable in a loop nest.",95,N],[11,"is_consecutive","","Indicates if memory accesses access to consecutive…",83,[[["self"],["dimid"],["type"]],["bool"]]],[11,"mem_block","","Returns the id of the memory block accessed.",83,[[["self"]],["option",["memid"]]]],[11,"check","","Ensure the access pattern is valid for an instruction…",83,[[["self"],["hashset"]],["result",["error"]]]],[11,"pointer_type","","Returns the type of pointer to use for the access.",83,[[["self"],["device"]],["type"]]],[11,"new","","Create a new `DimMap`.",96,[[["it"]],["self"]]],[11,"empty","","Returns an empty `DimMap`.",96,[[],["self"]]],[11,"merge_dims","","Renames a basic block into an other. Indicates if some…",96,[[["self"],["dimid"],["dimid"]],["bool"]]],[11,"iter","","Iterates over the DimMap.",96,[[["self"]],["iter"]]],[11,"filter","","Filters the DimMap.",96,[[["self"],["f"]],["filterlist"]]],[11,"is_empty","","Returns true if the `DimMap` is empty.",96,[[["self"]],["bool"]]],[11,"freeze","","Sets the dimension as frozen.",97,[[["self"]],["dimension"]]],[11,"new","","Creates a new dimension.",97,[[["dimid"],["partialsize"],["option",["logicaldimid"]]],["result",["error"]]]],[11,"new_static","","Creates a dimension with a statically known size, picked…",97,[[["dimid"],["vecset",["u32"]],["option",["logicaldimid"]]],["result",["error"]]]],[11,"with_same_size","","Creates a new dimension with the same size as an existing…",97,[[["dimid"],["self"]],["self"]]],[11,"size","","Retruns the size of the dimension.",97,[[["self"]],["partialsize"]]],[11,"possible_sizes","","Returns the values the size can take, if it is statically…",97,[[["self"]],["option"]]],[11,"id","","Returns the id of the dimension.",97,[[["self"]],["dimid"]]],[11,"iterated","","Returns the constructs iterated along this dimension.",97,N],[11,"add_iterated","","Adds a stmt that is iterated along self.",97,[[["self"],["instid"]]]],[11,"is_thread_dim","","Indicates if the dimension is a thread dimension.",97,[[["self"]],["bool"]]],[11,"set_thread_dim","","Sets the dimension as a thread dimension.",97,[[["self"]]]],[11,"logical_dim","","Returns the logical dimension this dimension is part of,…",97,[[["self"]],["option",["logicaldimid"]]]],[11,"dim_mappings","","Returns the list of dimensions mapping containing this one.",97,[[["self"]],["vecset"]]],[11,"register_dim_mapping","","Register a dimension mapping.",97,[[["self"],["dimmapping"]]]],[11,"inner_vars","","Returns the list of variables available inside the…",97,[[["self"]],["vecset"]]],[11,"register_inner_var","","Register a variable available inside the dimension.",97,[[["self"],["varid"]]]],[11,"set_sequential","","Indicates the dimension cannot be parallelized.",97,[[["self"]]]],[11,"is_parallelizable","","Indicates if the dimension can be parallelized.",97,[[["self"]],["bool"]]],[11,"new_static","","Creates a new logical dimension, composed only of static…",98,[[["logicaldimid"],["vec",["dimid"]],["u32"]],["self"]]],[11,"new_dynamic","","Creates a new logical dimension, composed of static…",98,[[["logicaldimid"],["dimid"],["vec",["dimid"]],["vecset",["u32"]],["size"]],["self"]]],[11,"id","","Returns a unique identifier for the logic dimension.",98,[[["self"]],["logicaldimid"]]],[11,"tile_dimensions","","Returns the tiling dimensions, i.e. the dimensions with a…",98,N],[11,"tiled_dimension","","Return the tiled dimensions, i.e. the dimension with a…",98,[[["self"]],["option",["dimid"]]]],[11,"possible_tilings","","Returns the possible tiling factors.",98,N],[11,"dimensions","","Returns all the dimensions constituing the logical…",98,N],[11,"total_size","","Returns the size of the logical dimension, i.e. the…",98,[[["self"]],["size"]]],[11,"new","","Creates a `DimMapping`. Panics if the provided dimensions…",99,N],[11,"id","","Returns the unique identifier of the `DimMapping`.",99,[[["self"]],["dimmappingid"]]],[11,"dims","","Returns the mapped dims.",99,N],[11,"users","","Returns the variables that rely on this mapping.",99,[[["self"]],["vecset"]]],[11,"register_user","","Registers that a variable uses this mapping.",99,[[["self"],["varid"]]]],[11,"check_equals","","Ensures a type is equal to the expected one.",86,[[["type"],["type"]],["result"]]],[11,"check_integer","","Ensures the given type is an integer type.",86,[[["type"]],["result"]]],[11,"check_float","","Ensures the given type is a floating point type.",86,[[["type"]],["result"]]],[11,"new","","Creates a new signature without any parameter.",76,[[["string"]],["self"]]],[11,"add_scalar","","Adds a scalar parameter.",76,[[["self"],["string"],["type"]]]],[11,"add_array","","Adds a parameter with the given name and type to the…",76,[[["self"],["device"],["string"],["type"]]]],[11,"new","","Creates a new function.",100,[[["signature"],["device"]],["self"]]],[11,"signature","","Returns the function signature.",100,[[["self"]],["signature"]]],[11,"device","","Returns the device the function is compiled for.",100,[[["self"]],["device"]]],[11,"add_ind_var","","Adds an induction variable.",100,[[["self"],["inductionvar"]],["indvarid"]]],[11,"insts","","Returns the list of instructions of the function.",100,N],[11,"dims","","Returns the list of dimensions of the function.",100,N],[11,"logical_dims","","Returns the list of logical dimensions.",100,N],[11,"static_dims","","Returns the list of stastic dimensions in the function.",100,N],[11,"variables","","",100,N],[11,"thread_dims","","Returns the list of thread dimensions.",100,N],[11,"inst","","Returns an instruction given its id.",100,[[["self"],["instid"]],["instruction"]]],[11,"dim","","Retuns a dimension given its id.",100,[[["self"],["dimid"]],["dimension"]]],[11,"statement","","Returns a `Statement` given its id.",100,[[["self"],["stmtid"]],["statement"]]],[11,"statements","","Lists all `Statement`s.",100,N],[11,"logical_dim","","Retrives a logical dimension given its ID.",100,[[["self"],["logicaldimid"]],["logicaldim"]]],[11,"variable","","Returns a `Variable` given its id.",100,[[["self"],["varid"]],["variable"]]],[11,"add_variable","","Adds a variable to the function. Also register its…",100,[[["self"],["vardef"]],["result",["varid","error"]]]],[11,"mem_blocks","","Returns the list of memory blocks. The block with id `i`…",100,N],[11,"mem_insts","","Iterates over memory instructions.",100,N],[11,"mem_block","","Returns a memory block given its id.",100,[[["self"],["memid"]],["block"]]],[11,"induction_var","","Retrieves an induction variable given its Id.",100,[[["self"],["indvarid"]],["inductionvar"]]],[11,"induction_vars","","Iterates over induction variables.",100,N],[11,"set_iteration_dim","","Sets a dimension as an iteration dimension for an…",100,[[["self"],["instid"],["dimid"]],["bool"]]],[11,"add_thread_dim","","Adds a thread dimension. Indicates if the the dimension…",100,[[["self"],["dimid"]],["bool"]]],[11,"dim_mappings","","Returns the list of dimensions mapping.",100,N],[11,"dim_mapping","","Retrives a dimension mapping given its ID.",100,[[["self"],["dimmappingid"]],["dimmapping"]]],[11,"find_mapping","","Tries to find a mapping between two dimensions.",100,[[["self"],["dimid"],["dimid"]],["option",["dimmappingid"]]]],[11,"add_inst","","Adds an instruction to the function.",100,[[["self"],["operator"],["hashset",["dimid"]]],["result",["instid","error"]]]],[11,"add_mem_block","","Allocates a new memory block.",100,[[["self"],["u32"]],["memid"]]],[11,"add_logical_dim","","Create a new logical dimension composed of multiple…",100,[[["self"],["size"],["vecset",["u32"]],["vec",["vecset"]]],["result",["error"]]]],[11,"map_dimensions","","Specifies two dimensions must have the same size have can…",100,N],[11,"new","","Creates a new induction var. Size represents the increment…",101,[[["vec"],["operand"]],["result",["error"]]]],[11,"merge_dims","","Renames a dimension.",101,[[["self"],["dimid"],["dimid"]]]],[11,"base","","Returns the base operand of the induction variable.",101,[[["self"]],["operand"]]],[11,"dims","","Returns the list of induction dimensions along with the…",101,N],[11,"freeze","","",101,[[["self"],["counter"]],["inductionvar"]]],[11,"new","","Creates a new instruction and type-check the operands.",102,[[["operator"],["instid"],["hashset",["dimid"]],["function"]],["result",["error"]]]],[11,"operands","","Returns an iterator over the operands of this instruction.",102,[[["self"]],["vec",["operand"]]]],[11,"t","","Returns the type of the variable produced by an instruction.",102,[[["self"]],["option",["type"]]]],[11,"operator","","Returns the operator of the instruction.",102,[[["self"]],["operator"]]],[11,"id","","Returns the `InstId` representing the instruction.",102,[[["self"]],["instid"]]],[11,"has_side_effects","","Returns true if the instruction has side effects.",102,[[["self"]],["bool"]]],[11,"lower_layout","","Applies the lowering of a layout to the instruction.",102,[[["self"],["operand"],["accesspattern"],["operand"],["accesspattern"]]]],[11,"dim_maps_to_lower","","Indicates the operands for wich a `DimMap` must be lowered…",102,[[["self"],["dimid"],["dimid"]],["vec",["usize"]]]],[11,"as_mem_inst","","Returns 'self' if it is a memory instruction.",102,[[["self"]],["option",["instruction"]]]],[11,"as_reduction","","Indicates if the instruction performs a reduction.",102,[[["self"]],["option"]]],[11,"is_reduction_common_dim","","Returns 'true' if `self` is a reduction initialized by…",102,[[["self"],["instid"],["dimid"]],["bool"]]],[11,"merge_dims","","Rename a dimension to another ID.",102,[[["self"],["dimid"],["dimid"]]]],[11,"iteration_dims","","The list of dimensions the instruction must be nested in.",102,[[["self"]],["hashset"]]],[11,"add_iteration_dimension","","Adds a new iteration dimension. Indicates if the dimension…",102,[[["self"],["dimid"]],["bool"]]],[11,"result_variable","","Returns the `Variable` holding the result of this…",102,[[["self"]],["option",["varid"]]]],[11,"set_result_variable","","Sets the `Variable` holdings the result of this instruction.",102,[[["self"],["varid"]]]],[11,"freeze","","",102,[[["self"],["counter"]],["instruction"]]],[11,"lower_dim_map","","Lowers the `DimMap` of an operand into an access to a…",102,[[["self"],["usize"],["instid"],["dimmap"]]]],[11,"for_dim_map","","Creates a new lowering map from an existing dimension map…",103,[[["dimmap"],["counter"]],["loweringmap"]]],[11,"t","","Returns the type of the `Operand`.",88,[[["self"]],["type"]]],[11,"new_inst","","Create an operand from an instruction.",88,[[["instruction"],["dimmap"],["dimmapscope"]],["self"]]],[11,"new_reduce","","Creates a reduce operand from an instruction and a set of…",88,[[["instruction"],["dimmap"],["vec",["dimid"]]],["self"]]],[11,"new_int","","Creates a new Int operand and checks its number of bits.",88,[[["bigint"],["u16"]],["self"]]],[11,"new_float","","Creates a new Float operand.",88,[[["ratio",["bigint"]],["u16"]],["self"]]],[11,"merge_dims","","Renames a basic block id.",88,[[["self"],["dimid"],["dimid"]]]],[11,"should_lower_map","","Indicates if a `DimMap` should be lowered if lhs and rhs…",88,[[["self"],["dimid"],["dimid"]],["bool"]]],[11,"as_reduction","","If the operand is a reduction, returns the instruction…",88,[[["self"]],["option"]]],[11,"is_constant","","Indicates if the operand stays constant during the…",88,[[["self"]],["bool"]]],[11,"mapped_dims","","Returns the list of dimensions mapped together by the…",88,[[["self"]],["option",["dimmap"]]]],[11,"freeze","","",88,[[["self"],["counter"]],["operand"]]],[11,"t","","Returns the type of the binay operator given the type of…",89,[[["self"],["type"]],["type"]]],[11,"check","","Ensures the types of the operands are valid.",90,[[["self"],["hashset"],["function"]],["result",["error"]]]],[11,"t","","Returns the type of the value produced.",90,[[["self"]],["option",["type"]]]],[11,"operands","","Retruns the list of operands.",90,[[["self"]],["vec",["operand"]]]],[11,"operands_mut","","Retruns the list of mutable references to operands.",90,[[["self"]],["vec",["operand"]]]],[11,"has_side_effects","","Returns true if the operator has side effects.",90,[[["self"]],["bool"]]],[11,"is_mem_access","","Indicates if the operator accesses memory.",90,[[["self"]],["bool"]]],[11,"merge_dims","","Renames a basic block.",90,[[["self"],["dimid"],["dimid"]]]],[11,"mem_access_pattern","","Returns the pattern of access to the memory by the…",90,[[["self"]],["option",["cow"]]]],[11,"mem_used","","Returns the memory blocks referenced by the instruction.",90,[[["self"]],["option",["memid"]]]],[11,"map_operands","","",90,[[["self"],["f"]],["operator"]]],[11,"freeze","","",90,[[["self"],["counter"]],["operator"]]],[11,"new","","Create a new fully specified size.",104,[[["u32"],["vec",["parameter"]],["u32"]],["self"]]],[11,"new_const","","Creates a new constant size.",104,[[["u32"]],["self"]]],[11,"new_param","","Creates a new size equal to a parameter.",104,[[["parameter"],["u32"]],["size"]]],[11,"as_constant","","Returns the size if it is a constant.",104,[[["self"]],["option",["u32"]]]],[11,"max","","Returns the maximum value the size can take.",104,[[["self"]],["u32"]]],[11,"new","","Creates a new 'PartialSize'.",105,[[["u32"],["vec",["parameter"]]],["self"]]],[11,"new_dim_size","","Creates a new `PartialSize` equals to the size of a…",105,[[["dimid"]],["self"]]],[11,"add_divisors","","Add divisors to the size.",105,[[["self"],["vecset"]]]],[11,"as_int","","Returns the size of a dimension if it is staticaly known.",105,[[["self"]],["option",["u32"]]]],[11,"factors","","Returns the factors composing the size.",105,N],[11,"divisors","","Returns the divisors composing the size.",105,N],[11,"is_integer","","Returns true if the type is an integer.",93,[[["self"]],["bool"]]],[11,"is_float","","Returns true if the type is a float.",93,[[["self"]],["bool"]]],[11,"len_byte","","Returns the number of bytes of the type.",93,[[["self"]],["option",["u32"]]]],[11,"new","","Creates a new variable with the given Id.",106,[[["varid"],["vardef"],["function"]],["self"]]],[11,"id","","Return the unique identifiers of the `Variable`.",106,[[["self"]],["varid"]]],[11,"def","","Specifies how the variable is defined.",106,[[["self"]],["vardef"]]],[11,"t","","Indicates the type of the variable.",106,[[["self"]],["type"]]],[11,"def_points","","Indicates the statements that define the variable.",106,N],[11,"use_points","","Indicates the statements that uses the variable.",106,N],[11,"dimensions","","Returns the dimensions along which the variable can vary.",106,[[["self"]],["vecset"]]],[11,"add_use","","Registers that the variable is used by a statement.",106,[[["self"],["stmtid"]]]],[11,"register","","Registers the variable in the structures it references in…",106,[[["self"],["function"]]]],[11,"max_memory_level","","Indicates where the variable can be stored.",106,[[["self"]],["memorylevel"]]],[11,"t","","Returns the type of the variable if used on the context of…",95,[[["self"],["function"]],["type"]]],[11,"check","","Ensures the definition is valid.",95,[[["self"],["function"]],["result",["typeerror"]]]],[11,"def_points","","Indicates in which statment the variable is defined.",95,[[["self"],["function"]],["vecset",["stmtid"]]]],[11,"dimensions","","Returns the dimensions on which the variable can take…",95,[[["self"],["function"]],["vecset",["dimid"]]]],[11,"mapped_dims","","Lists the point-to-point communications implied by this…",95,N],[11,"production_inst","","Returns the instruction that produce this value and the…",95,N],[0,"mem","","A module for handling accesses to the device memory.",N,N],[3,"MemId","telamon::ir::mem","Uniquely identifies a block.",N,N],[12,"0","","",107,N],[3,"Block","","A block of memory allocated on the device by the kernel.",N,N],[3,"BlockMap","","Holds the blocks of memory to allocate on the device.",N,N],[11,"mem_id","","The ID of the block.",108,[[["self"]],["memid"]]],[11,"maps_dims","","Indicates if two dimensions are mapped by a temporary…",108,[[["self"],["dimid"],["dimid"]],["bool"]]],[11,"mapped_dims","","Returns the list of mapped dimensions.",108,N],[11,"is_private","","Indicates if the block is privatised per block of thread.",108,[[["self"]],["bool"]]],[11,"base_size","","Return the base size of the block, if it is statically…",108,[[["self"]],["u32"]]],[11,"uses","","The list of instructions referencing the memory block.",108,N],[11,"add_use","","Add a use to the block.",108,[[["self"],["instid"]]]],[11,"num_blocks","","",109,[[["self"]],["usize"]]],[11,"alloc_block","","Allocates a new `Block` with the given type and sizes.…",109,[[["self"],["u32"],["option",["dimmap"]]],["memid"]]],[11,"expand_blocks_to","","",109,[[["self"],["usize"]]]],[11,"set_lazy_tmp","","Inserts a new temporary memory. Must be inserted before…",109,[[["self"],["memid"],["type"],["it"]]]],[11,"register_use","","Registers a use of a memory block by an instruction.",109,[[["self"],["memid"],["instid"]]]],[11,"block","","Returns a block given its Id.",109,[[["self"],["memid"]],["block"]]],[11,"blocks","","Returns the list of memory blocks.",109,N],[11,"merge_dims","","Rename a basic block. Returns the lyaouts to lower.",109,[[["self"],["dimid"],["dimid"]],["vec",["memid"]]]],[11,"not_merged","","Registers that two dimensions may not be merged. Returns a…",109,[[["self"],["dimension"],["dimid"]],["vec",["memid"]]]],[11,"lower_layout","","Lowers a fully defined layout. Returns the mapping of…",109,[[["self"],["memid"]],["vec"]]],[0,"dim","telamon::ir","Defines iteration dimensions properties.",N,N],[3,"Map","telamon::ir::dim","Represents a mapping between dimenions.",N,N],[0,"op","telamon::ir","Defines operators.",N,N],[4,"BinOp","telamon::ir::op","Represents binary arithmetic operators.",N,N],[13,"Add","","Adds two operands.",89,N],[13,"Sub","","Substracts two operands.",89,N],[13,"Div","","Divides two operands,",89,N],[13,"And","","Computes the bitwise AND operation.",89,N],[13,"Or","","Computes the bitwise OR operation.",89,N],[13,"Lt","","Computes `lhs < rhs`.",89,N],[13,"Leq","","Computes `lhs <= rhs`.",89,N],[13,"Equals","","Computes `lhs == rhs`.",89,N],[4,"Rounding","","The rounding mode of an arithmetic operation.",N,N],[13,"Exact","","No rounding occurs.",110,N],[13,"Nearest","","Rounds toward the nearest number.",110,N],[13,"Zero","","Rounds toward zero.",110,N],[13,"Positive","","Rounds toward positive infinite.",110,N],[13,"Negative","","Rounds toward negative infinite.",110,N],[0,"prelude","telamon::ir","Defines traits to import in the environment to use the IR.",N,N],[8,"Statement","telamon::ir::prelude","Represents a basic block in an Exhaust function.",N,N],[10,"stmt_id","","Returns the unique identifier of the `Statement`.",111,[[["self"]],["stmtid"]]],[11,"as_inst","","Returns 'self' if it is an instruction.",111,[[["self"]],["option",["instruction"]]]],[11,"as_dim","","Returns 'self' if it is a dimension",111,[[["self"]],["option",["dimension"]]]],[10,"defined_vars","","Lists the variables defined at this statement.",111,[[["self"]],["vecset"]]],[10,"used_vars","","Lists the variables defined used at this statement.",111,[[["self"]],["vecset"]]],[10,"register_defined_var","","Registers a variable use in this statement.",111,[[["self"],["varid"]]]],[8,"Statement","telamon::ir","Represents a basic block in an Exhaust function.",N,N],[10,"stmt_id","","Returns the unique identifier of the `Statement`.",111,[[["self"]],["stmtid"]]],[11,"as_inst","telamon::ir::prelude","Returns 'self' if it is an instruction.",111,[[["self"]],["option",["instruction"]]]],[11,"as_dim","","Returns 'self' if it is a dimension",111,[[["self"]],["option",["dimension"]]]],[10,"defined_vars","telamon::ir","Lists the variables defined at this statement.",111,[[["self"]],["vecset"]]],[10,"used_vars","","Lists the variables defined used at this statement.",111,[[["self"]],["vecset"]]],[10,"register_defined_var","","Registers a variable use in this statement.",111,[[["self"],["varid"]]]],[11,"add_instruction","","Registers a new instruction.",80,[[["self"],["instruction"]]]],[11,"add_dimension","","Registers a new dimension.",80,[[["self"],["dimension"]]]],[11,"add_stmt","","Registers a new statement",80,[[["self"],["statement"]]]],[11,"add_iteration_dim","","Sets a dimension as a new iteration dimension.",80,[[["self"],["instid"],["dimid"]]]],[11,"add_thread_dim","","Sets a dimension as a new thread dimension.",80,[[["self"],["dimid"]]]],[11,"add_mem_block","","Registers a new memory block.",80,[[["self"],["memid"]]]],[11,"add_dim_mapping","","Adds a mapping between dimensions.",80,[[["self"],["dimmapping"],["function"]]]],[11,"add_variable","","",80,[[["self"],["variable"]]]],[11,"register_new_objs","","Adds the objects created by the lowering to the list of…",81,[[["self"],["function"],["newobjs"]]]],[11,"mem_dimensions","","Returns the dimensions of the memory layout to create. For…",81,N],[11,"store_dims","","Returns the dimensions that store the variable.",81,N],[11,"load_dims","","Returns the dimensions that load the variable.",81,N],[11,"next_mem","","",82,[[["self"]],["memid"]]],[11,"next_inst","","",82,[[["self"]],["instid"]]],[11,"next_dim","","",82,[[["self"]],["dimid"]]],[11,"next_dim_mapping","","",82,[[["self"]],["dimmappingid"]]],[0,"model","telamon","Building Blocks for lower bound performance models.",N,N],[3,"HwPressure","telamon::model","The pressure on the hardware induced by a computation.",N,N],[3,"Nesting","","Nesting of an object.",N,N],[12,"inner_dims","","Dimensions nested inside the current Stmt.",112,N],[12,"inner_stmts","","Basic blocks nested inside the current Stmt.",112,N],[12,"outer_dims","","Dimensions nested outsidethe current Stmt.",112,N],[12,"before_self","","Dimensions to be processed before the current Stmt.",112,N],[12,"after_self","","Dimensions that should not take the current Stmt into…",112,N],[12,"bigger_merged_dims","","The dimensions that can be merged to this one and have a…",112,N],[12,"num_unmapped_threads","","Number of threads that are not represented in the active…",112,N],[12,"max_threads_per_block","","Maximal number of threads this block can be in,…",112,N],[4,"BottleneckLevel","","The level at which a bottleneck is computed.",N,N],[13,"Global","","",113,N],[13,"Block","","",113,N],[13,"Thread","","",113,N],[5,"bound","","Returns a lower bound on the execution time of all the…",N,[[["searchspace"],["context"]],["bound"]]],[11,"accounts_for_dim","","Indicates if a dimension should be taken into account for…",113,[[["self"],["dimkind"]],["bool"]]],[11,"new","","Creates a new `Pressure`",114,[[["f64"],["vec",["f64"]]],["self"]]],[11,"zero","","Creates a null `Pressure` for the given device.",114,[[["device"]],["self"]]],[11,"bound","","Derive a bound on the execution time from the pressure on…",114,[[["self"],["bottlenecklevel"],["hwpressure"]],["explainedbound",["rc"]]]],[11,"add_parallel","","Adds the pressure of another computation, performed in…",114,[[["self"],["hwpressure"]]]],[11,"add_sequential","","Adds the pressure of another computation, performed…",114,[[["self"],["hwpressure"]]]],[11,"repeat_parallel","","Computes the pressure obtained by duplicating this one in…",114,[[["self"],["f64"]]]],[11,"repeat_and_add_bottlenecks","","Adds the pressure of another computation, repeated in…",114,[[["self"],["f64"],["hwpressure"]]]],[11,"repeat_sequential","","Computes the pressure obtained by repeating this one…",114,[[["self"],["f64"]]]],[11,"minimize","","Take the minimum of `self` and `other` for each bottleneck.",114,[[["self"],["hwpressure"]]]],[11,"min","","Returns the pointwise minimum of a serie of `HwPressure`",114,[[["it"]],["option"]]],[11,"multiply","","Pointwise multiplication of the pressure on each resource.",114,[[["self"],["hwpressure"]]]],[0,"size","","Size evaluation and manipulation primitives.",N,N],[3,"Range","telamon::model::size","A span of values.",N,N],[12,"min","","",115,N],[12,"max","","",115,N],[3,"FactorRange","","A span of values, in term of factors. The actual value is…",N,N],[12,"gcd","","",116,N],[12,"lcm","","",116,N],[5,"bounds","","Bounds the values a size can take, in the given context.",N,[[["partialsize"],["searchspace"],["context"]],["range"]]],[5,"dim_bounds","","Returns the `Range` a static dimension size can take.",N,[[["dimid"],["searchspace"]],["range"]]],[5,"factors","","Returns a factor and a multiple of `size`.",N,[[["partialsize"],["searchspace"],["context"]],["factorrange"]]],[5,"dim_factors","","Returns the `FactorRane` a static dimension size can take.",N,[[["dimid"],["searchspace"]],["factorrange"]]],[18,"ZERO","","",115,N],[18,"ONE","","",115,N],[11,"new_fixed","","Creates a `Range` containing a single value.",115,[[["u64"]],["self"]]],[11,"is_constrained","","Indicates if the `Range` contains a single value.",115,[[["self"]],["bool"]]],[18,"ZERO","","",116,N],[11,"new_fixed","","Create a `FactorRange` containing a single point.",116,[[["u64"]],["self"]]],[6,"Bound","telamon::model","A lower bound on the execution time, with a detailed…",N,N],[0,"search_space","telamon","Search space datastructures and constraint propagation.",N,N],[3,"Bool","telamon::search_space","",N,N],[3,"DimKind","","Specifies how iteration dimensions are implemented.",N,N],[3,"DomainStore","","Stores the domains of each variable.",N,N],[3,"InstFlag","","Specifies the version of an instruction to use.",N,N],[3,"MemSpace","","Indicates where a memory block is located.",N,N],[3,"Order","","Defines how two statements are ordered.",N,N],[3,"ThreadMapping","","Indicates how are thread dimensions mapped on the GPU.",N,N],[3,"SearchSpace","","A partially specified implementation.",N,N],[4,"Action","","A decision to apply to the domain.",N,N],[13,"InstFlag","","cbindgen:field-names=[inst, domain]",117,N],[13,"Size","","cbindgen:field-names=[dim, domain]",117,N],[13,"IsThreadDim","","cbindgen:field-names=[dim, domain]",117,N],[13,"ThreadMapping","","cbindgen:field-names=[lhs, rhs, domain]",117,N],[13,"IsIterationDim","","cbindgen:field-names=[inst, dim, domain]",117,N],[13,"MemorySpace","","cbindgen:field-names=[var, domain]",117,N],[13,"MemSpace","","cbindgen:field-names=[mem, domain]",117,N],[13,"DimKind","","cbindgen:field-names=[dim, domain]",117,N],[13,"Order","","cbindgen:field-names=[lhs, rhs, domain]",117,N],[13,"DimMapping","","cbindgen:field-names=[lhs, rhs, domain]",117,N],[13,"IncrementTilingFactor","","cbindgen:field-names=[logical, dim, domain]",117,N],[13,"TilingFactor","","cbindgen:field-names=[logical, domain]",117,N],[13,"IsThreadDimClassCounter","","cbindgen:field-names=[dim, domain]",117,N],[13,"NumThreads","","cbindgen:field-names=[domain]",117,N],[13,"NumThreadDims","","cbindgen:field-names=[domain]",117,N],[13,"IsIterationDimClassCounter","","cbindgen:field-names=[inst, dim, domain]",117,N],[13,"IncrementMemSize","","cbindgen:field-names=[mem, lhs, rhs, domain]",117,N],[13,"MemSize","","cbindgen:field-names=[mem, domain]",117,N],[13,"SharedMemUsed","","cbindgen:field-names=[domain]",117,N],[13,"IncrementUnrollFactor","","cbindgen:field-names=[inst, dim, domain]",117,N],[13,"UnrollFactor","","cbindgen:field-names=[inst, domain]",117,N],[13,"IncrementInnerVectorFactor","","cbindgen:field-names=[inst, dim, domain]",117,N],[13,"InnerVectorFactor","","cbindgen:field-names=[inst, domain]",117,N],[13,"IncrementOuterVectorFactor","","cbindgen:field-names=[inst, dim, domain]",117,N],[13,"OuterVectorFactor","","cbindgen:field-names=[inst, domain]",117,N],[13,"IncrementNumBlockDims","","cbindgen:field-names=[inst, dim, domain]",117,N],[13,"NumBlockDims","","cbindgen:field-names=[inst, domain]",117,N],[13,"NumNestedInst","","cbindgen:field-names=[dim, domain]",117,N],[4,"Choice","","",N,N],[13,"InstFlag","","cbindgen:field-names=[inst, domain]",118,N],[13,"Size","","cbindgen:field-names=[dim, domain]",118,N],[13,"IsThreadDim","","cbindgen:field-names=[dim, domain]",118,N],[13,"ThreadMapping","","cbindgen:field-names=[lhs, rhs, domain]",118,N],[13,"IsIterationDim","","cbindgen:field-names=[inst, dim, domain]",118,N],[13,"MemorySpace","","cbindgen:field-names=[var, domain]",118,N],[13,"MemSpace","","cbindgen:field-names=[mem, domain]",118,N],[13,"DimKind","","cbindgen:field-names=[dim, domain]",118,N],[13,"Order","","cbindgen:field-names=[lhs, rhs, domain]",118,N],[13,"DimMapping","","cbindgen:field-names=[lhs, rhs, domain]",118,N],[13,"IncrementTilingFactor","","cbindgen:field-names=[logical, dim, domain]",118,N],[13,"TilingFactor","","cbindgen:field-names=[logical, domain]",118,N],[13,"IsThreadDimClassCounter","","cbindgen:field-names=[dim, domain]",118,N],[13,"NumThreads","","cbindgen:field-names=[domain]",118,N],[13,"NumThreadDims","","cbindgen:field-names=[domain]",118,N],[13,"IsIterationDimClassCounter","","cbindgen:field-names=[inst, dim, domain]",118,N],[13,"IncrementMemSize","","cbindgen:field-names=[mem, lhs, rhs, domain]",118,N],[13,"MemSize","","cbindgen:field-names=[mem, domain]",118,N],[13,"SharedMemUsed","","cbindgen:field-names=[domain]",118,N],[13,"IncrementUnrollFactor","","cbindgen:field-names=[inst, dim, domain]",118,N],[13,"UnrollFactor","","cbindgen:field-names=[inst, domain]",118,N],[13,"IncrementInnerVectorFactor","","cbindgen:field-names=[inst, dim, domain]",118,N],[13,"InnerVectorFactor","","cbindgen:field-names=[inst, domain]",118,N],[13,"IncrementOuterVectorFactor","","cbindgen:field-names=[inst, dim, domain]",118,N],[13,"OuterVectorFactor","","cbindgen:field-names=[inst, domain]",118,N],[13,"IncrementNumBlockDims","","cbindgen:field-names=[inst, dim, domain]",118,N],[13,"NumBlockDims","","cbindgen:field-names=[inst, domain]",118,N],[13,"NumNestedInst","","cbindgen:field-names=[dim, domain]",118,N],[5,"access_pattern_space","","Returns the memory space accessed by an access pattern.",N,[[["accesspattern"],["searchspace"]],["memspace"]]],[11,"new","","Creates a new domain store and allocates the variables for…",119,[[["function"]],["self"]]],[11,"alloc","","Allocates the choices when new objects are created.",119,[[["self"],["function"],["newobjs"]]]],[11,"get_inst_flag","","Returns the domain of {name} for the given arguments.",119,[[["self"],["instid"]],["instflag"]]],[11,"get_old_inst_flag","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["instid"],["domaindiff"]],["instflag"]]],[11,"set_inst_flag","","Sets the domain of {name} for the given arguments.",119,[[["self"],["instid"],["instflag"]]]],[11,"restrict_inst_flag","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["instid"],["instflag"],["domaindiff"]],["result"]]],[11,"get_size","","Returns the domain of {name} for the given arguments.",119,[[["self"],["dimid"]],["numericset"]]],[11,"get_old_size","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["dimid"],["domaindiff"]],["numericset"]]],[11,"set_size","","Sets the domain of {name} for the given arguments.",119,[[["self"],["dimid"],["numericset"]]]],[11,"restrict_size","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["dimid"],["numericset"],["domaindiff"]],["result"]]],[11,"get_is_thread_dim","","Returns the domain of {name} for the given arguments.",119,[[["self"],["dimid"]],["bool"]]],[11,"get_old_is_thread_dim","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["dimid"],["domaindiff"]],["bool"]]],[11,"set_is_thread_dim","","Sets the domain of {name} for the given arguments.",119,[[["self"],["dimid"],["bool"]]]],[11,"restrict_is_thread_dim","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["dimid"],["bool"],["domaindiff"]],["result"]]],[11,"get_thread_mapping","","Returns the domain of {name} for the given arguments.",119,[[["self"],["dimid"],["dimid"]],["threadmapping"]]],[11,"get_old_thread_mapping","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["dimid"],["dimid"],["domaindiff"]],["threadmapping"]]],[11,"set_thread_mapping","","Sets the domain of {name} for the given arguments.",119,[[["self"],["dimid"],["dimid"],["threadmapping"]]]],[11,"restrict_thread_mapping","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["dimid"],["dimid"],["threadmapping"],["domaindiff"]],["result"]]],[11,"get_is_iteration_dim","","Returns the domain of {name} for the given arguments.",119,[[["self"],["instid"],["dimid"]],["bool"]]],[11,"get_old_is_iteration_dim","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["instid"],["dimid"],["domaindiff"]],["bool"]]],[11,"set_is_iteration_dim","","Sets the domain of {name} for the given arguments.",119,[[["self"],["instid"],["dimid"],["bool"]]]],[11,"restrict_is_iteration_dim","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["instid"],["dimid"],["bool"],["domaindiff"]],["result"]]],[11,"get_memory_space","","Returns the domain of {name} for the given arguments.",119,[[["self"],["varid"]],["memoryspace"]]],[11,"get_old_memory_space","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["varid"],["domaindiff"]],["memoryspace"]]],[11,"set_memory_space","","Sets the domain of {name} for the given arguments.",119,[[["self"],["varid"],["memoryspace"]]]],[11,"restrict_memory_space","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["varid"],["memoryspace"],["domaindiff"]],["result"]]],[11,"get_mem_space","","Returns the domain of {name} for the given arguments.",119,[[["self"],["memid"]],["memspace"]]],[11,"get_old_mem_space","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["memid"],["domaindiff"]],["memspace"]]],[11,"set_mem_space","","Sets the domain of {name} for the given arguments.",119,[[["self"],["memid"],["memspace"]]]],[11,"restrict_mem_space","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["memid"],["memspace"],["domaindiff"]],["result"]]],[11,"get_dim_kind","","Returns the domain of {name} for the given arguments.",119,[[["self"],["dimid"]],["dimkind"]]],[11,"get_old_dim_kind","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["dimid"],["domaindiff"]],["dimkind"]]],[11,"set_dim_kind","","Sets the domain of {name} for the given arguments.",119,[[["self"],["dimid"],["dimkind"]]]],[11,"restrict_dim_kind","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["dimid"],["dimkind"],["domaindiff"]],["result"]]],[11,"get_order","","Returns the domain of {name} for the given arguments.",119,[[["self"],["stmtid"],["stmtid"]],["order"]]],[11,"get_old_order","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["stmtid"],["stmtid"],["domaindiff"]],["order"]]],[11,"set_order","","Sets the domain of {name} for the given arguments.",119,[[["self"],["stmtid"],["stmtid"],["order"]]]],[11,"restrict_order","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["stmtid"],["stmtid"],["order"],["domaindiff"]],["result"]]],[11,"get_dim_mapping","","Returns the domain of {name} for the given arguments.",119,[[["self"],["dimid"],["dimid"]],["dimmapping"]]],[11,"get_old_dim_mapping","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["dimid"],["dimid"],["domaindiff"]],["dimmapping"]]],[11,"set_dim_mapping","","Sets the domain of {name} for the given arguments.",119,[[["self"],["dimid"],["dimid"],["dimmapping"]]]],[11,"restrict_dim_mapping","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["dimid"],["dimid"],["dimmapping"],["domaindiff"]],["result"]]],[11,"get_increment_tiling_factor","","Returns the domain of {name} for the given arguments.",119,[[["self"],["logicaldimid"],["dimid"]],["bool"]]],[11,"get_old_increment_tiling_factor","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["logicaldimid"],["dimid"],["domaindiff"]],["bool"]]],[11,"set_increment_tiling_factor","","Sets the domain of {name} for the given arguments.",119,[[["self"],["logicaldimid"],["dimid"],["bool"]]]],[11,"restrict_increment_tiling_factor","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["logicaldimid"],["dimid"],["bool"],["domaindiff"]],["result"]]],[11,"get_tiling_factor","","Returns the domain of {name} for the given arguments.",119,[[["self"],["logicaldimid"]],["range"]]],[11,"get_old_tiling_factor","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["logicaldimid"],["domaindiff"]],["range"]]],[11,"set_tiling_factor","","Sets the domain of {name} for the given arguments.",119,[[["self"],["logicaldimid"],["range"]]]],[11,"restrict_tiling_factor","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["logicaldimid"],["range"],["domaindiff"]],["result"]]],[11,"get_is_thread_dim_class_counter","","Returns the domain of {name} for the given arguments.",119,[[["self"],["dimid"]],["range"]]],[11,"get_old_is_thread_dim_class_counter","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["dimid"],["domaindiff"]],["range"]]],[11,"set_is_thread_dim_class_counter","","Sets the domain of {name} for the given arguments.",119,[[["self"],["dimid"],["range"]]]],[11,"restrict_is_thread_dim_class_counter","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["dimid"],["range"],["domaindiff"]],["result"]]],[11,"get_num_threads","","Returns the domain of {name} for the given arguments.",119,[[["self"]],["halfrange"]]],[11,"get_old_num_threads","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["domaindiff"]],["halfrange"]]],[11,"set_num_threads","","Sets the domain of {name} for the given arguments.",119,[[["self"],["halfrange"]]]],[11,"restrict_num_threads","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["halfrange"],["domaindiff"]],["result"]]],[11,"get_num_thread_dims","","Returns the domain of {name} for the given arguments.",119,[[["self"]],["halfrange"]]],[11,"get_old_num_thread_dims","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["domaindiff"]],["halfrange"]]],[11,"set_num_thread_dims","","Sets the domain of {name} for the given arguments.",119,[[["self"],["halfrange"]]]],[11,"restrict_num_thread_dims","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["halfrange"],["domaindiff"]],["result"]]],[11,"get_is_iteration_dim_class_counter","","Returns the domain of {name} for the given arguments.",119,[[["self"],["instid"],["dimid"]],["range"]]],[11,"get_old_is_iteration_dim_class_counter","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["instid"],["dimid"],["domaindiff"]],["range"]]],[11,"set_is_iteration_dim_class_counter","","Sets the domain of {name} for the given arguments.",119,[[["self"],["instid"],["dimid"],["range"]]]],[11,"restrict_is_iteration_dim_class_counter","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["instid"],["dimid"],["range"],["domaindiff"]],["result"]]],[11,"get_increment_mem_size","","Returns the domain of {name} for the given arguments.",119,[[["self"],["memid"],["dimid"],["dimid"]],["bool"]]],[11,"get_old_increment_mem_size","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["memid"],["dimid"],["dimid"],["domaindiff"]],["bool"]]],[11,"set_increment_mem_size","","Sets the domain of {name} for the given arguments.",119,[[["self"],["memid"],["dimid"],["dimid"],["bool"]]]],[11,"restrict_increment_mem_size","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["memid"],["dimid"],["dimid"],["bool"],["domaindiff"]],["result"]]],[11,"get_mem_size","","Returns the domain of {name} for the given arguments.",119,[[["self"],["memid"]],["halfrange"]]],[11,"get_old_mem_size","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["memid"],["domaindiff"]],["halfrange"]]],[11,"set_mem_size","","Sets the domain of {name} for the given arguments.",119,[[["self"],["memid"],["halfrange"]]]],[11,"restrict_mem_size","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["memid"],["halfrange"],["domaindiff"]],["result"]]],[11,"get_shared_mem_used","","Returns the domain of {name} for the given arguments.",119,[[["self"]],["halfrange"]]],[11,"get_old_shared_mem_used","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["domaindiff"]],["halfrange"]]],[11,"set_shared_mem_used","","Sets the domain of {name} for the given arguments.",119,[[["self"],["halfrange"]]]],[11,"restrict_shared_mem_used","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["halfrange"],["domaindiff"]],["result"]]],[11,"get_increment_unroll_factor","","Returns the domain of {name} for the given arguments.",119,[[["self"],["instid"],["dimid"]],["bool"]]],[11,"get_old_increment_unroll_factor","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["instid"],["dimid"],["domaindiff"]],["bool"]]],[11,"set_increment_unroll_factor","","Sets the domain of {name} for the given arguments.",119,[[["self"],["instid"],["dimid"],["bool"]]]],[11,"restrict_increment_unroll_factor","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["instid"],["dimid"],["bool"],["domaindiff"]],["result"]]],[11,"get_unroll_factor","","Returns the domain of {name} for the given arguments.",119,[[["self"],["instid"]],["halfrange"]]],[11,"get_old_unroll_factor","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["instid"],["domaindiff"]],["halfrange"]]],[11,"set_unroll_factor","","Sets the domain of {name} for the given arguments.",119,[[["self"],["instid"],["halfrange"]]]],[11,"restrict_unroll_factor","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["instid"],["halfrange"],["domaindiff"]],["result"]]],[11,"get_increment_inner_vector_factor","","Returns the domain of {name} for the given arguments.",119,[[["self"],["instid"],["dimid"]],["bool"]]],[11,"get_old_increment_inner_vector_factor","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["instid"],["dimid"],["domaindiff"]],["bool"]]],[11,"set_increment_inner_vector_factor","","Sets the domain of {name} for the given arguments.",119,[[["self"],["instid"],["dimid"],["bool"]]]],[11,"restrict_increment_inner_vector_factor","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["instid"],["dimid"],["bool"],["domaindiff"]],["result"]]],[11,"get_inner_vector_factor","","Returns the domain of {name} for the given arguments.",119,[[["self"],["instid"]],["halfrange"]]],[11,"get_old_inner_vector_factor","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["instid"],["domaindiff"]],["halfrange"]]],[11,"set_inner_vector_factor","","Sets the domain of {name} for the given arguments.",119,[[["self"],["instid"],["halfrange"]]]],[11,"restrict_inner_vector_factor","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["instid"],["halfrange"],["domaindiff"]],["result"]]],[11,"get_increment_outer_vector_factor","","Returns the domain of {name} for the given arguments.",119,[[["self"],["instid"],["dimid"]],["bool"]]],[11,"get_old_increment_outer_vector_factor","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["instid"],["dimid"],["domaindiff"]],["bool"]]],[11,"set_increment_outer_vector_factor","","Sets the domain of {name} for the given arguments.",119,[[["self"],["instid"],["dimid"],["bool"]]]],[11,"restrict_increment_outer_vector_factor","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["instid"],["dimid"],["bool"],["domaindiff"]],["result"]]],[11,"get_outer_vector_factor","","Returns the domain of {name} for the given arguments.",119,[[["self"],["instid"]],["halfrange"]]],[11,"get_old_outer_vector_factor","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["instid"],["domaindiff"]],["halfrange"]]],[11,"set_outer_vector_factor","","Sets the domain of {name} for the given arguments.",119,[[["self"],["instid"],["halfrange"]]]],[11,"restrict_outer_vector_factor","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["instid"],["halfrange"],["domaindiff"]],["result"]]],[11,"get_increment_num_block_dims","","Returns the domain of {name} for the given arguments.",119,[[["self"],["instid"],["dimid"]],["bool"]]],[11,"get_old_increment_num_block_dims","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["instid"],["dimid"],["domaindiff"]],["bool"]]],[11,"set_increment_num_block_dims","","Sets the domain of {name} for the given arguments.",119,[[["self"],["instid"],["dimid"],["bool"]]]],[11,"restrict_increment_num_block_dims","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["instid"],["dimid"],["bool"],["domaindiff"]],["result"]]],[11,"get_num_block_dims","","Returns the domain of {name} for the given arguments.",119,[[["self"],["instid"]],["halfrange"]]],[11,"get_old_num_block_dims","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["instid"],["domaindiff"]],["halfrange"]]],[11,"set_num_block_dims","","Sets the domain of {name} for the given arguments.",119,[[["self"],["instid"],["halfrange"]]]],[11,"restrict_num_block_dims","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["instid"],["halfrange"],["domaindiff"]],["result"]]],[11,"get_num_nested_inst","","Returns the domain of {name} for the given arguments.",119,[[["self"],["dimid"]],["halfrange"]]],[11,"get_old_num_nested_inst","","Returns the domain of {name} for the given arguments. If…",119,[[["self"],["dimid"],["domaindiff"]],["halfrange"]]],[11,"set_num_nested_inst","","Sets the domain of {name} for the given arguments.",119,[[["self"],["dimid"],["halfrange"]]]],[11,"restrict_num_nested_inst","","Restricts the domain of {name} for the given arguments.…",119,[[["self"],["dimid"],["halfrange"],["domaindiff"]],["result"]]],[18,"TRUE","","",120,N],[18,"FALSE","","",120,N],[18,"ALL","","",120,N],[18,"FAILED","","Returns the empty domain.",120,N],[11,"all","","Returns the full domain.",120,[[],["self"]]],[11,"insert","","Insert values in the domain.",120,[[["self"],["self"]]]],[11,"list","","Lists the alternatives contained in the domain.",120,N],[11,"eq","","Indicates if two choices will have the same value.",120,[[["self"],["self"]],["bool"]]],[11,"neq","","Indicates if two choices cannot be equal.",120,[[["self"],["self"]],["bool"]]],[18,"NO_CACHE","","Don't use caches.",121,N],[18,"CACHE_GLOBAL","","Use a global cache, coherent between all threads.",121,N],[18,"CACHE_SHARED","","Use a cache only coherent between threads of the same block.",121,N],[18,"CACHE_READ_ONLY","","Use a read-only cache, not guaranteed to see any read.",121,N],[18,"COHERENT","","Ensure coherency between memory accesses.",121,N],[18,"BLOCK_COHERENT","","Ensure coherency within a block between memory accesses.",121,N],[18,"ALL","","",121,N],[18,"FAILED","","Returns the empty domain.",121,N],[11,"all","","Returns the full domain.",121,[[],["self"]]],[11,"insert","","Insert values in the domain.",121,[[["self"],["self"]]]],[11,"list","","Lists the alternatives contained in the domain.",121,N],[11,"eq","","Indicates if two choices will have the same value.",121,[[["self"],["self"]],["bool"]]],[11,"neq","","Indicates if two choices cannot be equal.",121,[[["self"],["self"]],["bool"]]],[18,"MAPPED_OUT","","The two dimensions are threads, but `lhs` is mapped to a…",122,N],[18,"MAPPED_IN","","The two dimensions are threads, but `lhs` is mapped to a…",122,N],[18,"NOT_THREADS","","One of the dimensions is a not thread.",122,N],[18,"MAPPED","","The two dimensions are threads mapped to the same…",122,N],[18,"ALL","","",122,N],[18,"FAILED","","Returns the empty domain.",122,N],[11,"all","","Returns the full domain.",122,[[],["self"]]],[11,"insert","","Insert values in the domain.",122,[[["self"],["self"]]]],[11,"list","","Lists the alternatives contained in the domain.",122,N],[11,"eq","","Indicates if two choices will have the same value.",122,[[["self"],["self"]],["bool"]]],[11,"neq","","Indicates if two choices cannot be equal.",122,[[["self"],["self"]],["bool"]]],[11,"inverse","","",122,[[["self"]],["self"]]],[18,"GLOBAL","","The block is in the device RAM.",123,N],[18,"SHARED","","The block is in the memory shared between the threads of a…",123,N],[18,"ALL","","",123,N],[18,"FAILED","","Returns the empty domain.",123,N],[11,"all","","Returns the full domain.",123,[[],["self"]]],[11,"insert","","Insert values in the domain.",123,[[["self"],["self"]]]],[11,"list","","Lists the alternatives contained in the domain.",123,N],[11,"eq","","Indicates if two choices will have the same value.",123,[[["self"],["self"]],["bool"]]],[11,"neq","","Indicates if two choices cannot be equal.",123,[[["self"],["self"]],["bool"]]],[18,"LOOP","","The dimension is implemented as a regular loop.",124,N],[18,"UNROLL","","The dimension is fully unrolled.",124,N],[18,"INNER_VECTOR","","The dimension is mapped to the inner vector dimension.",124,N],[18,"OUTER_VECTOR","","",124,N],[18,"BLOCK","","The dimension is mapped to a block dimension on the device.",124,N],[18,"THREAD","","The dimension is mapped to a thread dimension on the device.",124,N],[18,"VECTOR","","The dimension is implemented by vectorizing the…",124,N],[18,"PARALLEL","","The dimension is parallel.",124,N],[18,"SEQUENTIAL","","The dimension is sequential.",124,N],[18,"ALL","","",124,N],[18,"FAILED","","Returns the empty domain.",124,N],[11,"all","","Returns the full domain.",124,[[],["self"]]],[11,"insert","","Insert values in the domain.",124,[[["self"],["self"]]]],[11,"list","","Lists the alternatives contained in the domain.",124,N],[11,"eq","","Indicates if two choices will have the same value.",124,[[["self"],["self"]],["bool"]]],[11,"neq","","Indicates if two choices cannot be equal.",124,[[["self"],["self"]],["bool"]]],[18,"BEFORE","","$lhs is executed before $rhs.",125,N],[18,"AFTER","","$lhs is executed after $rhs.",125,N],[18,"INNER","","$lhs is nested inside $rhs.",125,N],[18,"OUTER","","$rhs is nested outside $rhs.",125,N],[18,"MERGED","","$lhs and $rhs are merged.",125,N],[18,"NESTED","","$lhs and $rhs are nested.",125,N],[18,"ORDERED","","$lhs and $rhs are sequentially ordered.",125,N],[18,"ALL","","",125,N],[18,"FAILED","","Returns the empty domain.",125,N],[11,"all","","Returns the full domain.",125,[[],["self"]]],[11,"insert","","Insert values in the domain.",125,[[["self"],["self"]]]],[11,"list","","Lists the alternatives contained in the domain.",125,N],[11,"eq","","Indicates if two choices will have the same value.",125,[[["self"],["self"]],["bool"]]],[11,"neq","","Indicates if two choices cannot be equal.",125,[[["self"],["self"]],["bool"]]],[11,"inverse","","",125,[[["self"]],["self"]]],[11,"complement","","Returns the action performing the complementary decision.",117,[[["self"],["function"]],["option"]]],[8,"Domain","","",N,N],[10,"is_failed","","Indicates if the domain is empty.",126,[[["self"]],["bool"]]],[10,"is_constrained","","Indicates if the domain contains a single alternative.",126,[[["self"]],["bool"]]],[10,"contains","","Indicates if the domain contains another.",126,[[["self"],["self"]],["bool"]]],[10,"restrict","","Restricts the domain to the intersection with `other`.",126,[[["self"],["self"]]]],[11,"intersects","","Indicates if the domain has an alternatve in common with…",126,[[["self"],["self"]],["bool"]]],[11,"is","","Indicates if the domain is equal to another domain.",126,[[["self"],["self"]],["trivalent"]]],[8,"NumSet","","A domain containing integers.",N,N],[16,"Universe","","",127,N],[10,"min","","Returns the maximum value in the domain.",127,N],[10,"max","","Returns the minimum value in the domain.",127,N],[11,"into_num_set","","Converts the domain into a numeric set with the given…",127,N],[11,"as_constrained","","Returns the value of the domain, if it is constrained.",127,N],[11,"lt","","",127,N],[11,"gt","","",127,N],[11,"leq","","",127,N],[11,"geq","","",127,N],[11,"eq","","",127,N],[11,"neq","","",127,N],[11,"new","","Creates a new `SearchSpace` for the given `ir_instance`.",128,[[["function"],["vec",["action"]]],["result"]]],[11,"ir_instance","","Returns the underlying ir instance.",128,[[["self"]],["function"]]],[11,"domain","","Returns the domain of choices.",128,[[["self"]],["domainstore"]]],[11,"domain_mut","","Allows rewritting the domain.",128,[[["self"]],["domainstore"]]],[11,"apply_decisions","","Applies a list of decisions to the domain and propagate…",128,[[["self"],["vec",["action"]]],["result"]]],[11,"lower_layout","","Triggers a layout lowering.",128,N],[11,"from","telamon::codegen","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"equivalent","","",13,[[["self"],["k"]],["bool"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"equivalent","","",3,[[["self"],["k"]],["bool"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"equivalent","","",4,[[["self"],["k"]],["bool"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"equivalent","","",5,[[["self"],["k"]],["bool"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"equivalent","","",7,[[["self"],["k"]],["bool"]]],[11,"from","telamon::helper","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"ids","","",27,[[["self"]],["box",["iterator"]]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"from","telamon::helper::tensor","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","telamon::device","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"equivalent","","",29,[[["self"],["k"]],["bool"]]],[11,"from","telamon::device::fake","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",129,[[["t"]],["t"]]],[11,"into","","",129,[[["self"]],["u"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"try_into","","",129,[[["self"]],["result"]]],[11,"get_type_id","","",129,[[["self"]],["typeid"]]],[11,"from","telamon::device::x86","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"to_string","telamon::explorer","",42,[[["self"]],["string"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"equivalent","","",42,[[["self"],["k"]],["bool"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"from","telamon::explorer::choice","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"equivalent","","",46,[[["self"],["k"]],["bool"]]],[11,"to_string","telamon::explorer::config","",47,[[["self"]],["string"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"to_string","","",130,[[["self"]],["string"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"into","","",130,[[["self"]],["u"]]],[11,"to_owned","","",130,[[["self"]],["t"]]],[11,"clone_into","","",130,N],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"try_into","","",130,[[["self"]],["result"]]],[11,"get_type_id","","",130,[[["self"]],["typeid"]]],[11,"as_fail","","",130,[[["self"]],["fail"]]],[11,"equivalent","","",130,[[["self"],["k"]],["bool"]]],[11,"to_string","","",131,[[["self"]],["string"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"into","","",131,[[["self"]],["u"]]],[11,"to_owned","","",131,[[["self"]],["t"]]],[11,"clone_into","","",131,N],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"try_into","","",131,[[["self"]],["result"]]],[11,"get_type_id","","",131,[[["self"]],["typeid"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,N],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"to_string","","",58,[[["self"]],["string"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"from","telamon::explorer::local_selection","",59,[[["t"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"to_string","telamon::explorer::mcts","",132,[[["self"]],["string"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"into","","",132,[[["self"]],["u"]]],[11,"to_owned","","",132,[[["self"]],["t"]]],[11,"clone_into","","",132,N],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"try_into","","",132,[[["self"]],["result"]]],[11,"get_type_id","","",132,[[["self"]],["typeid"]]],[11,"equivalent","","",132,[[["self"],["k"]],["bool"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,N],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"into","","",133,[[["self"]],["u"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"try_into","","",133,[[["self"]],["result"]]],[11,"get_type_id","","",133,[[["self"]],["typeid"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,N],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"into","","",134,[[["self"]],["u"]]],[11,"to_owned","","",134,[[["self"]],["t"]]],[11,"clone_into","","",134,N],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"try_into","","",134,[[["self"]],["result"]]],[11,"get_type_id","","",134,[[["self"]],["typeid"]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"into","","",135,[[["self"]],["u"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"try_into","","",135,[[["self"]],["result"]]],[11,"get_type_id","","",135,[[["self"]],["typeid"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"into","","",138,[[["self"]],["u"]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"try_into","","",138,[[["self"]],["result"]]],[11,"get_type_id","","",138,[[["self"]],["typeid"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"into","","",139,[[["self"]],["u"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"try_into","","",139,[[["self"]],["result"]]],[11,"get_type_id","","",139,[[["self"]],["typeid"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,N],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,N],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"into_iter","telamon::ir","",96,[[["self"]],["i"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into","","",96,[[["self"]],["u"]]],[11,"to_owned","","",96,[[["self"]],["t"]]],[11,"clone_into","","",96,N],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"try_into","","",96,[[["self"]],["result"]]],[11,"get_type_id","","",96,[[["self"]],["typeid"]]],[11,"ids","","",72,[[["self"]],["box",["iterator"]]]],[11,"to_string","","",72,[[["self"]],["string"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[["self"]],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,N],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"equivalent","","",72,[[["self"],["k"]],["bool"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[["self"]],["u"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,N],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"try_into","","",99,[[["self"]],["result"]]],[11,"get_type_id","","",99,[[["self"]],["typeid"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,N],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"equivalent","","",73,[[["self"],["k"]],["bool"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"into","","",97,[[["self"]],["u"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,N],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"try_into","","",97,[[["self"]],["result"]]],[11,"get_type_id","","",97,[[["self"]],["typeid"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"into","","",98,[[["self"]],["u"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,N],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"try_into","","",98,[[["self"]],["result"]]],[11,"get_type_id","","",98,[[["self"]],["typeid"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[["self"]],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,N],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"try_into","","",74,[[["self"]],["result"]]],[11,"get_type_id","","",74,[[["self"]],["typeid"]]],[11,"equivalent","","",74,[[["self"],["k"]],["bool"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"into","","",100,[[["self"]],["u"]]],[11,"to_owned","","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,N],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"try_into","","",100,[[["self"]],["result"]]],[11,"get_type_id","","",100,[[["self"]],["typeid"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[["self"]],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,N],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"try_into","","",75,[[["self"]],["result"]]],[11,"get_type_id","","",75,[[["self"]],["typeid"]]],[11,"equivalent","","",75,[[["self"],["k"]],["bool"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[["self"]],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,N],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"try_into","","",76,[[["self"]],["result"]]],[11,"get_type_id","","",76,[[["self"]],["typeid"]]],[11,"equivalent","","",76,[[["self"],["k"]],["bool"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[["self"]],["u"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,N],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"try_into","","",77,[[["self"]],["result"]]],[11,"get_type_id","","",77,[[["self"]],["typeid"]]],[11,"equivalent","","",77,[[["self"],["k"]],["bool"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"into","","",101,[[["self"]],["u"]]],[11,"to_owned","","",101,[[["self"]],["t"]]],[11,"clone_into","","",101,N],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"try_into","","",101,[[["self"]],["result"]]],[11,"get_type_id","","",101,[[["self"]],["typeid"]]],[11,"ids","","",78,[[["self"]],["box",["iterator"]]]],[11,"to_string","","",78,[[["self"]],["string"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[["self"]],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,N],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"try_into","","",78,[[["self"]],["result"]]],[11,"get_type_id","","",78,[[["self"]],["typeid"]]],[11,"equivalent","","",78,[[["self"],["k"]],["bool"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"into","","",102,[[["self"]],["u"]]],[11,"to_owned","","",102,[[["self"]],["t"]]],[11,"clone_into","","",102,N],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"try_into","","",102,[[["self"]],["result"]]],[11,"get_type_id","","",102,[[["self"]],["typeid"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"into","","",103,[[["self"]],["u"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,N],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"try_into","","",103,[[["self"]],["result"]]],[11,"get_type_id","","",103,[[["self"]],["typeid"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,N],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"equivalent","","",105,[[["self"],["k"]],["bool"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"to_owned","","",104,[[["self"]],["t"]]],[11,"clone_into","","",104,N],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"equivalent","","",104,[[["self"],["k"]],["bool"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[["self"]],["u"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,N],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"try_into","","",79,[[["self"]],["result"]]],[11,"get_type_id","","",79,[[["self"]],["typeid"]]],[11,"equivalent","","",79,[[["self"],["k"]],["bool"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"to_owned","","",106,[[["self"]],["t"]]],[11,"clone_into","","",106,N],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[["self"]],["u"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"try_into","","",81,[[["self"]],["result"]]],[11,"get_type_id","","",81,[[["self"]],["typeid"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[["self"]],["u"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"try_into","","",82,[[["self"]],["result"]]],[11,"get_type_id","","",82,[[["self"]],["typeid"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,N],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,N],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"equivalent","","",84,[[["self"],["k"]],["bool"]]],[11,"to_string","","",85,[[["self"]],["string"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[["self"]],["u"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"try_into","","",85,[[["self"]],["result"]]],[11,"get_type_id","","",85,[[["self"]],["typeid"]]],[11,"as_fail","","",85,[[["self"]],["fail"]]],[11,"to_string","","",86,[[["self"]],["string"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[["self"]],["u"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"try_into","","",86,[[["self"]],["result"]]],[11,"get_type_id","","",86,[[["self"]],["typeid"]]],[11,"as_fail","","",86,[[["self"]],["fail"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"into","","",87,[[["self"]],["u"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,N],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"try_into","","",87,[[["self"]],["result"]]],[11,"get_type_id","","",87,[[["self"]],["typeid"]]],[11,"equivalent","","",87,[[["self"],["k"]],["bool"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[["self"]],["u"]]],[11,"to_owned","","",88,[[["self"]],["t"]]],[11,"clone_into","","",88,N],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"try_into","","",88,[[["self"]],["result"]]],[11,"get_type_id","","",88,[[["self"]],["typeid"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[["self"]],["u"]]],[11,"to_owned","","",89,[[["self"]],["t"]]],[11,"clone_into","","",89,N],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"try_into","","",89,[[["self"]],["result"]]],[11,"get_type_id","","",89,[[["self"]],["typeid"]]],[11,"to_string","","",90,[[["self"]],["string"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[["self"]],["u"]]],[11,"to_owned","","",90,[[["self"]],["t"]]],[11,"clone_into","","",90,N],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"try_into","","",90,[[["self"]],["result"]]],[11,"get_type_id","","",90,[[["self"]],["typeid"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"into","","",91,[[["self"]],["u"]]],[11,"to_owned","","",91,[[["self"]],["t"]]],[11,"clone_into","","",91,N],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"try_into","","",91,[[["self"]],["result"]]],[11,"get_type_id","","",91,[[["self"]],["typeid"]]],[11,"ids","","",92,[[["self"]],["box",["iterator"]]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"into","","",92,[[["self"]],["u"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,N],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"try_into","","",92,[[["self"]],["result"]]],[11,"get_type_id","","",92,[[["self"]],["typeid"]]],[11,"equivalent","","",92,[[["self"],["k"]],["bool"]]],[11,"to_string","","",93,[[["self"]],["string"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"into","","",93,[[["self"]],["u"]]],[11,"to_owned","","",93,[[["self"]],["t"]]],[11,"clone_into","","",93,N],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"try_into","","",93,[[["self"]],["result"]]],[11,"get_type_id","","",93,[[["self"]],["typeid"]]],[11,"equivalent","","",93,[[["self"],["k"]],["bool"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"into","","",94,[[["self"]],["u"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,N],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"try_into","","",94,[[["self"]],["result"]]],[11,"get_type_id","","",94,[[["self"]],["typeid"]]],[11,"equivalent","","",94,[[["self"],["k"]],["bool"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[["self"]],["u"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,N],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"try_into","","",95,[[["self"]],["result"]]],[11,"get_type_id","","",95,[[["self"]],["typeid"]]],[11,"to_string","telamon::ir::op","",110,[[["self"]],["string"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"to_owned","","",110,[[["self"]],["t"]]],[11,"clone_into","","",110,N],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"equivalent","","",110,[[["self"],["k"]],["bool"]]],[11,"from","telamon::ir::mem","",107,[[["t"]],["t"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"to_owned","","",107,[[["self"]],["t"]]],[11,"clone_into","","",107,N],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"equivalent","","",107,[[["self"],["k"]],["bool"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"to_owned","","",108,[[["self"]],["t"]]],[11,"clone_into","","",108,N],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"to_owned","","",109,[[["self"]],["t"]]],[11,"clone_into","","",109,N],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"from","telamon::model","",114,[[["t"]],["t"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"to_owned","","",114,[[["self"]],["t"]]],[11,"clone_into","","",114,N],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"to_string","","",113,[[["self"]],["string"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,N],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"equivalent","","",113,[[["self"],["k"]],["bool"]]],[11,"from","telamon::model::size","",115,[[["t"]],["t"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"to_owned","","",115,[[["self"]],["t"]]],[11,"clone_into","","",115,N],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"to_owned","","",116,[[["self"]],["t"]]],[11,"clone_into","","",116,N],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"from","telamon::search_space","",120,[[["t"]],["t"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"to_owned","","",120,[[["self"]],["t"]]],[11,"clone_into","","",120,N],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"equivalent","","",120,[[["self"],["k"]],["bool"]]],[11,"from","","",124,[[["t"]],["t"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"to_owned","","",124,[[["self"]],["t"]]],[11,"clone_into","","",124,N],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"equivalent","","",124,[[["self"],["k"]],["bool"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"to_owned","","",119,[[["self"]],["t"]]],[11,"clone_into","","",119,N],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"to_owned","","",121,[[["self"]],["t"]]],[11,"clone_into","","",121,N],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"equivalent","","",121,[[["self"],["k"]],["bool"]]],[11,"from","","",123,[[["t"]],["t"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,N],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"equivalent","","",123,[[["self"],["k"]],["bool"]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,N],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"equivalent","","",125,[[["self"],["k"]],["bool"]]],[11,"from","","",122,[[["t"]],["t"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,N],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"equivalent","","",122,[[["self"],["k"]],["bool"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"into","","",128,[[["self"]],["u"]]],[11,"to_owned","","",128,[[["self"]],["t"]]],[11,"clone_into","","",128,N],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"try_into","","",128,[[["self"]],["result"]]],[11,"get_type_id","","",128,[[["self"]],["typeid"]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,N],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"equivalent","","",117,[[["self"],["k"]],["bool"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"to_owned","","",118,[[["self"]],["t"]]],[11,"clone_into","","",118,N],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"equivalent","","",118,[[["self"],["k"]],["bool"]]],[11,"get_int","telamon::device::x86","",33,[[["u32"]],["string"]]],[11,"print_binop","","",33,N],[11,"print_unary_op","","",33,N],[11,"print_mul","","",33,N],[11,"print_mad","","",33,N],[11,"print_ld","","",33,N],[11,"print_st","","",33,N],[11,"print_label","","",33,[[["self"],["str"]]]],[11,"print_cond_jump","","",33,[[["self"],["str"],["str"]]]],[11,"print_sync","","",33,[[["self"]]]],[11,"name_operand","","",33,N],[11,"name_inst","","",33,N],[11,"get","telamon::helper","",17,[[["self"],["builder"]],["operand"]]],[11,"get","telamon::ir","",88,[[["self"],["builder"]],["operand"]]],[11,"get","","",78,[[["self"],["builder"]],["operand"]]],[11,"get","","",79,[[["self"],["builder"]],["operand"]]],[11,"get","telamon::helper","",18,[[["self"],["builder"]],["operand"]]],[11,"get","telamon::ir::mem","",107,[[["self"],["builder"]],["operand"]]],[11,"get","telamon::helper","",27,[[["self"],["builder"]],["operand"]]],[11,"get","telamon::ir","",77,[[["self"],["builder"]],["operand"]]],[11,"ids","telamon::helper","",27,[[["self"]],["box",["iterator"]]]],[11,"read_i8","telamon::device::fake","",129,[[["self"]],["vec",["i8"]]]],[11,"write_i8","","",129,N],[11,"device","","",30,[[["self"]],["device"]]],[11,"evaluate","","",30,[[["self"],["function"],["evalmode"]],["result",["f64"]]]],[11,"benchmark","","",30,[[["self"],["function"],["usize"]],["vec",["f64"]]]],[11,"param_as_size","","",30,[[["self"],["str"]],["option",["u32"]]]],[11,"async_eval","","",30,[[["self"],["usize"],["evalmode"],["fn"]]]],[11,"device","telamon::device::x86","",32,[[["self"]],["device"]]],[11,"param_as_size","","",32,[[["self"],["str"]],["option",["u32"]]]],[11,"evaluate","","Evaluation in sequential mode",32,[[["self"],["function"],["evalmode"]],["result",["f64"]]]],[11,"benchmark","","returns a vec containing num_sample runs of…",32,[[["self"],["function"],["usize"]],["vec",["f64"]]]],[11,"async_eval","","",32,[[["self"],["usize"],["evalmode"],["fn"]]]],[11,"bind_erased_scalar","telamon::device::fake","",30,[[["self"],["parameter"],["box",["scalarargument"]]]]],[11,"bind_erased_array","","",30,[[["self"],["parameter"],["type"],["usize"]],["arc",["arrayargument"]]]],[11,"bind_erased_scalar","telamon::device::x86","",32,[[["self"],["parameter"],["box",["scalarargument"]]]]],[11,"bind_erased_array","","",32,[[["self"],["parameter"],["type"],["usize"]],["arc",["arrayargument"]]]],[11,"print","","",31,[[["self"],["function"],["write"]]]],[11,"check_type","","",31,[[["self"],["type"]],["result",["typeerror"]]]],[11,"max_block_dims","","",31,[[["self"]],["u32"]]],[11,"max_inner_block_size","","",31,[[["self"]],["u32"]]],[11,"max_threads","","",31,[[["self"]],["u32"]]],[11,"max_unrolling","","",31,[[["self"]],["u32"]]],[11,"can_vectorize","","",31,[[["self"],["dimension"],["operator"]],["bool"]]],[11,"max_vectorization","","",31,N],[11,"has_vector_registers","","",31,[[["self"]],["bool"]]],[11,"shared_mem","","",31,[[["self"]],["u32"]]],[11,"pointer_type","","",31,[[["self"],["memspace"]],["type"]]],[11,"supported_mem_flags","","",31,[[["self"],["operator"]],["instflag"]]],[11,"name","","",31,[[["self"]],["str"]]],[11,"add_block_overhead","","",31,[[["self"],["factorrange"],["factorrange"],["range"],["hwpressure"]]]],[11,"lower_type","","",31,[[["self"],["type"],["searchspace"]],["option",["type"]]]],[11,"hw_pressure","","",31,[[["self"],["searchspace"],["hashmap"],["hashmap"],["statement"],["context"]],["hwpressure"]]],[11,"loop_iter_pressure","","",31,N],[11,"thread_rates","","",31,[[["self"]],["hwpressure"]]],[11,"block_rates","","",31,[[["self"]],["hwpressure"]]],[11,"total_rates","","",31,[[["self"]],["hwpressure"]]],[11,"bottlenecks","","",31,N],[11,"block_parallelism","","",31,[[["self"],["searchspace"]],["u32"]]],[11,"additive_indvar_pressure","","",31,[[["self"],["type"]],["hwpressure"]]],[11,"multiplicative_indvar_pressure","","",31,[[["self"],["type"]],["hwpressure"]]],[11,"pick_child","telamon::explorer::config","",57,N],[11,"pick_child","telamon::explorer::mcts","",136,N],[11,"backpropagate","","",136,[[["self"],["node"],["usize"],["option",["f64"]]]]],[11,"pick_child","","",138,N],[11,"backpropagate","","",138,[[["self"],["node"],["usize"],["option",["f64"]]]]],[11,"stmt_id","telamon::ir","",97,[[["self"]],["stmtid"]]],[11,"as_dim","","",97,[[["self"]],["option",["dimension"]]]],[11,"defined_vars","","",97,[[["self"]],["vecset"]]],[11,"used_vars","","",97,[[["self"]],["vecset"]]],[11,"register_defined_var","","",97,[[["self"],["varid"]]]],[11,"stmt_id","","",102,[[["self"]],["stmtid"]]],[11,"defined_vars","","",102,[[["self"]],["vecset"]]],[11,"as_inst","","",102,[[["self"]],["option",["instruction"]]]],[11,"used_vars","","",102,[[["self"]],["vecset"]]],[11,"register_defined_var","","",102,[[["self"],["varid"]]]],[11,"is_failed","telamon::search_space","",120,[[["self"]],["bool"]]],[11,"is_constrained","","",120,[[["self"]],["bool"]]],[11,"contains","","",120,[[["self"],["self"]],["bool"]]],[11,"intersects","","",120,[[["self"],["self"]],["bool"]]],[11,"restrict","","",120,[[["self"],["self"]]]],[11,"is_failed","","",121,[[["self"]],["bool"]]],[11,"is_constrained","","",121,[[["self"]],["bool"]]],[11,"contains","","",121,[[["self"],["self"]],["bool"]]],[11,"intersects","","",121,[[["self"],["self"]],["bool"]]],[11,"restrict","","",121,[[["self"],["self"]]]],[11,"is_failed","","",122,[[["self"]],["bool"]]],[11,"is_constrained","","",122,[[["self"]],["bool"]]],[11,"contains","","",122,[[["self"],["self"]],["bool"]]],[11,"intersects","","",122,[[["self"],["self"]],["bool"]]],[11,"restrict","","",122,[[["self"],["self"]]]],[11,"is_failed","","",123,[[["self"]],["bool"]]],[11,"is_constrained","","",123,[[["self"]],["bool"]]],[11,"contains","","",123,[[["self"],["self"]],["bool"]]],[11,"intersects","","",123,[[["self"],["self"]],["bool"]]],[11,"restrict","","",123,[[["self"],["self"]]]],[11,"is_failed","","",124,[[["self"]],["bool"]]],[11,"is_constrained","","",124,[[["self"]],["bool"]]],[11,"contains","","",124,[[["self"],["self"]],["bool"]]],[11,"intersects","","",124,[[["self"],["self"]],["bool"]]],[11,"restrict","","",124,[[["self"],["self"]]]],[11,"is_failed","","",125,[[["self"]],["bool"]]],[11,"is_constrained","","",125,[[["self"]],["bool"]]],[11,"contains","","",125,[[["self"],["self"]],["bool"]]],[11,"intersects","","",125,[[["self"],["self"]],["bool"]]],[11,"restrict","","",125,[[["self"],["self"]]]],[11,"eq","telamon::codegen","",3,[[["self"],["paramval"]],["bool"]]],[11,"eq","","",4,[[["self"],["paramvalkey"]],["bool"]]],[11,"ne","","",4,[[["self"],["paramvalkey"]],["bool"]]],[11,"eq","","",5,[[["self"],["allocationscheme"]],["bool"]]],[11,"eq","","",7,[[["self"],["mulmode"]],["bool"]]],[11,"eq","","",13,[[["self"],["size"]],["bool"]]],[11,"ne","","",13,[[["self"],["size"]],["bool"]]],[11,"eq","telamon::device","",29,[[["self"],["evalmode"]],["bool"]]],[11,"eq","telamon::explorer","",42,[[["self"],["candidate"]],["bool"]]],[11,"eq","telamon::explorer::choice","",46,[[["self"],["actionex"]],["bool"]]],[11,"ne","","",46,[[["self"],["actionex"]],["bool"]]],[11,"eq","telamon::explorer::config","",130,[[["self"],["parsechoicegrouperror"]],["bool"]]],[11,"ne","","",130,[[["self"],["parsechoicegrouperror"]],["bool"]]],[11,"eq","telamon::explorer::mcts","",132,[[["self"],["nodeid"]],["bool"]]],[11,"ne","","",132,[[["self"],["nodeid"]],["bool"]]],[11,"eq","","",66,[[["self"],["node"]],["bool"]]],[11,"eq","","",67,[[["self"],["edge"]],["bool"]]],[11,"eq","telamon::ir","",84,[[["self"],["stride"]],["bool"]]],[11,"ne","","",84,[[["self"],["stride"]],["bool"]]],[11,"eq","","",72,[[["self"],["dimid"]],["bool"]]],[11,"ne","","",72,[[["self"],["dimid"]],["bool"]]],[11,"eq","","",74,[[["self"],["logicaldimid"]],["bool"]]],[11,"ne","","",74,[[["self"],["logicaldimid"]],["bool"]]],[11,"eq","","",73,[[["self"],["dimmappingid"]],["bool"]]],[11,"ne","","",73,[[["self"],["dimmappingid"]],["bool"]]],[11,"eq","","",75,[[["self"],["parameter"]],["bool"]]],[11,"ne","","",75,[[["self"],["parameter"]],["bool"]]],[11,"eq","","",76,[[["self"],["signature"]],["bool"]]],[11,"ne","","",76,[[["self"],["signature"]],["bool"]]],[11,"eq","","",77,[[["self"],["indvarid"]],["bool"]]],[11,"ne","","",77,[[["self"],["indvarid"]],["bool"]]],[11,"eq","","",78,[[["self"],["instid"]],["bool"]]],[11,"ne","","",78,[[["self"],["instid"]],["bool"]]],[11,"eq","","",87,[[["self"],["dimmapscope"]],["bool"]]],[11,"ne","","",87,[[["self"],["dimmapscope"]],["bool"]]],[11,"eq","telamon::ir::op","",110,[[["self"],["rounding"]],["bool"]]],[11,"eq","telamon::ir","",104,[[["self"],["size"]],["bool"]]],[11,"ne","","",104,[[["self"],["size"]],["bool"]]],[11,"eq","","",105,[[["self"],["partialsize"]],["bool"]]],[11,"ne","","",105,[[["self"],["partialsize"]],["bool"]]],[11,"eq","","",92,[[["self"],["stmtid"]],["bool"]]],[11,"ne","","",92,[[["self"],["stmtid"]],["bool"]]],[11,"eq","","",93,[[["self"],["type"]],["bool"]]],[11,"ne","","",93,[[["self"],["type"]],["bool"]]],[11,"eq","","",79,[[["self"],["varid"]],["bool"]]],[11,"ne","","",79,[[["self"],["varid"]],["bool"]]],[11,"eq","","",94,[[["self"],["memorylevel"]],["bool"]]],[11,"eq","telamon::ir::mem","",107,[[["self"],["memid"]],["bool"]]],[11,"ne","","",107,[[["self"],["memid"]],["bool"]]],[11,"eq","telamon::model","",113,[[["self"],["bottlenecklevel"]],["bool"]]],[11,"eq","telamon::search_space","",120,[[["self"],["bool"]],["bool"]]],[11,"ne","","",120,[[["self"],["bool"]],["bool"]]],[11,"eq","","",121,[[["self"],["instflag"]],["bool"]]],[11,"ne","","",121,[[["self"],["instflag"]],["bool"]]],[11,"eq","","",122,[[["self"],["threadmapping"]],["bool"]]],[11,"ne","","",122,[[["self"],["threadmapping"]],["bool"]]],[11,"eq","","",123,[[["self"],["memspace"]],["bool"]]],[11,"ne","","",123,[[["self"],["memspace"]],["bool"]]],[11,"eq","","",124,[[["self"],["dimkind"]],["bool"]]],[11,"ne","","",124,[[["self"],["dimkind"]],["bool"]]],[11,"eq","","",125,[[["self"],["order"]],["bool"]]],[11,"ne","","",125,[[["self"],["order"]],["bool"]]],[11,"eq","","",118,[[["self"],["choice"]],["bool"]]],[11,"ne","","",118,[[["self"],["choice"]],["bool"]]],[11,"eq","","",117,[[["self"],["action"]],["bool"]]],[11,"ne","","",117,[[["self"],["action"]],["bool"]]],[11,"into_iter","telamon::ir","",96,N],[11,"default","telamon::helper","",28,[[],["self"]]],[11,"default","telamon::device::fake","",30,[[],["fakecontext"]]],[11,"default","telamon::device::x86","Create a new evaluation context.",32,[[],["context"]]],[11,"default","","",33,[[],["x86printer"]]],[11,"default","telamon::explorer::config","",47,[[],["self"]]],[11,"default","","",51,[[],["self"]]],[11,"default","","",52,[[],["self"]]],[11,"default","","",49,[[],["self"]]],[11,"default","","",50,[[],["self"]]],[11,"default","","",48,[[],["self"]]],[11,"default","","",57,[[],["self"]]],[11,"default","","",131,[[],["self"]]],[11,"default","telamon::explorer::mcts","",137,[[],["self"]]],[11,"default","","",139,[[],["self"]]],[11,"default","telamon::ir","",104,[[],["self"]]],[11,"default","","",105,[[],["self"]]],[11,"default","telamon::ir::mem","",109,[[],["blockmap"]]],[11,"default","telamon::ir","",80,[[],["newobjs"]]],[11,"default","telamon::search_space","",119,[[],["domainstore"]]],[11,"cmp","telamon::explorer","",42,[[["self"],["candidate"]],["ordering"]]],[11,"cmp","telamon::ir","",72,[[["self"],["dimid"]],["ordering"]]],[11,"cmp","","",73,[[["self"],["dimmappingid"]],["ordering"]]],[11,"cmp","","",77,[[["self"],["indvarid"]],["ordering"]]],[11,"cmp","","",78,[[["self"],["instid"]],["ordering"]]],[11,"cmp","","",92,[[["self"],["stmtid"]],["ordering"]]],[11,"cmp","","",79,[[["self"],["varid"]],["ordering"]]],[11,"cmp","","",94,[[["self"],["memorylevel"]],["ordering"]]],[11,"cmp","telamon::model","",113,[[["self"],["bottlenecklevel"]],["ordering"]]],[11,"clone","telamon::codegen","",4,[[["self"]],["paramvalkey"]]],[11,"clone","","",6,[[["self"]],["operand"]]],[11,"clone","","",7,[[["self"]],["mulmode"]]],[11,"clone","","",13,[[["self"]],["size"]]],[11,"clone","telamon::helper::tensor","",21,[[["self"]],["dimsize"]]],[11,"clone","telamon::helper","",27,[[["self"]],["logicaldim"]]],[11,"clone","","",28,[[["self"]],["tilingpattern"]]],[11,"clone","telamon::device::x86","",31,[[["self"]],["cpu"]]],[11,"clone","telamon::device","",29,[[["self"]],["evalmode"]]],[11,"clone","telamon::explorer","",42,[[["self"]],["candidate"]]],[11,"clone","telamon::explorer::choice","",46,[[["self"]],["actionex"]]],[11,"clone","telamon::explorer::config","",47,[[["self"]],["config"]]],[11,"clone","","",51,[[["self"]],["searchalgorithm"]]],[11,"clone","","",48,[[["self"]],["banditconfig"]]],[11,"clone","","",52,[[["self"]],["treepolicy"]]],[11,"clone","","",49,[[["self"]],["tagconfig"]]],[11,"clone","","",50,[[["self"]],["uctconfig"]]],[11,"clone","","",53,[[["self"]],["formula"]]],[11,"clone","","",54,[[["self"]],["reward"]]],[11,"clone","","",55,[[["self"]],["valuereduction"]]],[11,"clone","","",56,[[["self"]],["normalization"]]],[11,"clone","","",57,[[["self"]],["newnodeorder"]]],[11,"clone","","",58,[[["self"]],["choicegroup"]]],[11,"clone","","",130,[[["self"]],["parsechoicegrouperror"]]],[11,"clone","","",131,[[["self"]],["choiceordering"]]],[11,"clone","telamon::explorer::mcts","",132,[[["self"]],["nodeid"]]],[11,"clone","","",61,[[["self"]],["causeofdeath"]]],[11,"clone","","",66,[[["self"]],["self"]]],[11,"clone","","",67,[[["self"]],["self"]]],[11,"clone","","",68,[[["self"]],["env"]]],[11,"clone","","",62,[[["self"]],["policy"]]],[11,"clone","","",63,[[["self"]],["event"]]],[11,"clone","","",134,[[["self"]],["timed"]]],[11,"clone","","",64,[[["self"]],["message"]]],[11,"clone","telamon::ir","",84,[[["self"]],["stride"]]],[11,"clone","","",83,[[["self"]],["accesspattern"]]],[11,"clone","","",96,[[["self"]],["dimmap"]]],[11,"clone","","",72,[[["self"]],["dimid"]]],[11,"clone","","",97,[[["self"]],["dimension"]]],[11,"clone","","",74,[[["self"]],["logicaldimid"]]],[11,"clone","","",98,[[["self"]],["logicaldim"]]],[11,"clone","","",73,[[["self"]],["dimmappingid"]]],[11,"clone","","",99,[[["self"]],["dimmapping"]]],[11,"clone","","",75,[[["self"]],["parameter"]]],[11,"clone","","",76,[[["self"]],["signature"]]],[11,"clone","","",100,[[["self"]],["function"]]],[11,"clone","","",77,[[["self"]],["indvarid"]]],[11,"clone","","",101,[[["self"]],["inductionvar"]]],[11,"clone","","",78,[[["self"]],["instid"]]],[11,"clone","","",102,[[["self"]],["instruction"]]],[11,"clone","","",103,[[["self"]],["loweringmap"]]],[11,"clone","","",87,[[["self"]],["dimmapscope"]]],[11,"clone","","",88,[[["self"]],["operand"]]],[11,"clone","telamon::ir::op","",110,[[["self"]],["rounding"]]],[11,"clone","telamon::ir","",89,[[["self"]],["binop"]]],[11,"clone","","",91,[[["self"]],["unaryop"]]],[11,"clone","","",90,[[["self"]],["operator"]]],[11,"clone","","",104,[[["self"]],["size"]]],[11,"clone","","",105,[[["self"]],["partialsize"]]],[11,"clone","","",92,[[["self"]],["stmtid"]]],[11,"clone","","",93,[[["self"]],["type"]]],[11,"clone","","",79,[[["self"]],["varid"]]],[11,"clone","","",106,[[["self"]],["variable"]]],[11,"clone","","",94,[[["self"]],["memorylevel"]]],[11,"clone","","",95,[[["self"]],["vardef"]]],[11,"clone","telamon::ir::mem","",107,[[["self"]],["memid"]]],[11,"clone","","",108,[[["self"]],["block"]]],[11,"clone","","",109,[[["self"]],["blockmap"]]],[11,"clone","telamon::model","",113,[[["self"]],["bottlenecklevel"]]],[11,"clone","","",114,[[["self"]],["hwpressure"]]],[11,"clone","telamon::model::size","",115,[[["self"]],["range"]]],[11,"clone","","",116,[[["self"]],["factorrange"]]],[11,"clone","telamon::search_space","",119,[[["self"]],["domainstore"]]],[11,"clone","","",120,[[["self"]],["bool"]]],[11,"clone","","",121,[[["self"]],["instflag"]]],[11,"clone","","",122,[[["self"]],["threadmapping"]]],[11,"clone","","",123,[[["self"]],["memspace"]]],[11,"clone","","",124,[[["self"]],["dimkind"]]],[11,"clone","","",125,[[["self"]],["order"]]],[11,"clone","","",118,[[["self"]],["choice"]]],[11,"clone","","",117,[[["self"]],["action"]]],[11,"clone","","",128,[[["self"]],["searchspace"]]],[11,"from","telamon::helper::tensor","",21,[[["u32"]],["self"]]],[11,"from","telamon::helper","",28,N],[11,"from","telamon::explorer::mcts","",136,[[["uctconfig"]],["self"]]],[11,"from","","",138,[[["tagconfig"]],["self"]]],[11,"from","telamon::ir","",85,[[["typeerror"]],["self"]]],[11,"from","","",105,[[["size"]],["partialsize"]]],[11,"from","","",92,[[["instid"]],["self"]]],[11,"from","","",92,[[["dimid"]],["self"]]],[11,"from","telamon::search_space","",118,[[["action"]],["choice"]]],[11,"into","telamon::ir","",72,[[["self"]],["usize"]]],[11,"partial_cmp","telamon::explorer","",42,[[["self"],["candidate"]],["option",["ordering"]]]],[11,"partial_cmp","telamon::ir","",72,[[["self"],["dimid"]],["option",["ordering"]]]],[11,"lt","","",72,[[["self"],["dimid"]],["bool"]]],[11,"le","","",72,[[["self"],["dimid"]],["bool"]]],[11,"gt","","",72,[[["self"],["dimid"]],["bool"]]],[11,"ge","","",72,[[["self"],["dimid"]],["bool"]]],[11,"partial_cmp","","",73,[[["self"],["dimmappingid"]],["option",["ordering"]]]],[11,"lt","","",73,[[["self"],["dimmappingid"]],["bool"]]],[11,"le","","",73,[[["self"],["dimmappingid"]],["bool"]]],[11,"gt","","",73,[[["self"],["dimmappingid"]],["bool"]]],[11,"ge","","",73,[[["self"],["dimmappingid"]],["bool"]]],[11,"partial_cmp","","",77,[[["self"],["indvarid"]],["option",["ordering"]]]],[11,"lt","","",77,[[["self"],["indvarid"]],["bool"]]],[11,"le","","",77,[[["self"],["indvarid"]],["bool"]]],[11,"gt","","",77,[[["self"],["indvarid"]],["bool"]]],[11,"ge","","",77,[[["self"],["indvarid"]],["bool"]]],[11,"partial_cmp","","",78,[[["self"],["instid"]],["option",["ordering"]]]],[11,"lt","","",78,[[["self"],["instid"]],["bool"]]],[11,"le","","",78,[[["self"],["instid"]],["bool"]]],[11,"gt","","",78,[[["self"],["instid"]],["bool"]]],[11,"ge","","",78,[[["self"],["instid"]],["bool"]]],[11,"partial_cmp","","",92,[[["self"],["stmtid"]],["option",["ordering"]]]],[11,"lt","","",92,[[["self"],["stmtid"]],["bool"]]],[11,"le","","",92,[[["self"],["stmtid"]],["bool"]]],[11,"gt","","",92,[[["self"],["stmtid"]],["bool"]]],[11,"ge","","",92,[[["self"],["stmtid"]],["bool"]]],[11,"partial_cmp","","",79,[[["self"],["varid"]],["option",["ordering"]]]],[11,"lt","","",79,[[["self"],["varid"]],["bool"]]],[11,"le","","",79,[[["self"],["varid"]],["bool"]]],[11,"gt","","",79,[[["self"],["varid"]],["bool"]]],[11,"ge","","",79,[[["self"],["varid"]],["bool"]]],[11,"partial_cmp","","",94,[[["self"],["memorylevel"]],["option",["ordering"]]]],[11,"partial_cmp","telamon::model","",113,[[["self"],["bottlenecklevel"]],["option",["ordering"]]]],[11,"fmt","telamon::codegen","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon::helper","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon::device::fake","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon::device","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon::explorer::choice","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon::explorer::config","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon::explorer::mcts","",132,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",137,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",139,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon::ir","",84,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",99,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",88,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon::ir::op","",110,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon::ir","",89,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon::ir::mem","",107,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon::ir","",80,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon::model","",113,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon::model::size","",115,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",116,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon::search_space","",119,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon::explorer","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon::explorer::config","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon::explorer::mcts","",132,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon::ir","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon::ir::op","",110,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon::ir","",90,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon","",140,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon::model","",113,[[["self"],["formatter"]],["result"]]],[11,"hash","telamon::codegen","",3,[[["self"],["h"]]]],[11,"hash","","",4,N],[11,"hash","","",13,N],[11,"hash","telamon::explorer::choice","",46,N],[11,"hash","telamon::explorer::mcts","",132,N],[11,"hash","telamon::ir","",72,N],[11,"hash","","",74,N],[11,"hash","","",73,N],[11,"hash","","",75,N],[11,"hash","","",76,N],[11,"hash","","",77,N],[11,"hash","","",78,N],[11,"hash","","",105,N],[11,"hash","","",92,N],[11,"hash","","",93,N],[11,"hash","","",79,N],[11,"hash","telamon::ir::mem","",107,N],[11,"hash","telamon::search_space","",120,N],[11,"hash","","",121,N],[11,"hash","","",122,N],[11,"hash","","",123,N],[11,"hash","","",124,N],[11,"hash","","",125,N],[11,"hash","","",117,N],[11,"mul","telamon::ir","",105,[[["self"],["partialsize"]],["self"]]],[11,"mul_assign","telamon::codegen","",13,[[["self"],["size"]]]],[11,"mul_assign","telamon::ir","",104,[[["self"],["t"]]]],[11,"mul_assign","","",105,[[["self"],["partialsize"]]]],[11,"not","telamon::search_space","",120,[[["self"]],["self"]]],[11,"not","","",121,[[["self"]],["self"]]],[11,"not","","",122,[[["self"]],["self"]]],[11,"not","","",123,[[["self"]],["self"]]],[11,"not","","",124,[[["self"]],["self"]]],[11,"not","","",125,[[["self"]],["self"]]],[11,"bitand","","",120,[[["self"],["self"]],["self"]]],[11,"bitand","","",121,[[["self"],["self"]],["self"]]],[11,"bitand","","",122,[[["self"],["self"]],["self"]]],[11,"bitand","","",123,[[["self"],["self"]],["self"]]],[11,"bitand","","",124,[[["self"],["self"]],["self"]]],[11,"bitand","","",125,[[["self"],["self"]],["self"]]],[11,"bitor","","",120,[[["self"],["self"]],["self"]]],[11,"bitor","","",121,[[["self"],["self"]],["self"]]],[11,"bitor","","",122,[[["self"],["self"]],["self"]]],[11,"bitor","","",123,[[["self"],["self"]],["self"]]],[11,"bitor","","",124,[[["self"],["self"]],["self"]]],[11,"bitor","","",125,[[["self"],["self"]],["self"]]],[11,"bitxor","","",120,[[["self"],["self"]],["self"]]],[11,"bitxor","","",121,[[["self"],["self"]],["self"]]],[11,"bitxor","","",122,[[["self"],["self"]],["self"]]],[11,"bitxor","","",123,[[["self"],["self"]],["self"]]],[11,"bitxor","","",124,[[["self"],["self"]],["self"]]],[11,"bitxor","","",125,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",120,[[["self"],["self"]]]],[11,"bitand_assign","","",121,[[["self"],["self"]]]],[11,"bitand_assign","","",122,[[["self"],["self"]]]],[11,"bitand_assign","","",123,[[["self"],["self"]]]],[11,"bitand_assign","","",124,[[["self"],["self"]]]],[11,"bitand_assign","","",125,[[["self"],["self"]]]],[11,"bitor_assign","","",120,[[["self"],["self"]]]],[11,"bitor_assign","","",121,[[["self"],["self"]]]],[11,"bitor_assign","","",122,[[["self"],["self"]]]],[11,"bitor_assign","","",123,[[["self"],["self"]]]],[11,"bitor_assign","","",124,[[["self"],["self"]]]],[11,"bitor_assign","","",125,[[["self"],["self"]]]],[11,"deref","telamon::codegen","",9,N],[11,"deref","telamon::ir","",100,N],[11,"index","telamon::helper::tensor","",24,N],[11,"index","telamon::helper","",27,[[["self"],["usize"]],["dimid"]]],[11,"product","telamon::ir","",105,[[["i"]],["self"]]],[11,"from_str","telamon::explorer::config","",58,[[["str"]],["result"]]],[11,"from_str","","",131,[[["str"]],["result"]]],[11,"serialize","telamon::explorer","",43,[[["self"],["__s"]],["result"]]],[11,"serialize","","",44,[[["self"],["__s"]],["result"]]],[11,"serialize","","",45,[[["self"],["__s"]],["result"]]],[11,"serialize","telamon::explorer::choice","",46,[[["self"],["__s"]],["result"]]],[11,"serialize","telamon::explorer::config","",47,[[["self"],["__s"]],["result"]]],[11,"serialize","","",51,[[["self"],["__s"]],["result"]]],[11,"serialize","","",48,[[["self"],["__s"]],["result"]]],[11,"serialize","","",52,[[["self"],["__s"]],["result"]]],[11,"serialize","","",49,[[["self"],["__s"]],["result"]]],[11,"serialize","","",50,[[["self"],["__s"]],["result"]]],[11,"serialize","","",53,[[["self"],["__s"]],["result"]]],[11,"serialize","","",54,[[["self"],["__s"]],["result"]]],[11,"serialize","","",55,[[["self"],["__s"]],["result"]]],[11,"serialize","","",56,[[["self"],["__s"]],["result"]]],[11,"serialize","","",57,[[["self"],["__s"]],["result"]]],[11,"serialize","","",58,[[["self"],["__s"]],["result"]]],[11,"serialize","","",131,[[["self"],["__s"]],["result"]]],[11,"serialize","telamon::explorer::mcts","",132,[[["self"],["__s"]],["result"]]],[11,"serialize","","",61,[[["self"],["__s"]],["result"]]],[11,"serialize","","",62,[[["self"],["__s"]],["result"]]],[11,"serialize","","",63,[[["self"],["__s"]],["result"]]],[11,"serialize","","",134,[[["self"],["__s"]],["result"]]],[11,"serialize","","",64,[[["self"],["__s"]],["result"]]],[11,"serialize","telamon::ir","",72,[[["self"],["__s"]],["result"]]],[11,"serialize","","",74,[[["self"],["__s"]],["result"]]],[11,"serialize","","",78,[[["self"],["__s"]],["result"]]],[11,"serialize","","",92,[[["self"],["__s"]],["result"]]],[11,"serialize","","",79,[[["self"],["__s"]],["result"]]],[11,"serialize","telamon::ir::mem","",107,[[["self"],["__s"]],["result"]]],[11,"serialize","telamon::model","",113,[[["self"],["__s"]],["result"]]],[11,"serialize","telamon::search_space","",120,[[["self"],["__s"]],["result"]]],[11,"serialize","","",121,[[["self"],["__s"]],["result"]]],[11,"serialize","","",122,[[["self"],["__s"]],["result"]]],[11,"serialize","","",123,[[["self"],["__s"]],["result"]]],[11,"serialize","","",124,[[["self"],["__s"]],["result"]]],[11,"serialize","","",125,[[["self"],["__s"]],["result"]]],[11,"serialize","","",118,[[["self"],["__s"]],["result"]]],[11,"serialize","","",117,[[["self"],["__s"]],["result"]]],[11,"deserialize","telamon::explorer","",43,[[["__d"]],["result"]]],[11,"deserialize","","",44,[[["__d"]],["result"]]],[11,"deserialize","","",45,[[["__d"]],["result"]]],[11,"deserialize","telamon::explorer::choice","",46,[[["__d"]],["result"]]],[11,"deserialize","telamon::explorer::config","",47,[[["__d"]],["result"]]],[11,"deserialize","","",51,[[["__d"]],["result"]]],[11,"deserialize","","",48,[[["__d"]],["result"]]],[11,"deserialize","","",52,[[["__d"]],["result"]]],[11,"deserialize","","",49,[[["__d"]],["result"]]],[11,"deserialize","","",50,[[["__d"]],["result"]]],[11,"deserialize","","",53,[[["__d"]],["result"]]],[11,"deserialize","","",54,[[["__d"]],["result"]]],[11,"deserialize","","",55,[[["__d"]],["result"]]],[11,"deserialize","","",56,[[["__d"]],["result"]]],[11,"deserialize","","",57,[[["__d"]],["result"]]],[11,"deserialize","","",58,[[["__d"]],["result"]]],[11,"deserialize","","",131,[[["__d"]],["result"]]],[11,"deserialize","telamon::explorer::mcts","",132,[[["__d"]],["result"]]],[11,"deserialize","","",61,[[["__d"]],["result"]]],[11,"deserialize","","",62,[[["__d"]],["result"]]],[11,"deserialize","","",63,[[["__d"]],["result"]]],[11,"deserialize","","",134,[[["__d"]],["result"]]],[11,"deserialize","","",64,[[["__d"]],["result"]]],[11,"deserialize","telamon::ir","",72,[[["__d"]],["result"]]],[11,"deserialize","","",74,[[["__d"]],["result"]]],[11,"deserialize","","",78,[[["__d"]],["result"]]],[11,"deserialize","","",92,[[["__d"]],["result"]]],[11,"deserialize","","",79,[[["__d"]],["result"]]],[11,"deserialize","telamon::ir::mem","",107,[[["__d"]],["result"]]],[11,"deserialize","telamon::model","",113,[[["__d"]],["result"]]],[11,"deserialize","telamon::search_space","",120,[[["__d"]],["result"]]],[11,"deserialize","","",121,[[["__d"]],["result"]]],[11,"deserialize","","",122,[[["__d"]],["result"]]],[11,"deserialize","","",123,[[["__d"]],["result"]]],[11,"deserialize","","",124,[[["__d"]],["result"]]],[11,"deserialize","","",125,[[["__d"]],["result"]]],[11,"deserialize","","",118,[[["__d"]],["result"]]],[11,"deserialize","","",117,[[["__d"]],["result"]]],[11,"name","telamon::ir","",86,[[["self"]],["option",["str"]]]],[11,"cause","","",86,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",86,[[["self"]],["option",["backtrace"]]]],[11,"name","","",85,[[["self"]],["option",["str"]]]],[11,"cause","","",85,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",85,[[["self"]],["option",["backtrace"]]]],[11,"print_lt_int","telamon::codegen","Prints a scalar less-than on integers.",16,[[["self"],["type"],["str"],["str"],["str"]]]],[11,"print_equals","","Prints a scalar equals instruction.",16,[[["self"],["type"],["str"],["str"],["str"]]]],[11,"print_add_int","","Prints a scalar addition on integers.",16,[[["self"],["type"],["str"],["str"],["str"]]]],[11,"print_and","","Prints an AND operation.",16,[[["self"],["type"],["str"],["str"],["str"]]]],[11,"print_move","","Prints a move instruction.",16,[[["self"],["type"],["str"],["str"]]]],[11,"cfg_vec","","",16,N],[11,"cfg","","Prints a cfg.",16,[[["self"],["function"],["cfg"],["namemap"]]]],[11,"parallel_induction_level","","Prints a multiplicative induction var level.",16,[[["self"],["inductionlevel"],["namemap"]]]],[11,"enable_threads","","Change the side-effect guards so that only the specified…",16,N],[11,"gen_loop","","Prints a Loop",16,N],[11,"standard_loop","","Prints a classic loop - that is, a sequential loop with an…",16,N],[11,"unroll_loop","","Prints an unroll loop - loop without jumps",16,N],[11,"privatise_global_block","","",16,[[["self"],["memoryregion"],["namemap"],["function"]]]],[11,"inst","","Prints an instruction.",16,N],[11,"lower_type","","",16,[[["type"],["function"]],["type"]]],[11,"mul_mode","","",16,[[["type"],["type"]],["mulmode"]]],[11,"as_size","telamon::device","Returns the argument interpreted as an iteration dimension…",36,[[["self"]],["option",["u32"]]]],[11,"read","","Copies the array to the host, interpreting it as an array…",35,[[["self"]],["vec"]]],[11,"write","","Copies an values to the device array from the host array…",35,N],[11,"eval_size","","Evaluate a size.",40,[[["self"],["size"]],["u32"]]],[11,"bind_scalar","","Binds a parameter to a given value.",38,[[["self"],["parameter"],["s"]]]],[11,"bind_array","","Allocates an array of the given size in bytes.",38,[[["self"],["parameter"],["usize"]],["arc",["arrayargument"]]]],[11,"as_inst","telamon::ir::prelude","Returns 'self' if it is an instruction.",111,[[["self"]],["option",["instruction"]]]],[11,"as_dim","","Returns 'self' if it is a dimension",111,[[["self"]],["option",["dimension"]]]],[11,"intersects","telamon::search_space","Indicates if the domain has an alternatve in common with…",126,[[["self"],["self"]],["bool"]]],[11,"is","","Indicates if the domain is equal to another domain.",126,[[["self"],["self"]],["trivalent"]]],[11,"into_num_set","","Converts the domain into a numeric set with the given…",127,N],[11,"as_constrained","","Returns the value of the domain, if it is constrained.",127,N],[11,"lt","","",127,N],[11,"gt","","",127,N],[11,"leq","","",127,N],[11,"geq","","",127,N],[11,"eq","","",127,N],[11,"neq","","",127,N]],"paths":[[3,"InductionLevel"],[3,"InductionVar"],[4,"Cfg"],[4,"ParamVal"],[4,"ParamValKey"],[4,"AllocationScheme"],[4,"Operand"],[4,"MulMode"],[3,"Dimension"],[3,"Function"],[3,"MemoryRegion"],[3,"Instruction"],[3,"NameMap"],[3,"Size"],[3,"Variable"],[8,"Namer"],[8,"Printer"],[3,"Reduce"],[3,"TmpArray"],[3,"Builder"],[3,"SignatureBuilder"],[3,"DimSize"],[3,"TensorBuilder"],[3,"Tensor"],[3,"VirtualTensor"],[8,"AutoOperand"],[8,"MetaStatement"],[3,"LogicalDim"],[3,"TilingPattern"],[4,"EvalMode"],[3,"FakeContext"],[3,"Cpu"],[3,"Context"],[3,"X86printer"],[8,"ArrayArgument"],[8,"ArrayArgumentExt"],[8,"ScalarArgument"],[8,"ArgMap"],[8,"ArgMapExt"],[8,"AsyncEvaluator"],[8,"Context"],[8,"Device"],[3,"Candidate"],[4,"DeadEndSource"],[4,"TreeEvent"],[4,"LogMessage"],[4,"ActionEx"],[3,"Config"],[3,"BanditConfig"],[3,"TAGConfig"],[3,"UCTConfig"],[4,"SearchAlgorithm"],[4,"TreePolicy"],[4,"Formula"],[4,"Reward"],[4,"ValueReduction"],[4,"Normalization"],[4,"NewNodeOrder"],[4,"ChoiceGroup"],[3,"Rollout"],[4,"RolloutError"],[4,"CauseOfDeath"],[4,"Policy"],[4,"Event"],[4,"Message"],[8,"TreePolicy"],[3,"Node"],[3,"Edge"],[3,"Env"],[3,"Tree"],[3,"NodeCursor"],[3,"MctsStore"],[3,"DimId"],[3,"DimMappingId"],[3,"LogicalDimId"],[3,"Parameter"],[3,"Signature"],[3,"IndVarId"],[3,"InstId"],[3,"VarId"],[3,"NewObjs"],[3,"LoweredDimMap"],[3,"Counter"],[4,"AccessPattern"],[4,"Stride"],[4,"Error"],[4,"TypeError"],[4,"DimMapScope"],[4,"Operand"],[4,"BinOp"],[4,"Operator"],[4,"UnaryOp"],[4,"StmtId"],[4,"Type"],[4,"MemoryLevel"],[4,"VarDef"],[3,"DimMap"],[3,"Dimension"],[3,"LogicalDim"],[3,"DimMapping"],[3,"Function"],[3,"InductionVar"],[3,"Instruction"],[3,"LoweringMap"],[3,"Size"],[3,"PartialSize"],[3,"Variable"],[3,"MemId"],[3,"Block"],[3,"BlockMap"],[4,"Rounding"],[8,"Statement"],[3,"Nesting"],[4,"BottleneckLevel"],[3,"HwPressure"],[3,"Range"],[3,"FactorRange"],[4,"Action"],[4,"Choice"],[3,"DomainStore"],[3,"Bool"],[3,"InstFlag"],[3,"ThreadMapping"],[3,"MemSpace"],[3,"DimKind"],[3,"Order"],[8,"Domain"],[8,"NumSet"],[3,"SearchSpace"],[3,"FakeArray"],[3,"ParseChoiceGroupError"],[3,"ChoiceOrdering"],[3,"NodeId"],[3,"WeakNode"],[3,"Timed"],[3,"Trace"],[3,"UCTPolicy"],[3,"UCTStats"],[3,"TAGPolicy"],[3,"TAGStats"],[6,"Bound"]]};
searchIndex["telamon_capi"]={"doc":"C API wrappers for calling Telamon through FFI.","items":[[0,"linalg","telamon_capi","Linera algebra kernels.",N,N],[3,"Axpy","telamon_capi::linalg","Computes `z = alpha*x+y`.",N,N],[3,"MatVec","","Computes `y = A.x`.",N,N],[3,"Gesummv","","Computes `y = (alpha*A + beta*B).x`.",N,N],[3,"MatMul","","Computes `C = A.B`.",N,N],[12,"params","","",0,N],[3,"MatMulP","","",N,N],[12,"m","","",1,N],[12,"n","","",1,N],[12,"k","","",1,N],[12,"a_stride","","",1,N],[12,"transpose_a","","",1,N],[12,"transpose_b","","",1,N],[12,"generic","","",1,N],[12,"m_tiling","","",1,N],[12,"n_tiling","","",1,N],[12,"k_tiling","","",1,N],[3,"BatchMM","","Batch transposed matrix-matrix multiplication.",N,N],[3,"BatchMMP","","",N,N],[12,"m","","",2,N],[12,"n","","",2,N],[12,"k","","",2,N],[12,"batch","","",2,N],[12,"transpose_a","","",2,N],[12,"transpose_b","","",2,N],[12,"batch_b","","",2,N],[12,"generic","","",2,N],[8,"Kernel","telamon_capi","A kernel that can be compiled, benchmarked and used for…",N,N],[16,"Parameters","","The input parameters of the kernel.",3,N],[16,"ExpectedOutput","","The values to expect as output.",3,N],[10,"name","","The name of the function computed by the kernel.",3,[[],["str"]]],[10,"build_signature","","Builds the signature of the kernel in the builder and…",3,N],[10,"build_body","","Builder the kernel body in the given builder. This builder…",3,[[["self"],["signature"],["context"]],["vec",["candidate"]]]],[10,"get_expected_output","","Computes the expected output.",3,N],[10,"check_result","","Ensures the generated code performs the correct operation.",3,N],[11,"test_correctness","","Generates, executes and tests the output of candidates for…",3,N],[11,"test_bound","","Tests the correctness of the bound of kernels and returns…",3,N],[11,"benchmark","","Runs the search and benchmarks the resulting candidate.",3,N],[11,"deadend_ratio","","Computes the probability of encountering a dead-end when…",3,N],[3,"Context","","Description of the evaluation context. In particular, in…",N,N],[3,"Device","","Description of the targeted device.",N,N],[4,"DeviceId","","Supported device types for running kernels.",N,N],[13,"X86","","",4,N],[13,"Cuda","","",4,N],[4,"KernelParameters","","Supported kernels.",N,N],[13,"MatMul","","A matrix-matrix multiplication kernel.",5,N],[5,"env_logger_try_init","","Initializes the logger.",N,[[]]],[5,"kernel_matmul_new","","Instanciate a new kernel for matrix-matrix multiplication.…",N,N],[5,"kernel_free","","Deallocates kernel parameters created through one of the…",N,N],[5,"kernel_optimize","","Optimize a kernel on a given device. `config_data` points…",N,N],[0,"error","","",N,N],[4,"TelamonStatus","telamon_capi::error","Indicates if a telamon function exited correctly.",N,N],[13,"Ok","","",6,N],[13,"Fail","","",6,N],[4,"Error","","",N,N],[13,"IRError","","",7,N],[13,"InvalidArgument","","",7,N],[13,"NullPointer","","",7,N],[13,"UnknownError","","",7,N],[13,"StrUtf8Error","","",7,N],[5,"telamon_strerror","","Prints the error message in a string. Returns `null` if no…",N,N],[17,"ERROR","","",N,N],[0,"explorer","telamon_capi","",N,N],[5,"telamon_config_new","telamon_capi::explorer","Allocate a new explorer configuration object with suitable…",N,N],[5,"telamon_config_free","","Frees an explorer configuration.",N,N],[5,"telamon_string_copy","","Copy a C string pointer into a Rust String object. Use…",N,N],[5,"telamon_explore","","Run the exploration according to the configuration.",N,N],[0,"ir","telamon_capi","C API wrappers to create Telamon Kernels.",N,N],[4,"Rounding","telamon_capi::ir","The rounding mode of an arithmetic operation.",N,N],[13,"Exact","","No rounding occurs.",8,N],[13,"Nearest","","Rounds toward the nearest number.",8,N],[13,"Zero","","Rounds toward zero.",8,N],[13,"Positive","","Rounds toward positive infinite.",8,N],[13,"Negative","","Rounds toward negative infinite.",8,N],[3,"Function","","Opaque type that abstracts away the lifetime parameter of…",N,N],[3,"Size","","Opaque type that abstracts away the lifetime parameter of…",N,N],[3,"PartialSize","","Opaque type that abstracts away the lifetime parameter of…",N,N],[3,"Operand","","Opaque type that abstracts away the lifetime parameter of…",N,N],[3,"Operator","","Opaque type that abstracts away the lifetime parameter of…",N,N],[5,"telamon_ir_signature_new","","Creates a function signature that must be deallocated with…",N,N],[5,"telamon_ir_signature_free","","Deallocates a signature created with…",N,N],[5,"telamon_ir_signature_param","","Returns the parameter at the given position.",N,N],[5,"telamon_ir_signature_add_scalar","","Adds a scalar parameter to the function signature.",N,N],[5,"telamon_ir_signature_add_array","","Adds an array parameter to the function signature.",N,N],[5,"telamon_ir_type_new_int","","Creates an integer type that must be freed with…",N,N],[5,"telamon_ir_type_new_float","","Creates a floating point type that must be freed with…",N,N],[5,"telamon_ir_type_free","","Frees a type allocated with `telamon_ir_type_new_int` or…",N,N],[5,"telamon_ir_function_new","","Creates a function to optimize. The function must be freed…",N,N],[5,"telamon_ir_function_free","","Frees a function allocated with `telamon_ir_function_new`.",N,N],[5,"telamon_ir_function_add_instruction","","Adds an instruction performing the given operator in the…",N,N],[5,"telamon_ir_function_add_dimensions","","Adds a logical dimension of the given size to the…",N,N],[5,"telamon_ir_size_new","","Create a size equal to: `const_factor * param_factors[0] *…",N,N],[5,"telamon_ir_size_free","","Frees a size allocated with `telamon_ir_size_new`.",N,N],[5,"telamon_ir_size_into_partial","","Converts an `ir::Size` into an `ir::PartialSize`.",N,N],[5,"telamon_ir_dimension_size","","Returns the size of a dimension.",N,N],[5,"telamon_ir_size_mul","","Multiplies `lhs` by `rhs`.",N,N],[5,"telamon_ir_operand_new_int","","Create a constant integer operand. The provided type must…",N,N],[5,"telamon_ir_operand_new_float","","Creates a constant floating point operand. The provided…",N,N],[5,"telamon_ir_operand_new_parameter","","Creates an operand that fetches the value of a parameter.…",N,N],[5,"telamon_ir_operand_new_index","","Creates an operand that returns the current index on a…",N,N],[5,"telamon_ir_operand_new_inst","","Creates an operand that references the value of an…",N,N],[5,"telamon_ir_operand_new_reduction","","Creates an operand that take the value of `init_inst` the…",N,N],[5,"telamon_ir_operator_new_mov","","Creates a `mov` operator. Takes ownership of `operand`.",N,N],[5,"telamon_ir_operator_new_binop","","Creates a binary operator. Takes ownership of the operands.",N,N],[5,"telamon_ir_operator_new_mul","","Creates a `mul` operator. The return type can either be…",N,N],[5,"telamon_ir_operator_new_mad","","Creates a `mad` operator, that computes `mul_lhs * mul_rhs…",N,N],[5,"telamon_ir_operator_new_cast","","Creates a `cast` operator. Takes ownership of `operand`.…",N,N],[5,"telamon_ir_operator_new_tensor_load","","Creates an operator that loads a tensor stored in memory.…",N,N],[5,"telamon_ir_operator_new_tensor_store","","Creates an operator that stores a tensor in memory. Takes…",N,N],[0,"search_space","telamon_capi","C API wrappers to work with a Telamon search space.",N,N],[3,"SearchSpace","telamon_capi::search_space","Opaque type that abstracts away the lifetime parameter of…",N,N],[5,"telamon_search_space_new","","Creates a new search space from an IR function. The caller…",N,N],[5,"telamon_search_space_apply","","Apply a sequence of actions to a search space.",N,N],[5,"telamon_search_space_free","","Frees a search space instance allocated through…",N,N],[14,"unwrap_or_exit","telamon_capi","Helper macro that unwraps a result. Exits with `$error`…",N,N],[14,"exit","","",N,N],[14,"exit_if_null","","",N,N],[11,"from","telamon_capi::linalg","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","telamon_capi","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","telamon_capi::error","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"as_fail","","",7,[[["self"]],["fail"]]],[11,"to_string","telamon_capi::ir","",8,[[["self"]],["string"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"equivalent","","",8,[[["self"],["k"]],["bool"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","telamon_capi::search_space","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"fmt","telamon_capi::ir","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",8,[[["self"],["rounding"]],["bool"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",8,[[["self"]],["rounding"]]],[11,"clone","telamon_capi::linalg","",1,[[["self"]],["matmulp"]]],[11,"clone","","",2,[[["self"]],["batchmmp"]]],[11,"name","","",0,[[],["str"]]],[11,"build_signature","","",0,[[["matmulp"],["builder"]],["matmul"]]],[11,"build_body","","",0,[[["self"],["signature"],["context"]],["vec",["candidate"]]]],[11,"get_expected_output","","",0,[[["self"],["context"]],["arraybase",["ownedrepr","dim"]]]],[11,"check_result","","",0,N],[11,"name","","",10,[[],["str"]]],[11,"build_signature","","",10,N],[11,"build_body","","",10,[[["self"],["signature"],["context"]],["vec",["candidate"]]]],[11,"get_expected_output","","",10,[[["self"],["context"]],["arraybase",["ownedrepr","dim"]]]],[11,"check_result","","",10,N],[11,"name","","",11,[[],["str"]]],[11,"build_signature","","",11,N],[11,"build_body","","",11,[[["self"],["signature"],["context"]],["vec",["candidate"]]]],[11,"get_expected_output","","",11,[[["self"],["context"]],["arraybase",["ownedrepr","dim"]]]],[11,"check_result","","",11,N],[11,"name","","",12,[[],["str"]]],[11,"build_signature","","",12,[[["batchmmp"],["builder"]],["batchmm"]]],[11,"build_body","","",12,[[["self"],["signature"],["context"]],["vec",["candidate"]]]],[11,"get_expected_output","","",12,[[["self"],["context"]],["arraybase",["ownedrepr","dim"]]]],[11,"check_result","","",12,N],[11,"name","","",9,[[],["str"]]],[11,"build_signature","","",9,N],[11,"build_body","","",9,[[["self"],["signature"],["context"]],["vec",["candidate"]]]],[11,"get_expected_output","","",9,[[["self"],["context"]],["arraybase",["ownedrepr","dim"]]]],[11,"check_result","","",9,N],[11,"clone","telamon_capi::ir","",15,[[["self"]],["function"]]],[11,"clone","telamon_capi::search_space","",20,[[["self"]],["searchspace"]]],[11,"clone","telamon_capi","",5,[[["self"]],["kernelparameters"]]],[11,"from","telamon_capi::error","",7,[[["error"]],["error"]]],[11,"from","","",7,[[["typeerror"]],["error"]]],[11,"from","","",7,[[["utf8error"]],["error"]]],[11,"from","","",7,N],[11,"into","telamon_capi::ir","",15,[[["self"]],["function"]]],[11,"fmt","telamon_capi::error","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"name","","",7,[[["self"]],["option",["str"]]]],[11,"cause","","",7,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",7,[[["self"]],["option",["backtrace"]]]],[11,"new","telamon_capi::linalg","",1,[[["i32"],["i32"],["i32"]],["matmulp"]]],[11,"transpose_a","","",1,[[["self"]],["matmulp"]]],[11,"transpose_b","","",1,[[["self"]],["matmulp"]]],[11,"stride_a","","",1,[[["self"],["u32"]],["matmulp"]]],[11,"static_sizes","","Inline the sizes in the generated code.",1,[[["self"]],["matmulp"]]],[11,"new","","",2,[[["i32"],["i32"],["i32"],["i32"]],["batchmmp"]]],[11,"transpose_a","","",2,[[["self"]],["batchmmp"]]],[11,"transpose_b","","",2,[[["self"]],["batchmmp"]]],[11,"static_sizes","","Generate code that is onyl valid for the given sizes. The…",2,[[["self"]],["batchmmp"]]],[11,"reuse_b","","Reuse the `B` matrix across the batch.",2,[[["self"]],["batchmmp"]]]],"paths":[[3,"MatMul"],[3,"MatMulP"],[3,"BatchMMP"],[8,"Kernel"],[4,"DeviceId"],[4,"KernelParameters"],[4,"TelamonStatus"],[4,"Error"],[4,"Rounding"],[3,"Axpy"],[3,"MatVec"],[3,"Gesummv"],[3,"BatchMM"],[3,"Context"],[3,"Device"],[3,"Function"],[3,"Size"],[3,"PartialSize"],[3,"Operand"],[3,"Operator"],[3,"SearchSpace"]]};
searchIndex["telamon_cuda"]={"doc":"Defines the CUDA target.","items":[[3,"Array","telamon_cuda","An array allocated on a CUDA device.",N,N],[3,"Executor","","Interface with a CUDA device.",N,N],[3,"JITDaemon","","A process that compiles PTX in a separate process.",N,N],[3,"PerfCounterSet","","A set of performance counter to monitor.",N,N],[3,"Context","","A CUDA evaluation context.",N,N],[3,"Gpu","","Represents CUDA GPUs.",N,N],[12,"name","","The name of the GPU.",0,N],[12,"sm_major","","The compute capability major number.",0,N],[12,"sm_minor","","The compute capability minor number.",0,N],[12,"addr_size","","The size of pointers.",0,N],[12,"shared_mem_per_smx","","The amount of shared memory per SMX.",0,N],[12,"shared_mem_per_block","","The amount of shared memory available per block.",0,N],[12,"allow_nc_load","","`true` when non-coherent loads are enabled on the GPU.",0,N],[12,"allow_l1_for_global_mem","","`ture` when L1 caching is enabled for global memory…",0,N],[12,"wrap_size","","The size of a wrap.",0,N],[12,"thread_per_smx","","The maximal number of resident thread per SMX.",0,N],[12,"l1_cache_size","","The size in bytes of the L1 cache.",0,N],[12,"l1_cache_line","","The size in bytes of a L1 cache line.",0,N],[12,"l2_cache_size","","The size in bytes of the L2 cache.",0,N],[12,"l2_cache_line","","The size in bytes of a L2 cache line.",0,N],[12,"load_l2_latency","","Latency of an L2 access.",0,N],[12,"load_ram_latency","","Latency of a RAM access.",0,N],[12,"shared_bank_stride","","The stride at wich replays occur in shared memory.",0,N],[12,"load_shared_latency","","Latency of a shared memory access.",0,N],[12,"num_smx","","The number of SMX in the GPU.",0,N],[12,"max_block_per_smx","","Maximum number of block per SMX.",0,N],[12,"smx_clock","","The clock of an SMX, in GHz.",0,N],[12,"thread_rates","","Amount of processing power available on a single thread.",0,N],[12,"smx_rates","","Amount of processing power available on a single SMX.",0,N],[12,"gpu_rates","","Amount of processing power available on the whole GPU.",0,N],[12,"add_f32_inst","","",0,N],[12,"add_f64_inst","","",0,N],[12,"add_i32_inst","","",0,N],[12,"add_i64_inst","","",0,N],[12,"mul_f32_inst","","",0,N],[12,"mul_f64_inst","","",0,N],[12,"mul_i32_inst","","",0,N],[12,"mul_i64_inst","","",0,N],[12,"mul_wide_inst","","",0,N],[12,"mad_f32_inst","","",0,N],[12,"mad_f64_inst","","",0,N],[12,"mad_i32_inst","","",0,N],[12,"mad_i64_inst","","",0,N],[12,"mad_wide_inst","","",0,N],[12,"div_f32_inst","","",0,N],[12,"div_f64_inst","","",0,N],[12,"div_i32_inst","","",0,N],[12,"div_i64_inst","","",0,N],[12,"syncthread_inst","","",0,N],[12,"loop_init_overhead","","Overhead for entring the loop.",0,N],[12,"loop_iter_overhead","","Overhead for a single iteration of the loop.",0,N],[12,"loop_end_latency","","Latency for exiting the loop.",0,N],[3,"InstDesc","","Specifies the performance parameters of an instruction.",N,N],[12,"latency","","The latency of the instruction.",1,N],[12,"issue","","The number of instruction to issue.",1,N],[12,"alu","","The number of instruction on the ALUs.",1,N],[12,"sync","","The number of syncthread units used.",1,N],[12,"mem","","The number of instruction on Load/Store units.",1,N],[12,"l1_lines_from_l2","","The number of L1 cache lines that are fetched from the L2.",1,N],[12,"l2_lines_read","","The number of L2 cache lines read.",1,N],[12,"l2_lines_stored","","Number of l2 cache lines stored.",1,N],[12,"ram_bw","","The ram bandwidth used.",1,N],[3,"Kernel","","An IR instance compiled into a CUDA kernel.",N,N],[3,"CudaPrinter","","",N,N],[4,"DeviceAttribute","","Cuda device attributes. Not all alltributes are defined…",N,N],[13,"MaxThreadPerBlock","","Maximum number of threads per block.",2,N],[13,"MaxSharedMemoryPerBlock","","Maximum shared memory available per block in bytes.",2,N],[13,"WrapSize","","Wrap size in threads.",2,N],[13,"ClockRate","","Typical clock frequency in kilohertz.",2,N],[13,"SmxCount","","Number of SMX on a device.",2,N],[13,"MemoryClockRate","","Peak memory clock rate in kilohertz.",2,N],[13,"GlobalMemoryBusWidth","","Width on the memory bus in bits.",2,N],[13,"L2CacheSize","","Size of the L2 cache in bytes.",2,N],[13,"ComputeCapabilityMajor","","Major compute capability version number.",2,N],[13,"ComputeCapabilityMinor","","Minor compute capability version number.",2,N],[13,"GlobalL1CacheSupported","","Device supports caching globals in L1.",2,N],[13,"MaxSharedMemoryPerSmx","","Maximum shared memory available per multiprocessor in bytes.",2,N],[4,"PerfCounter","","Name a performance counter.",N,N],[13,"InstExecuted","","The number of wrap of instruction executed, does not…",3,N],[13,"ElapsedCyclesSM","","The number of cycles used for the execution on each SMX.",3,N],[13,"LocalLoad","","Loads and Stores",3,N],[13,"LocalStore","","",3,N],[13,"SharedLoad","","",3,N],[13,"SharedStore","","",3,N],[13,"GlobalLoadReplay","","Replays",3,N],[13,"GlobalStoreReplay","","",3,N],[13,"SharedLoadReplay","","",3,N],[13,"SharedStoreReplay","","",3,N],[13,"UncachedGlobalLoadTransaction","","Number of uncached global loads and global stores",3,N],[13,"GlobalStoreTransaction","","",3,N],[13,"L1LocalLoadHit","","The numbers for l1 cache accesses: hits and misses",3,N],[13,"L1LocalLoadMiss","","",3,N],[13,"L1LocalStoreHit","","",3,N],[13,"L1LocalStoreMiss","","",3,N],[13,"L1GlobalLoadHit","","",3,N],[13,"L1GlobalLoadMiss","","",3,N],[13,"L1LocalSharedBankConflict","","",3,N],[13,"L2Subp0WriteSectorMisses","","",3,N],[13,"L2Subp1WriteSectorMisses","","",3,N],[13,"L2Subp0ReadSectorMisses","","",3,N],[13,"L2Subp1ReadSectorMisses","","",3,N],[13,"GldInst8Bit","","",3,N],[13,"GldInst16Bit","","",3,N],[13,"GldInst32Bit","","",3,N],[13,"GldInst64Bit","","",3,N],[13,"GldInst128Bit","","",3,N],[13,"GstInst8Bit","","",3,N],[13,"GstInst16Bit","","",3,N],[13,"GstInst32Bit","","",3,N],[13,"GstInst64Bit","","",3,N],[13,"GstInst128Bit","","",3,N],[13,"Fb0Subp0ReadSectors","","",3,N],[13,"Fb0Subp0WriteSectors","","",3,N],[13,"Fb1Subp0ReadSectors","","",3,N],[13,"Fb1Subp0WriteSectors","","",3,N],[13,"Fb0Subp1ReadSectors","","",3,N],[13,"Fb0Subp1WriteSectors","","",3,N],[13,"Fb1Subp1ReadSectors","","",3,N],[13,"Fb1Subp1WriteSectors","","",3,N],[13,"L2Subp0WriteSectorQueries","","",3,N],[13,"L2Subp1WriteSectorQueries","","",3,N],[13,"L2Subp0ReadSectorQueries","","",3,N],[13,"L2Subp1ReadSectorQueries","","",3,N],[13,"L2Subp0ReadTexSectorQueries","","",3,N],[13,"L2Subp1ReadTexSectorQueries","","",3,N],[13,"L2Subp0ReadHitSectors","","",3,N],[13,"L2Subp1ReadHitSectors","","",3,N],[13,"L2Subp0ReadTexHitSectors","","",3,N],[13,"L2Subp1ReadTexHitSectors","","",3,N],[13,"L2Subp0ReadSysmemSectorQueries","","",3,N],[13,"L2Subp1ReadSysmemSectorQueries","","",3,N],[13,"L2Subp0WriteSysmemSectorQueries","","",3,N],[13,"L2Subp1WriteSysmemSectorQueries","","",3,N],[13,"L2Subp0TotalReadSectorQueries","","",3,N],[13,"L2Subp1TotalReadSectorQueries","","",3,N],[13,"L2Subp0TotalWriteSectorQueries","","",3,N],[13,"L2Subp1TotalWriteSectorQueries","","",3,N],[13,"L2Subp2TotalReadSectorQueries","","",3,N],[13,"L2Subp2TotalWriteSectorQueries","","",3,N],[13,"L2Subp3TotalReadSectorQueries","","",3,N],[13,"L2Subp3TotalWriteSectorQueries","","",3,N],[13,"FbSubp0ReadSectors","","",3,N],[13,"FbSubp0WriteSectors","","",3,N],[13,"FbSubp1ReadSectors","","",3,N],[13,"FbSubp1WriteSectors","","",3,N],[13,"L2Subp2ReadSectorMisses","","",3,N],[13,"L2Subp3ReadSectorMisses","","",3,N],[13,"L2Subp2WriteSectorMisses","","",3,N],[13,"L2Subp3WriteSectorMisses","","",3,N],[13,"L2Subp0WriteL1SectorQueries","","",3,N],[13,"L2Subp1WriteL1SectorQueries","","",3,N],[13,"L2Subp2WriteL1SectorQueries","","",3,N],[13,"L2Subp3WriteL1SectorQueries","","",3,N],[13,"L2Subp0ReadL1SectorQueries","","",3,N],[13,"L2Subp1ReadL1SectorQueries","","",3,N],[13,"L2Subp2ReadL1SectorQueries","","",3,N],[13,"L2Subp3ReadL1SectorQueries","","",3,N],[13,"L2Subp0ReadL1HitSectors","","",3,N],[13,"L2Subp1ReadL1HitSectors","","",3,N],[13,"L2Subp2ReadL1HitSectors","","",3,N],[13,"L2Subp3ReadL1HitSectors","","",3,N],[11,"new","","Allocates a new array on the device.",4,[[["cudacontext"],["usize"]],["self"]]],[11,"copy_to_host","","Copies the array to the host.",4,[[["self"]],["vec"]]],[11,"copy_from_host","","Copies an array from the host.",4,N],[11,"new","","Creates a new set of performance counters.",5,N],[11,"instrument","","Instrument a `CudaFunction`.",5,N],[11,"init","","Tries to initialize the `Executor` and panics if it fails.",6,[[],["executor"]]],[11,"try_init","","Initializes the `Executor`.",6,[[],["result",["executor","initerror"]]]],[11,"spawn_jit","","Spawns a `JITDaemon`.",6,[[["self"],["usize"]],["jitdaemon"]]],[11,"compile_ptx","","Compiles a PTX module.",6,[[["self"],["str"],["usize"]],["module"]]],[11,"compile_remote","","Compiles a PTX module using a separate process.",6,[[["self"],["jitdaemon"],["str"]],["module"]]],[11,"allocate_array","","Allocates an array on the CUDA device.",6,[[["self"],["usize"]],["array"]]],[11,"device_name","","Returns the name of the device.",6,[[["self"]],["string"]]],[11,"create_perf_counter_set","","Creates a new set of performance counters.",6,N],[11,"device_attribute","","Returns the value of a CUDA device attribute.",6,[[["self"],["deviceattribute"]],["i32"]]],[11,"compile","","",7,[[["self"],["cudacontext"],["str"]],["module"]]],[11,"new","","Create a new evaluation context. The GPU model if infered.",8,[[["executor"]],["context"]]],[11,"from_gpu","","Creates a context from the given GPU.",8,[[["gpu"],["executor"]],["self"]]],[11,"gpu","","Returns the GPU description.",8,[[["self"]],["gpu"]]],[11,"executor","","Returns the execution queue.",8,[[["self"]],["executor"]]],[11,"get_param","","Returns a parameter given its name.",8,[[["self"],["str"]],["argument"]]],[11,"bind_param","","Binds a parameter to the gien name.",8,[[["self"],["string"],["arc",["argument"]]]]],[11,"from_executor","","Returns the GPU model corresponding to `name.",0,[[["executor"]],["gpu"]]],[11,"dummy","","Creates a dummy GPU, to use for tests and benchmarks…",0,[[],["self"]]],[11,"print_ptx","","Returns the PTX code for a Function.",0,[[["self"],["function"]],["string"]]],[11,"blocks_per_smx","","Computes the number of blocks that can fit in an smx.",0,[[["self"],["searchspace"]],["u32"]]],[11,"compile","","Compiles a device function.",9,[[["function"],["gpu"],["executor"],["usize"]],["self"]]],[11,"compile_remote","","Compiles a device function, using a separate process.",9,[[["function"],["gpu"],["executor"],["jitdaemon"]],["self"]]],[11,"evaluate","","Runs a kernel and returns the number of cycles it takes to…",9,[[["self"],["context"]],["result",["u64"]]]],[11,"evaluate_real","","Runs a kernel and returns the number of cycles it takes to…",9,[[["self"],["context"],["usize"]],["vec",["f64"]]]],[11,"instrument","","Instruments the kernel with the given performance counters.",9,[[["self"],["context"],["perfcounterset"]],["vec",["u64"]]]],[11,"gen_thunk","","Generates a Thunk than can then be run on the GPU.",9,[[["self"],["context"]],["thunk"]]],[11,"function","","Prints a `Function`.",10,[[["self"],["function"],["gpu"]],["string"]]],[11,"host_function","","",10,[[["self"],["function"],["gpu"],["write"]]]],[0,"characterize","","GPU (micro)-archtecture characterization.",N,N],[5,"get_gpu_desc","telamon_cuda::characterize","Retrieve the description of the GPU from the description…",N,[[["executor"]],["gpu"]]],[5,"characterize","","Characterize a GPU.",N,[[["executor"]],["gpu"]]],[5,"get_config_path","","Returns the name of the configuration file.",N,[[],["pathbuf"]]],[11,"from","telamon_cuda","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"default","","",1,[[],["instdesc"]]],[11,"default","","",10,[[],["cudaprinter"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"clone_from","","",4,[[["self"],["self"]]]],[11,"clone","","",3,[[["self"]],["perfcounter"]]],[11,"clone","","",1,[[["self"]],["instdesc"]]],[11,"clone","","",0,[[["self"]],["gpu"]]],[11,"drop","","",4,[[["self"]]]],[11,"drop","","",5,[[["self"]]]],[11,"drop","","",6,[[["self"]]]],[11,"drop","","",7,[[["self"]]]],[11,"into","","",1,[[["self"]],["hwpressure"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"serialize","","",1,[[["self"],["__s"]],["result"]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]],[11,"print","","",0,[[["self"],["function"],["write"]]]],[11,"check_type","","",0,[[["self"],["type"]],["result",["typeerror"]]]],[11,"max_block_dims","","",0,[[["self"]],["u32"]]],[11,"max_inner_block_size","","",0,[[["self"]],["u32"]]],[11,"max_threads","","",0,[[["self"]],["u32"]]],[11,"max_unrolling","","",0,[[["self"]],["u32"]]],[11,"can_vectorize","","",0,[[["self"],["dimension"],["operator"]],["bool"]]],[11,"max_vectorization","","",0,N],[11,"has_vector_registers","","",0,[[["self"]],["bool"]]],[11,"shared_mem","","",0,[[["self"]],["u32"]]],[11,"pointer_type","","",0,[[["self"],["memspace"]],["type"]]],[11,"supported_mem_flags","","",0,[[["self"],["operator"]],["instflag"]]],[11,"name","","",0,[[["self"]],["str"]]],[11,"lower_type","","",0,[[["self"],["type"],["searchspace"]],["option",["type"]]]],[11,"hw_pressure","","",0,[[["self"],["searchspace"],["hashmap"],["hashmap"],["statement"],["context"]],["hwpressure"]]],[11,"loop_iter_pressure","","",0,N],[11,"thread_rates","","",0,[[["self"]],["hwpressure"]]],[11,"block_rates","","",0,[[["self"]],["hwpressure"]]],[11,"total_rates","","",0,[[["self"]],["hwpressure"]]],[11,"bottlenecks","","",0,N],[11,"block_parallelism","","",0,[[["self"],["searchspace"]],["u32"]]],[11,"additive_indvar_pressure","","",0,[[["self"],["type"]],["hwpressure"]]],[11,"multiplicative_indvar_pressure","","",0,[[["self"],["type"]],["hwpressure"]]],[11,"add_block_overhead","","",0,[[["self"],["factorrange"],["factorrange"],["range"],["hwpressure"]]]],[11,"deserialize","","",1,[[["__d"]],["result"]]],[11,"deserialize","","",0,[[["__d"]],["result"]]],[11,"get_int","","Get a proper string representation of an integer in target…",10,[[["u32"]],["string"]]],[11,"print_binop","","Print result = op1 op op2",10,N],[11,"print_unary_op","","Prints result = operator operand.",10,N],[11,"print_mul","","Print result = op1 * op2",10,N],[11,"print_mad","","Print result = mlhs * mrhs + arhs",10,N],[11,"print_ld","","Print result = load [addr]",10,N],[11,"print_st","","Print store val [addr]",10,N],[11,"print_label","","print a label where to jump",10,[[["self"],["str"]]]],[11,"print_cond_jump","","Print if (cond) jump label(label_id)",10,[[["self"],["str"],["str"]]]],[11,"print_sync","","Print wait on all threads",10,[[["self"]]]],[11,"name_operand","","",10,N],[11,"name_inst","","",10,N],[11,"bind_erased_scalar","","",8,[[["self"],["parameter"],["box",["scalarargument"]]]]],[11,"bind_erased_array","","",8,[[["self"],["parameter"],["type"],["usize"]],["arc",["arrayargument"]]]],[11,"read_i8","","",4,[[["self"]],["vec",["i8"]]]],[11,"write_i8","","",4,N],[11,"device","","",8,[[["self"]],["device"]]],[11,"param_as_size","","",8,[[["self"],["str"]],["option",["u32"]]]],[11,"evaluate","","",8,[[["self"],["function"],["evalmode"]],["result",["f64"]]]],[11,"benchmark","","",8,[[["self"],["function"],["usize"]],["vec",["f64"]]]],[11,"async_eval","","",8,[[["self"],["usize"],["evalmode"],["fn"]]]]],"paths":[[3,"Gpu"],[3,"InstDesc"],[4,"DeviceAttribute"],[4,"PerfCounter"],[3,"Array"],[3,"PerfCounterSet"],[3,"Executor"],[3,"JITDaemon"],[3,"Context"],[3,"Kernel"],[3,"CudaPrinter"]]};
searchIndex["telamon_gen"]={"doc":"","items":[[5,"process_file","telamon_gen","Process a file and stores the result in an other file.…",N,[[["path"],["path"],["bool"]],["result",["error"]]]],[5,"process","","Parses a constraint description file.",N,[[["option",["read"]],["t"],["path"]],["result",["error"]]]],[0,"ast","","Syntaxic tree for the constraint description.",N,N],[3,"TypedConstraint","telamon_gen::ast","A constraints on IR choices.",N,N],[12,"vars","","",0,N],[12,"inputs","","",0,N],[12,"conditions","","",0,N],[12,"restrict_fragile","","Indicates if the constraint should restricct fragile values.",0,N],[3,"Position","","",N,N],[12,"position","","",1,N],[12,"filename","","",1,N],[3,"Spanned","","",N,N],[12,"beg","","",2,N],[12,"end","","",2,N],[12,"data","","Spanned data",2,N],[3,"CounterDef","","",N,N],[12,"name","","",3,N],[12,"doc","","",3,N],[12,"visibility","","",3,N],[12,"vars","","",3,N],[12,"body","","",3,N],[3,"EnumDef","","A toplevel definition or constraint.",N,N],[12,"name","","",4,N],[12,"doc","","",4,N],[12,"variables","","",4,N],[12,"statements","","",4,N],[3,"IntegerDef","","A toplevel integer",N,N],[12,"name","","",5,N],[12,"doc","","",5,N],[12,"variables","","",5,N],[12,"code","","",5,N],[3,"Constraint","","A constraint that must be enforced by the IR.",N,N],[12,"forall_vars","","Variables for which the conditions must be respected.",6,N],[12,"disjunctions","","Conjunction of disjuction of condition that must be…",6,N],[12,"restrict_fragile","","Indicates if the constraint should restrict fragile values.",6,N],[3,"CheckerContext","","CheckContext is a type system.",N,N],[3,"SetDef","","",N,N],[12,"name","","",7,N],[12,"doc","","",7,N],[12,"arg","","",7,N],[12,"superset","","",7,N],[12,"disjoint","","",7,N],[12,"keys","","",7,N],[12,"quotient","","",7,N],[3,"TriggerDef","","",N,N],[12,"foralls","","",8,N],[12,"conditions","","",8,N],[12,"code","","",8,N],[3,"Ast","","",N,N],[12,"statements","","",9,N],[12,"ir_desc","","",9,N],[12,"set_defs","","",9,N],[12,"choice_defs","","",9,N],[12,"triggers","","",9,N],[12,"constraints","","",9,N],[12,"checks","","",9,N],[3,"Quotient","","",N,N],[12,"item","","",10,N],[12,"representant","","",10,N],[12,"conditions","","",10,N],[12,"equiv_relation","","",10,N],[3,"CounterBody","","",N,N],[12,"base","","",11,N],[12,"kind","","",11,N],[12,"iter_vars","","",11,N],[12,"value","","",11,N],[12,"conditions","","",11,N],[3,"SetRef","","References a set.",N,N],[12,"name","","",12,N],[12,"var","","",12,N],[3,"VarDef","","Defines a variable.",N,N],[12,"name","","",13,N],[12,"set","","",13,N],[3,"VarMap","","Maps variables to their set and position.",N,N],[3,"ChoiceInstance","","A reference to a choice instantiated with the given…",N,N],[12,"name","","",14,N],[12,"vars","","",14,N],[4,"ChoiceDef","","",N,N],[13,"CounterDef","","",15,N],[13,"EnumDef","","",15,N],[13,"IntegerDef","","",15,N],[4,"Hint","","Hint is a token representation.",N,N],[13,"Set","","Set interface.",16,N],[13,"SetAttribute","","Set attribute.",16,N],[13,"Enum","","Enum interface.",16,N],[13,"EnumAttribute","","Enum attribute.",16,N],[13,"Integer","","Integer interface.",16,N],[13,"IntegerAttribute","","Integer attribute.",16,N],[13,"Counter","","Counter.",16,N],[4,"TypeError","","TypeEror is the error representation of telamon's.",N,N],[13,"Redefinition","","Redefinition of a name and hint.",17,N],[12,"object_kind","telamon_gen::ast::TypeError","",17,N],[12,"object_name","","",17,N],[13,"Undefined","telamon_gen::ast","Undefinition of set, enum or field.",17,N],[12,"object_name","telamon_gen::ast::TypeError","",17,N],[13,"BadSymmetricArg","telamon_gen::ast","Unvalid arguments of a symmetric enum.",17,N],[12,"object_name","telamon_gen::ast::TypeError","",17,N],[12,"object_variables","","",17,N],[13,"MissingEntry","telamon_gen::ast","Missing Happens when the Set's object has a missing field.",17,N],[12,"object_name","telamon_gen::ast::TypeError","",17,N],[12,"object_field","","",17,N],[13,"Conflict","telamon_gen::ast","Conflict between incompatible keywords. Happens when the…",17,N],[12,"object_fields","telamon_gen::ast::TypeError","",17,N],[4,"Statement","telamon_gen::ast","A toplevel definition or constraint.",N,N],[13,"ChoiceDef","","",18,N],[13,"TriggerDef","","",18,N],[13,"SetDef","","",18,N],[13,"Require","","",18,N],[4,"Check","","Checks to perform once the statements have been declared.",N,N],[13,"IsSymmetric","","Ensures the inverse of the value set is itself.",19,N],[12,"choice","telamon_gen::ast::Check","",19,N],[12,"values","","",19,N],[4,"Symmetry","telamon_gen::ast","Indicates if an enum exhibits symmetry.",N,N],[13,"Symmetric","","",20,N],[13,"AntiSymmetric","","",20,N],[4,"Condition","","One of the condition that has to be respected by a…",N,N],[13,"Is","","",21,N],[12,"lhs","telamon_gen::ast::Condition","",21,N],[12,"rhs","","",21,N],[12,"is","","",21,N],[13,"Code","telamon_gen::ast","",21,N],[13,"Bool","","",21,N],[13,"CmpCode","","",21,N],[12,"lhs","telamon_gen::ast::Condition","",21,N],[12,"rhs","","",21,N],[12,"op","","",21,N],[13,"CmpInput","telamon_gen::ast","",21,N],[12,"lhs","telamon_gen::ast::Condition","",21,N],[12,"rhs","","",21,N],[12,"op","","",21,N],[4,"CounterVal","telamon_gen::ast","The value of a counter increment.",N,N],[13,"Code","","",22,N],[13,"Choice","","",22,N],[4,"EnumStatement","","A statement in an enum definition.",N,N],[13,"Value","","Defines a possible decision for th enum.",23,N],[13,"Alias","","Defines a set of possible decisions for the enum.",23,N],[13,"Symmetric","","Specifies that the enum is symmetric.",23,N],[13,"AntiSymmetric","","Specifies that the enum is antisymmetric and given the…",23,N],[5,"dedup_inputs","","Normalizes a list of inputs.",N,N],[11,"register_counter","","Registers a counter in the ir description.",3,[[["self"],["irdesc"],["vec"]]]],[11,"define","","",3,[[["self"],["checkercontext"],["vec"]],["result",["typeerror"]]]],[11,"declare","","Type checks the declare's condition.",4,[[["self"],["checkercontext"]],["result",["typeerror"]]]],[11,"define","","Type checks the define's condition.",4,[[["self"],["checkercontext"],["irdesc"],["vec"]],["result",["typeerror"]]]],[11,"declare","","Type checks the declare's condition.",5,[[["self"],["checkercontext"]],["result",["typeerror"]]]],[11,"define","","Type checks the define's condition.",5,[[["self"],["checkercontext"],["irdesc"]],["result",["typeerror"]]]],[11,"declare","","",15,[[["self"],["checkercontext"]],["result",["typeerror"]]]],[11,"define","","",15,[[["self"],["checkercontext"],["irdesc"],["vec"],["vec"]],["result",["typeerror"]]]],[11,"new","","Creates a new constraint.",6,[[["vec",["vardef"]],["vec",["vec"]]],["self"]]],[11,"type_check","","Type check the constraint.",6,[[["self"],["irdesc"]],["vec",["typedconstraint"]]]],[11,"define","","Type checks the define's condition.",6,[[["self"],["checkercontext"],["vec"]],["result",["typeerror"]]]],[11,"declare_set","","Declares a set and ensures it is not defined twice.",24,[[["self"],["spanned",["string"]]],["result",["typeerror"]]]],[11,"declare_choice","","Declares a choice and ensures it is not defined twice.",24,[[["self"],["spanned",["string"]],["hint"]],["result",["typeerror"]]]],[11,"check_set_define","","Check if the referenced set is defined.",24,[[["self"],["setref"]],["bool"]]],[11,"from","","",16,[[["statement"]],["self"]]],[11,"from_choice","","",16,[[["choicedef"]],["self"]]],[11,"declare","","Type checks the declare's condition.",7,[[["self"],["checkercontext"]],["result",["typeerror"]]]],[11,"define","","Type checks the define's condition.",7,[[["self"],["checkercontext"],["vec"],["irdesc"],["vec"],["vec"],["vec"],["vec"]],["result",["typeerror"]]]],[11,"register_trigger","","Typecheck and registers a trigger.",8,[[["self"],["irdesc"]]]],[11,"define","","Type checks the define's condition.",8,[[["self"],["checkercontext"],["vec"]],["result",["typeerror"]]]],[11,"type_check","","Generate the defintion of choices and the list of…",9,[[["self"]],["result",["typeerror"]]]],[11,"finalize","","Type-checks the statements in the correct order.",9,N],[11,"declare","","",18,[[["self"],["checkercontext"]],["result",["typeerror"]]]],[11,"define","","",18,[[["self"],["checkercontext"],["vec"],["irdesc"],["vec"],["vec"],["vec"],["vec"]],["result",["typeerror"]]]],[11,"is_symmetric","","",23,[[["self"]],["bool"]]],[11,"is_antisymmetric","","",23,[[["self"]],["bool"]]],[11,"dedup_inputs","","Remove duplicates among inputs.",0,[[["self"],["irdesc"]]]],[11,"gen_filters","","Generate filters to enforce the constraint.",0,[[["self"],["irdesc"]],["vec"]]],[0,"ir","telamon_gen","The constraint description for the ir.",N,N],[3,"Adaptator","telamon_gen::ir","Represent a transformation to apply to a rule to fir it in…",N,N],[3,"Choice","","A decision to specify.",N,N],[3,"RemoteFilterCall","","A call to a filter in another choice.",N,N],[12,"choice","","",25,N],[12,"filter","","",25,N],[3,"FilterCall","","A call to a filter.",N,N],[12,"forall_vars","","",26,N],[12,"filter_ref","","",26,N],[3,"OnChangeAction","","An action to perform when the choice is restricted.",N,N],[12,"forall_vars","","",27,N],[12,"set_constraints","","",27,N],[12,"action","","",27,N],[3,"ChoiceCondition","","A condition from the point of view of a choice.",N,N],[12,"inputs","","",28,N],[12,"self_condition","","",28,N],[12,"others_conditions","","",28,N],[3,"FilterAction","","Restricts the set of valid values.",N,N],[12,"set_constraints","","",29,N],[12,"filter","","",29,N],[3,"Filter","","Filters the set valid values.",N,N],[12,"arguments","","The variables on which the filter depends.",30,N],[12,"inputs","","The choices that the filter depends on.",30,N],[12,"rules","","The filter rules.",30,N],[3,"Rule","","Specifies a conditional restriction on the set of valid…",N,N],[12,"conditions","","The conditions that must be true for the rule to trigger.",31,N],[12,"alternatives","","The values allowed for the enum if the rule is triggered.",31,N],[12,"set_constraints","","The condition on subsets for the rule to apply.",31,N],[3,"SetConstraints","","A list of constraints on the set each variable belongs to.…",N,N],[3,"ChoiceInstance","","An choice instantiated with the given variables.",N,N],[12,"choice","","",32,N],[12,"vars","","",32,N],[3,"Code","","A piece of rust code.",N,N],[12,"code","","",33,N],[12,"vars","","",33,N],[3,"Set","","References a set of objects.",N,N],[3,"SetRefImpl","","",N,N],[3,"SetDef","","Defines a set of objects.",N,N],[3,"OnNewObject","","Indicates how to update the search space when a new object…",N,N],[12,"filter","","Lists the new propagators to enforce.",34,N],[3,"IrDesc","","Describes the choices that constitute the IR.",N,N],[3,"Enum","","A choice that can take a few predefined values.",N,N],[3,"Trigger","","A piece of host code called when a list of conditions are…",N,N],[12,"foralls","","",35,N],[12,"inputs","","",35,N],[12,"conditions","","",35,N],[12,"code","","",35,N],[4,"ChoiceArguments","","Defines the parameters for which the `Choice` is defined.",N,N],[13,"Plain","","The `Choice` is defined for all comibnation of variables…",36,N],[12,"vars","telamon_gen::ir::ChoiceArguments","",36,N],[13,"Symmetric","telamon_gen::ir","The `Choice` is defined on a triangular space. The rests…",36,N],[12,"names","telamon_gen::ir::ChoiceArguments","",36,N],[12,"t","","",36,N],[12,"inverse","","",36,N],[4,"ChoiceDef","telamon_gen::ir","Specifies how the `Choice` is defined.",N,N],[13,"Enum","","The `Choice` can take a small set of predefined values.",37,N],[13,"Counter","","An integer abstracted by an interval.",37,N],[12,"kind","telamon_gen::ir::ChoiceDef","",37,N],[12,"value","","",37,N],[12,"incr_iter","","",37,N],[12,"incr","","",37,N],[12,"incr_condition","","",37,N],[12,"visibility","","",37,N],[12,"base","","",37,N],[13,"Number","telamon_gen::ir","The `Choice` can take a small set of dynamically defined…",37,N],[12,"universe","telamon_gen::ir::ChoiceDef","",37,N],[4,"CounterVisibility","telamon_gen::ir","Indicates how a counter exposes how its maximum value. The…",N,N],[13,"NoMax","","Only the minimal value is computed and stored.",38,N],[13,"HiddenMax","","Both the min and max are stored, but only the min is…",38,N],[13,"Full","","Both the min and the max value are exposed.",38,N],[4,"CounterVal","","The value of the increments of a counter.",N,N],[13,"Code","","",39,N],[13,"Choice","","",39,N],[4,"ValueType","","Specifies the type of the values a choice can take.",N,N],[13,"Enum","","Generated type that represents the values of an enum choice.",40,N],[13,"Range","","Represents a contiguous range of values.",40,N],[12,"is_half","telamon_gen::ir::ValueType","",40,N],[13,"NumericSet","telamon_gen::ir","Represents a small set of integers.",40,N],[13,"Constant","","Represents an external constant, provided by the user. Its…",40,N],[4,"FilterRef","","References a filter to call.",N,N],[13,"Inline","","",41,N],[13,"Function","","",41,N],[12,"choice","telamon_gen::ir::FilterRef","",41,N],[12,"id","","",41,N],[12,"args","","",41,N],[4,"ChoiceAction","telamon_gen::ir","An action to perform,",N,N],[13,"FilterSelf","","The choice runs all its filters on itself.",42,N],[13,"RemoteFilter","","The choice runs a filter on another choice.",42,N],[13,"IncrCounter","","Increments a counter if the increment condition is…",42,N],[12,"counter","telamon_gen::ir::ChoiceAction","",42,N],[12,"value","","",42,N],[12,"incr_condition","","",42,N],[13,"UpdateCounter","telamon_gen::ir","Update a counter after the increment value is changed.",42,N],[12,"counter","telamon_gen::ir::ChoiceAction","",42,N],[12,"incr","","",42,N],[12,"incr_condition","","",42,N],[13,"Trigger","telamon_gen::ir","Triggers a lowering.",42,N],[12,"id","telamon_gen::ir::ChoiceAction","",42,N],[12,"condition","","",42,N],[12,"code","","",42,N],[12,"inverse_self_cond","","",42,N],[4,"SubFilter","telamon_gen::ir","Filters the set of valid values, given some inputs.",N,N],[13,"Switch","","Enumerate the possible values that a input can take, and…",43,N],[12,"switch","telamon_gen::ir::SubFilter","",43,N],[12,"cases","","",43,N],[13,"Rules","telamon_gen::ir","Applies a set of negative rules to filter the possible…",43,N],[4,"Variable","","",N,N],[13,"Arg","","",44,N],[13,"Forall","","",44,N],[4,"Condition","","A condition producing a boolean.",N,N],[13,"Code","","Triggers if the given piece of code returns `true`, given…",45,N],[12,"code","telamon_gen::ir::Condition","",45,N],[12,"negate","","",45,N],[13,"Enum","telamon_gen::ir","Triggers if the choice can only take the given values.",45,N],[12,"input","telamon_gen::ir::Condition","",45,N],[12,"values","","",45,N],[12,"negate","","",45,N],[12,"inverse","","",45,N],[13,"Bool","telamon_gen::ir","Always or never triggers.",45,N],[13,"CmpCode","","Triggers if the one inputs respects the comparison…",45,N],[12,"lhs","telamon_gen::ir::Condition","",45,N],[12,"rhs","","",45,N],[12,"op","","",45,N],[13,"CmpInput","telamon_gen::ir","Triggers if the two inputs respects the comparison operator.",45,N],[12,"lhs","telamon_gen::ir::Condition","",45,N],[12,"rhs","","",45,N],[12,"op","","",45,N],[12,"inverse","","",45,N],[4,"CmpOp","telamon_gen::ir","A compariason operator.",N,N],[13,"Lt","","",46,N],[13,"Gt","","",46,N],[13,"Leq","","",46,N],[13,"Geq","","",46,N],[13,"Eq","","",46,N],[13,"Neq","","",46,N],[4,"ValueSet","","Represents a set of values a choice can take.",N,N],[13,"Enum","","",47,N],[12,"enum_name","telamon_gen::ir::ValueSet","The enum type.",47,N],[12,"values","","A fixed set of values. Does not contains aliases.",47,N],[12,"inputs","","A set of inputs whose values can be take by the choice.…",47,N],[13,"Integer","telamon_gen::ir","",47,N],[12,"is_full","telamon_gen::ir::ValueSet","",47,N],[12,"cmp_inputs","","",47,N],[12,"cmp_code","","",47,N],[12,"universe","","",47,N],[4,"SetDefKey","telamon_gen::ir","",N,N],[13,"ItemType","","",48,N],[13,"IdType","","",48,N],[13,"ItemGetter","","",48,N],[13,"IdGetter","","",48,N],[13,"Iter","","",48,N],[13,"FromSuperset","","",48,N],[13,"Prefix","","",48,N],[13,"NewObjs","","",48,N],[13,"Reverse","","",48,N],[13,"AddToSet","","",48,N],[4,"CounterKind","","Indicates whether a counter sums or adds.",N,N],[13,"Add","","",49,N],[13,"Mul","","",49,N],[5,"dummy_choice","","",N,[[],["choice"]]],[5,"normalized_enum_set","","Creates a `ValueSet` from the list of enum values.",N,[[["it"],["bool"],["bool"],["enum"]],["valueset"]]],[11,"from_arguments","","Creates an adaptator that maps the arguments to the given…",50,N],[11,"variable","","Adapts a variable.",50,[[["self"],["variable"]],["variable"]]],[11,"input","","Returns the new ID of an input and indicates if it is…",50,N],[11,"set_variable","","Sets the mapping of a variable. Returns the previous…",50,[[["self"],["variable"],["variable"]],["option",["variable"]]]],[11,"set_input","","Sets the mapping of an input.",50,[[["self"],["usize"],["usize"]]]],[11,"set_inversed","","Sets an input as inversed.",50,[[["self"],["usize"]]]],[11,"new","","Creates a new `Choice`.",51,[[["rcstr"],["option",["rcstr"]],["choicearguments"],["choicedef"]],["self"]]],[11,"name","","Returns the name of the choice, in snake_case.",51,[[["self"]],["rcstr"]]],[11,"doc","","Returns the documentation associated with the `Choice`.",51,[[["self"]],["option",["str"]]]],[11,"arguments","","Returns the parameters for which the `Choice` is defined.",51,[[["self"]],["choicearguments"]]],[11,"value_type","","Returns the type representing the values the `Choice` can…",51,[[["self"]],["valuetype"]]],[11,"choice_def","","Returns the definition of the `Choice.",51,[[["self"]],["choicedef"]]],[11,"on_change","","Returns the actions to perform when the `Choice` is…",51,[[["self"]],["iter",["onchangeaction"]]]],[11,"filter_actions","","Returns the actions to run to get the valid alternatives…",51,[[["self"]],["iter",["filteraction"]]]],[11,"filters","","Returns the filters operating on the `Choice`.",51,[[["self"]],["iter",["filter"]]]],[11,"add_filter_action","","Adds a filter to run on initialization.",51,[[["self"],["filteraction"]]]],[11,"add_onchange","","Adds an action to perform when the `Choice` is constrained.",51,[[["self"],["onchangeaction"]]]],[11,"add_filter","","Adds a filter to the `Choice`, returns an ID to indentify…",51,[[["self"],["filter"]],["usize"]]],[11,"fragile_values","","Returns the values that should not be automatically…",51,[[["self"]],["valueset"]]],[11,"add_fragile_values","","Extends the list of values that should not be…",51,[[["self"],["valueset"]]]],[11,"new","","Creates a new `ChoiceArguments`.",36,[[["vec"],["bool"],["bool"]],["self"]]],[11,"names","","Returns the name of the arguments.",36,N],[11,"sets","","Returns the sets of the arguments.",36,N],[11,"get","","Returns the name and set of the argument at the given…",36,N],[11,"iter","","Iterates over the arguments, with their sets and names.",36,N],[11,"is_symmetric","","Indicates if the arguments iteration domain is triangular.",36,[[["self"]],["bool"]]],[11,"len","","Returns the number of arguments.",36,[[["self"]],["usize"]]],[11,"value_type","","Returns the underlying value type.",37,[[["self"]],["valuetype"]]],[11,"is_counter","","Indicates if the choice is a counter.",37,[[["self"]],["bool"]]],[11,"as_enum","","Returns the name of the `Enum` the `Choice` is based on.",37,[[["self"]],["option",["rcstr"]]]],[11,"is_valid_operator","","Indicates the comparison operators that can be applied to…",37,[[["self"],["cmpop"]],["bool"]]],[11,"full_type","","Returns the full type, instead of a the trimmed one.",40,[[["self"]],["self"]]],[11,"as_enum","","Returns the enum name, if applicable.",40,[[["self"]],["option",["rcstr"]]]],[11,"applies_to_symmetric","","Indicates if the action sould also be registered for the…",27,[[["self"]],["bool"]]],[11,"inverse","","Returns the action for the symmetric of the choice.",27,[[["self"],["irdesc"]],["self"]]],[11,"variables","","Returns the list of variables to allocate.",42,[[["self"]],["box",["iterator"]]]],[11,"inputs","","Returns the list of inputs used by the action.",42,N],[11,"inverse_self","","Inverse references to the value of the choice the action…",42,[[["self"],["irdesc"]]]],[11,"new","","Adapt the list of conditions to be from the point of view…",28,N],[11,"instantiate","","Instantiates the rule for a given assignment of the inputs.",31,N],[11,"normalize","","Normalizes the `Rule`.",31,N],[11,"new","","Create a new list of set constraints. The constraints are…",52,[[["vec"]],["self"]]],[11,"constraints","","Returns the constraints in a legal order.",52,N],[11,"is_empty","","Indicates if the set of constraints is empty.",52,[[["self"]],["bool"]]],[11,"find_set","","Returns the set the given variable is constrained to, if…",52,[[["self"],["variable"]],["option",["set"]]]],[11,"self_choice","","Creates a `ChoiceInstance` that point to a choice in its…",32,[[["choice"]],["self"]]],[11,"normalize","","Normalizes the `ChoiceInstance` and indicates if the…",32,[[["self"],["irdesc"]],["bool"]]],[11,"value_type","","Returns the type of the values the chocie takes.",32,[[["self"],["irdesc"]],["valuetype"]]],[11,"normalize","","Normalizes the `Code.",33,[[["self"]]]],[11,"negate","","Negates the condition.",45,[[["self"]]]],[11,"alternatives_of","","Returns allowed alternatives for the given input. Returns…",45,[[["self"],["usize"],["valuetype"],["irdesc"]],["option",["valueset"]]]],[11,"instantiate","","Instantiate the condition in the given context.",45,N],[11,"evaluate","","Evaluates the condition. Requires the mapping to be…",45,N],[11,"normalize","","Normalizes the condition to make it easier to apply…",45,N],[11,"negate","","Negates the operator.",46,[[["self"]]]],[11,"inverse","","Returns the equivalent operator for when the operator are…",46,[[["self"]],["self"]]],[11,"allows_eq","","Indicates if the operator returns true when both operands…",46,[[["self"]],["bool"]]],[11,"evaluate","","Evaluates the operator on the given `ValueSet`s.",46,[[["self"],["valueset"],["valueset"]],["trivalent"]]],[11,"empty","","Creates an enmpty `ValueSet` of the given type.",47,[[["valuetype"]],["self"]]],[11,"from_properties","","Computes a `ValueSet` from the properties it must respect.",47,[[["valuetype"],["bool"],["bool"],["irdesc"]],["self"]]],[11,"enum_values","","Creates a `ValueSet` from a normalized set of values.",47,[[["rcstr"],["btreeset",["rcstr"]]],["self"]]],[11,"from_input","","Creates a `ValueSet` from the given input.",47,[[["valuetype"],["usize"],["cmpop"],["bool"]],["self"]]],[11,"is_empty","","Indicates if the set of values is empty.",47,[[["self"]],["bool"]]],[11,"is_full","","Indicates if the set contains all the values. This…",47,[[["self"],["irdesc"]],["bool"]]],[11,"is_constrained","","Indicates if the set contains a single value.",47,[[["self"]],["trivalent"]]],[11,"extend","","Extends the `ValueSet` with the values of anther set.",47,[[["self"],["valueset"]]]],[11,"intersect","","Intersects the `ValueSet` with the given values. Indicates…",47,[[["self"],["valueset"]],["bool"]]],[11,"instantiate","","Instantiates the `ValueSet` for a given input assignment.",47,[[["self"],["hashmap"],["irdesc"]],["self"]]],[11,"inverse","","Inverse the `ValueSet`. The choice must be antisymmetric.",47,[[["self"],["irdesc"]]]],[11,"is","","Indicates if the `ValueSet` will be contained into anoter…",47,[[["self"],["valueset"]],["trivalent"]]],[11,"t","","Returns the type of the values.",47,[[["self"]],["valuetype"]]],[11,"new","","Create a new set instance.",53,[[["rc"],["option",["variable"]]],["self"]]],[11,"is_subset_of_def","","Indicates if the first set is a sub-set of the second,…",53,[[["self"],["set"]],["bool"]]],[11,"get_collision_level","","Returns the common superset where the two set might have…",53,[[["self"],["set"]],["option",["setdef"]]]],[11,"reverse","","Returns a superset of this set and a set parametrized by…",53,[[["self"],["variable"],["set"]],["option"]]],[11,"new","","Creates a new set definition.",54,[[["string"],["option",["set"]],["option",["set"]],["option"],["indexmap",["setdefkey","string"]],["vec",["string"]]],["rc"]]],[11,"name","","The name of the set.",54,[[["self"]],["rcstr"]]],[11,"arg","","Returns the argument of the set, if any.",54,[[["self"]],["option",["set"]]]],[11,"superset","","Returns the superset of the set, if any.",54,[[["self"]],["option",["set"]]]],[11,"attributes","","The attributes of the set.",54,[[["self"]],["indexmap"]]],[11,"prefix","","Suggest a prefix for variables in the set.",54,[[["self"]],["str"]]],[11,"def_order","","Returns an integer that indicates an order in which…",54,[[["self"]],["usize"]]],[11,"reverse","","Returns the reverse set, for sets that have both a…",54,[[["self"]],["option",["rc"]]]],[11,"is_subset_of_def","","Indicates if the first set is a sub-set of the second.",54,[[["self"],["setdef"]],["bool"]]],[11,"env","","Returns the variables defined for the key.",48,[[["self"]],["vec",["str"]]]],[11,"is_arg_in_env","","Indicates if the environement contains the set argument.",48,[[["self"]],["bool"]]],[18,"REQUIRED","","The list of required keys.",48,N],[8,"Adaptable","","",N,N],[10,"adapt","","Adapts the object to the new environement.",55,[[["self"],["adaptator"]],["self"]]],[8,"SetRef","","Generic trait for sets.",N,N],[10,"def","","Returns the set definition.",56,[[["self"]],["setdef"]]],[10,"arg","","Returns the argument of the set, if any.",56,[[["self"]],["option",["variable"]]]],[10,"reverse_constraint","","A constraint on the variables to iterate on, issued from a…",56,[[["self"]],["option",["setrefimpl"]]]],[11,"without_reverse_constraints","","Returns the same set but without reverse constraints.",56,[[["self"]],["setrefimpl"]]],[11,"superset","","Returns the direct superset of this set, if any.",56,[[["self"]],["option",["setrefimpl"]]]],[11,"path_to_superset","","Returns the path of sets to access a super-set.",56,[[["self"],["setref"]],["vec",["setrefimpl"]]]],[11,"is_subset_of","","Indicates if the first set is a sub-set of the second.",56,[[["self"],["set"]],["bool"]]],[11,"as_ref","","Returns the `SetRefImpl` corresponding to this set.",56,[[["self"]],["setrefimpl"]]],[11,"add_choice","","Adds a `Choice` to the IR description.",57,[[["self"],["choice"]]]],[11,"add_enum","","Adds an `Enum` to the IR desctiption.",57,[[["self"],["enum"]]]],[11,"choices","","List the choice definitions.",57,N],[11,"enums","","List the enum definitions.",57,N],[11,"get_enum","","Returns the enum with the given name.",57,[[["self"],["str"]],["enum"]]],[11,"get_choice","","Returns the choice with the given name.",57,[[["self"],["str"]],["choice"]]],[11,"set_defs","","Iterates over all the sets.",57,N],[11,"add_set_def","","Register a set definition.",57,[[["self"],["rc",["setdef"]]]]],[11,"get_set_def","","Returns the set definition associated with a name.",57,[[["self"],["str"]],["rc"]]],[11,"add_filter","","Adds a filter to a choice.",57,[[["self"],["rcstr"],["filter"],["vec",["set"]],["setconstraints"]]]],[11,"add_onchange","","",57,[[["self"],["str"],["onchangeaction"]]]],[11,"add_trigger","","Adds a trigger to a choice.",57,[[["self"],["trigger"]],["usize"]]],[11,"triggers","","Iterates on the triggers.",57,N],[11,"adapt_env","","Generates the list of sets to iterate and to constraints…",57,N],[11,"adapt_env_ext","","Generates the foralls and the set constraints to iterate…",57,N],[11,"zero","","Returns the neutral element of the operand.",49,[[["self"]],["u32"]]],[11,"new","","Creates a new enum definition.",58,[[["rcstr"],["option",["rcstr"]],["option",["vec"]]],["self"]]],[11,"name","","Returns the name of the enum.",58,[[["self"]],["rcstr"]]],[11,"add_value","","Adds a possible value to the enum.",58,[[["self"],["rcstr"],["option",["string"]]]]],[11,"add_alias","","Adds an alias to the enum possible values.",58,[[["self"],["rcstr"],["hashset",["rcstr"]],["option",["string"]]]]],[11,"aliases","","Lists the aliases.",58,[[["self"]],["indexmap"]]],[11,"doc","","Returns the documentation associated with the enum.",58,[[["self"]],["option",["str"]]]],[11,"values","","Returns the values the enum can take, and their associated…",58,[[["self"]],["indexmap"]]],[11,"expand","","Replaces aliases by the corresponding values.",58,[[["self"],["it"]],["hashset",["rcstr"]]]],[11,"inverse","","Inverse an antisymmetric value.",58,[[["self"],["rcstr"]],["rcstr"]]],[11,"inverse_mapping","","Returns the mapping to apply to obtain the symmetric of a…",58,[[["self"]],["option"]]],[0,"lexer","telamon_gen","",N,N],[3,"Spanned","telamon_gen::lexer","",N,N],[12,"beg","","",2,N],[12,"end","","",2,N],[12,"data","","Spanned data",2,N],[3,"LexerPosition","","A sequence's row/column position",N,N],[12,"line","","",59,N],[12,"column","","",59,N],[3,"Position","","",N,N],[12,"position","","",1,N],[12,"filename","","",1,N],[3,"Span","","A double sequence's row/column position",N,N],[12,"beg","","",60,N],[12,"end","","",60,N],[3,"LexicalError","","",N,N],[12,"cause","","",61,N],[3,"Lexer","","",N,N],[4,"Token","","",N,N],[13,"ValueIdent","","",62,N],[13,"ChoiceIdent","","",62,N],[13,"Var","","",62,N],[13,"Doc","","",62,N],[13,"CmpOp","","",62,N],[13,"Code","","",62,N],[13,"CounterKind","","",62,N],[13,"Bool","","",62,N],[13,"CounterVisibility","","",62,N],[13,"And","","",62,N],[13,"Trigger","","",62,N],[13,"When","","",62,N],[13,"Alias","","",62,N],[13,"Counter","","",62,N],[13,"Define","","",62,N],[13,"Enum","","",62,N],[13,"Equal","","",62,N],[13,"Forall","","",62,N],[13,"In","","",62,N],[13,"Is","","",62,N],[13,"Not","","",62,N],[13,"Require","","",62,N],[13,"Requires","","",62,N],[13,"Value","","",62,N],[13,"End","","",62,N],[13,"Symmetric","","",62,N],[13,"AntiSymmetric","","",62,N],[13,"Arrow","","",62,N],[13,"Colon","","",62,N],[13,"Comma","","",62,N],[13,"LParen","","",62,N],[13,"RParen","","",62,N],[13,"BitOr","","",62,N],[13,"Or","","",62,N],[13,"SetDefKey","","",62,N],[13,"Set","","",62,N],[13,"SubsetOf","","",62,N],[13,"SetIdent","","",62,N],[13,"Base","","",62,N],[13,"Disjoint","","",62,N],[13,"Quotient","","",62,N],[13,"Of","","",62,N],[13,"Divide","","",62,N],[13,"Integer","","",62,N],[4,"ErrorKind","","",N,N],[13,"InvalidToken","","",63,N],[12,"token","telamon_gen::lexer::ErrorKind","",63,N],[13,"InvalidInclude","telamon_gen::lexer","",63,N],[12,"name","telamon_gen::lexer::ErrorKind","",63,N],[12,"code","","",63,N],[11,"new","telamon_gen::lexer","",59,[[["c_uint"],["c_uint"]],["self"]]],[11,"new","telamon_gen::ast","",1,[[["lexerposition"],["string"]],["self"]]],[11,"new_optional","","",1,[[["lexerposition"],["option",["pathbuf"]]],["self"]]],[11,"with_data","","",2,[[["self"],["t"]],["spanned"]]],[6,"ParserSpanned","telamon_gen::lexer","The alias Spanned is a definition of the stream format.…",N,N],[6,"LexerItem","","",N,N],[11,"new","","Returns a lexer interface for a iterable text.",64,[[["vec",["u8"]]],["self"]]],[11,"from_input","","Returns a lexer interface for a input stream.",64,[[["read"]],["self"]]],[11,"from_file","","Returns a lexer interface for a file.",64,[[["path"]],["self"]]],[0,"parser","telamon_gen","",N,N],[5,"parse_ast","telamon_gen::parser","",N,[[["__tokens"]],["result",["ast","parseerror"]]]],[8,"__ToTriple","","",N,N],[16,"Error","","",65,N],[10,"to_triple","","",65,[[["self"]],["result"]]],[0,"error","telamon_gen","",N,N],[3,"Error","telamon_gen::error","",N,N],[12,"path","","Display of filename.",66,N],[12,"span","","Position of lexeme.",66,N],[11,"from","telamon_gen::ast","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"to_string","","",17,[[["self"]],["string"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"as_fail","","",17,[[["self"]],["fail"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","telamon_gen::ir","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"into_iter","","",52,[[["self"]],["i"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"equivalent","","",52,[[["self"],["k"]],["bool"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"equivalent","","",32,[[["self"],["k"]],["bool"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"equivalent","","",33,[[["self"],["k"]],["bool"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"equivalent","","",53,[[["self"],["k"]],["bool"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,N],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"equivalent","","",68,[[["self"],["k"]],["bool"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,N],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"equivalent","","",54,[[["self"],["k"]],["bool"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"to_string","","",58,[[["self"]],["string"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[["self"]],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,N],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"try_into","","",58,[[["self"]],["result"]]],[11,"get_type_id","","",58,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"equivalent","","",38,[[["self"],["k"]],["bool"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"equivalent","","",40,[[["self"],["k"]],["bool"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"to_string","","",44,[[["self"]],["string"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"equivalent","","",44,[[["self"],["k"]],["bool"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"equivalent","","",45,[[["self"],["k"]],["bool"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"equivalent","","",46,[[["self"],["k"]],["bool"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"equivalent","","",47,[[["self"],["k"]],["bool"]]],[11,"to_string","","",48,[[["self"]],["string"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"equivalent","","",48,[[["self"],["k"]],["bool"]]],[11,"to_string","","",49,[[["self"]],["string"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"equivalent","","",49,[[["self"],["k"]],["bool"]]],[11,"to_string","telamon_gen::lexer","",59,[[["self"]],["string"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"to_string","","",60,[[["self"]],["string"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[["self"]],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,N],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"try_into","","",60,[[["self"]],["result"]]],[11,"get_type_id","","",60,[[["self"]],["typeid"]]],[11,"to_string","","",61,[[["self"]],["string"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[["self"]],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"as_fail","","",61,[[["self"]],["fail"]]],[11,"into_iter","","",64,[[["self"]],["i"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[["self"]],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,N],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"to_string","","",63,[[["self"]],["string"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[["self"]],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,N],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"as_fail","","",63,[[["self"]],["fail"]]],[11,"to_string","telamon_gen::error","",66,[[["self"]],["string"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"as_fail","","",66,[[["self"]],["fail"]]],[11,"adapt","telamon_gen::ir","",39,[[["self"],["adaptator"]],["self"]]],[11,"adapt","","",40,[[["self"],["adaptator"]],["self"]]],[11,"adapt","","",25,[[["self"],["adaptator"]],["self"]]],[11,"adapt","","",26,[[["self"],["adaptator"]],["self"]]],[11,"adapt","","",41,[[["self"],["adaptator"]],["self"]]],[11,"adapt","","",27,[[["self"],["adaptator"]],["self"]]],[11,"adapt","","",42,[[["self"],["adaptator"]],["self"]]],[11,"adapt","","",28,[[["self"],["adaptator"]],["self"]]],[11,"adapt","","",31,[[["self"],["adaptator"]],["self"]]],[11,"adapt","","",52,[[["self"],["adaptator"]],["self"]]],[11,"adapt","","",44,[[["self"],["adaptator"]],["self"]]],[11,"adapt","","",32,[[["self"],["adaptator"]],["self"]]],[11,"adapt","","",33,[[["self"],["adaptator"]],["self"]]],[11,"adapt","","",45,[[["self"],["adaptator"]],["self"]]],[11,"adapt","","",47,[[["self"],["adaptator"]],["self"]]],[11,"adapt","","",53,[[["self"],["adaptator"]],["self"]]],[11,"def","","",68,[[["self"]],["setdef"]]],[11,"arg","","",68,[[["self"]],["option",["variable"]]]],[11,"reverse_constraint","","",68,[[["self"]],["option",["setrefimpl"]]]],[11,"next","telamon_gen::lexer","",64,[[["self"]],["option"]]],[11,"eq","telamon_gen::ast","",3,[[["self"],["self"]],["bool"]]],[11,"eq","","",4,[[["self"],["self"]],["bool"]]],[11,"eq","","",5,[[["self"],["self"]],["bool"]]],[11,"eq","","",15,[[["self"],["choicedef"]],["bool"]]],[11,"ne","","",15,[[["self"],["choicedef"]],["bool"]]],[11,"eq","","",16,[[["self"],["hint"]],["bool"]]],[11,"eq","","",17,[[["self"],["typeerror"]],["bool"]]],[11,"ne","","",17,[[["self"],["typeerror"]],["bool"]]],[11,"eq","","",7,[[["self"],["self"]],["bool"]]],[11,"eq","","",12,[[["self"],["self"]],["bool"]]],[11,"eq","","",13,[[["self"],["self"]],["bool"]]],[11,"eq","","",23,[[["self"],["self"]],["bool"]]],[11,"eq","telamon_gen::ir","",38,[[["self"],["countervisibility"]],["bool"]]],[11,"eq","","",40,[[["self"],["valuetype"]],["bool"]]],[11,"ne","","",40,[[["self"],["valuetype"]],["bool"]]],[11,"eq","","",52,[[["self"],["setconstraints"]],["bool"]]],[11,"ne","","",52,[[["self"],["setconstraints"]],["bool"]]],[11,"eq","","",44,[[["self"],["variable"]],["bool"]]],[11,"ne","","",44,[[["self"],["variable"]],["bool"]]],[11,"eq","","",32,[[["self"],["choiceinstance"]],["bool"]]],[11,"ne","","",32,[[["self"],["choiceinstance"]],["bool"]]],[11,"eq","","",33,[[["self"],["code"]],["bool"]]],[11,"ne","","",33,[[["self"],["code"]],["bool"]]],[11,"eq","","",45,[[["self"],["condition"]],["bool"]]],[11,"ne","","",45,[[["self"],["condition"]],["bool"]]],[11,"eq","","",46,[[["self"],["cmpop"]],["bool"]]],[11,"eq","","",47,[[["self"],["valueset"]],["bool"]]],[11,"ne","","",47,[[["self"],["valueset"]],["bool"]]],[11,"eq","","",53,[[["self"],["set"]],["bool"]]],[11,"ne","","",53,[[["self"],["set"]],["bool"]]],[11,"eq","","",68,[[["self"],["setrefimpl"]],["bool"]]],[11,"ne","","",68,[[["self"],["setrefimpl"]],["bool"]]],[11,"eq","","",54,[[["self"],["setdef"]],["bool"]]],[11,"eq","","",48,[[["self"],["setdefkey"]],["bool"]]],[11,"eq","","",49,[[["self"],["counterkind"]],["bool"]]],[11,"eq","telamon_gen::lexer","",59,[[["self"],["lexerposition"]],["bool"]]],[11,"ne","","",59,[[["self"],["lexerposition"]],["bool"]]],[11,"eq","telamon_gen::ast","",1,[[["self"],["position"]],["bool"]]],[11,"ne","","",1,[[["self"],["position"]],["bool"]]],[11,"eq","telamon_gen::lexer","",60,[[["self"],["span"]],["bool"]]],[11,"ne","","",60,[[["self"],["span"]],["bool"]]],[11,"eq","telamon_gen::ast","",2,[[["self"],["spanned"]],["bool"]]],[11,"ne","","",2,[[["self"],["spanned"]],["bool"]]],[11,"eq","telamon_gen::lexer","",62,[[["self"],["token"]],["bool"]]],[11,"ne","","",62,[[["self"],["token"]],["bool"]]],[11,"eq","","",63,[[["self"],["errorkind"]],["bool"]]],[11,"ne","","",63,[[["self"],["errorkind"]],["bool"]]],[11,"eq","","",61,[[["self"],["lexicalerror"]],["bool"]]],[11,"ne","","",61,[[["self"],["lexicalerror"]],["bool"]]],[11,"into_iter","telamon_gen::ir","",52,N],[11,"default","telamon_gen::ast","",24,[[],["checkercontext"]]],[11,"default","","",9,[[],["ast"]]],[11,"default","","",67,[[],["varmap"]]],[11,"default","telamon_gen::ir","",50,[[],["adaptator"]]],[11,"default","","",52,[[],["setconstraints"]]],[11,"default","","",34,[[],["onnewobject"]]],[11,"default","","",57,[[],["self"]]],[11,"default","telamon_gen::lexer","",59,[[],["lexerposition"]]],[11,"default","telamon_gen::ast","",1,[[],["position"]]],[11,"default","telamon_gen::lexer","",60,[[],["span"]]],[11,"default","telamon_gen::ast","",2,[[],["spanned"]]],[11,"cmp","telamon_gen::ir","",38,[[["self"],["countervisibility"]],["ordering"]]],[11,"cmp","","",44,[[["self"],["variable"]],["ordering"]]],[11,"cmp","","",33,[[["self"],["code"]],["ordering"]]],[11,"cmp","","",45,[[["self"],["condition"]],["ordering"]]],[11,"cmp","","",46,[[["self"],["cmpop"]],["ordering"]]],[11,"cmp","","",54,[[["self"],["setdef"]],["ordering"]]],[11,"clone","telamon_gen::ast","",3,[[["self"]],["counterdef"]]],[11,"clone","","",4,[[["self"]],["enumdef"]]],[11,"clone","","",5,[[["self"]],["integerdef"]]],[11,"clone","","",15,[[["self"]],["choicedef"]]],[11,"clone","","",6,[[["self"]],["constraint"]]],[11,"clone","","",16,[[["self"]],["hint"]]],[11,"clone","","",7,[[["self"]],["setdef"]]],[11,"clone","","",8,[[["self"]],["triggerdef"]]],[11,"clone","","",18,[[["self"]],["statement"]]],[11,"clone","","",10,[[["self"]],["quotient"]]],[11,"clone","","",19,[[["self"]],["check"]]],[11,"clone","","",11,[[["self"]],["counterbody"]]],[11,"clone","","",12,[[["self"]],["setref"]]],[11,"clone","","",13,[[["self"]],["vardef"]]],[11,"clone","","",21,[[["self"]],["condition"]]],[11,"clone","","",14,[[["self"]],["choiceinstance"]]],[11,"clone","","",22,[[["self"]],["counterval"]]],[11,"clone","","",23,[[["self"]],["enumstatement"]]],[11,"clone","telamon_gen::ir","",51,[[["self"]],["choice"]]],[11,"clone","","",36,[[["self"]],["choicearguments"]]],[11,"clone","","",37,[[["self"]],["choicedef"]]],[11,"clone","","",38,[[["self"]],["countervisibility"]]],[11,"clone","","",39,[[["self"]],["counterval"]]],[11,"clone","","",40,[[["self"]],["valuetype"]]],[11,"clone","","",25,[[["self"]],["remotefiltercall"]]],[11,"clone","","",26,[[["self"]],["filtercall"]]],[11,"clone","","",41,[[["self"]],["filterref"]]],[11,"clone","","",27,[[["self"]],["onchangeaction"]]],[11,"clone","","",42,[[["self"]],["choiceaction"]]],[11,"clone","","",28,[[["self"]],["choicecondition"]]],[11,"clone","","",29,[[["self"]],["filteraction"]]],[11,"clone","","",30,[[["self"]],["filter"]]],[11,"clone","","",43,[[["self"]],["subfilter"]]],[11,"clone","","",31,[[["self"]],["rule"]]],[11,"clone","","",52,[[["self"]],["setconstraints"]]],[11,"clone","","",44,[[["self"]],["variable"]]],[11,"clone","","",32,[[["self"]],["choiceinstance"]]],[11,"clone","","",33,[[["self"]],["code"]]],[11,"clone","","",45,[[["self"]],["condition"]]],[11,"clone","","",46,[[["self"]],["cmpop"]]],[11,"clone","","",47,[[["self"]],["valueset"]]],[11,"clone","","",53,[[["self"]],["set"]]],[11,"clone","","",68,[[["self"]],["setrefimpl"]]],[11,"clone","","",54,[[["self"]],["setdef"]]],[11,"clone","","",48,[[["self"]],["setdefkey"]]],[11,"clone","","",49,[[["self"]],["counterkind"]]],[11,"clone","","",58,[[["self"]],["enum"]]],[11,"clone","","",35,[[["self"]],["trigger"]]],[11,"clone","telamon_gen::lexer","",59,[[["self"]],["lexerposition"]]],[11,"clone","telamon_gen::ast","",1,[[["self"]],["position"]]],[11,"clone","telamon_gen::lexer","",60,[[["self"]],["span"]]],[11,"clone","telamon_gen::ast","",2,[[["self"]],["spanned"]]],[11,"clone","telamon_gen::lexer","",62,[[["self"]],["token"]]],[11,"clone","","",63,[[["self"]],["errorkind"]]],[11,"clone","","",61,[[["self"]],["lexicalerror"]]],[11,"from","telamon_gen::ast","",15,[[["statement"]],["self"]]],[11,"from","","",1,[[["lexerposition"]],["self"]]],[11,"from","","",2,[[["spanned",["rcstr"]]],["spanned",["string"]]]],[11,"from","telamon_gen::error","",66,N],[11,"drop","telamon_gen::lexer","",64,[[["self"]]]],[11,"partial_cmp","telamon_gen::ir","",38,[[["self"],["countervisibility"]],["option",["ordering"]]]],[11,"partial_cmp","","",44,[[["self"],["variable"]],["option",["ordering"]]]],[11,"lt","","",44,[[["self"],["variable"]],["bool"]]],[11,"le","","",44,[[["self"],["variable"]],["bool"]]],[11,"gt","","",44,[[["self"],["variable"]],["bool"]]],[11,"ge","","",44,[[["self"],["variable"]],["bool"]]],[11,"partial_cmp","","",33,[[["self"],["code"]],["option",["ordering"]]]],[11,"lt","","",33,[[["self"],["code"]],["bool"]]],[11,"le","","",33,[[["self"],["code"]],["bool"]]],[11,"gt","","",33,[[["self"],["code"]],["bool"]]],[11,"ge","","",33,[[["self"],["code"]],["bool"]]],[11,"partial_cmp","","",45,[[["self"],["condition"]],["option",["ordering"]]]],[11,"lt","","",45,[[["self"],["condition"]],["bool"]]],[11,"le","","",45,[[["self"],["condition"]],["bool"]]],[11,"gt","","",45,[[["self"],["condition"]],["bool"]]],[11,"ge","","",45,[[["self"],["condition"]],["bool"]]],[11,"partial_cmp","","",46,[[["self"],["cmpop"]],["option",["ordering"]]]],[11,"partial_cmp","","",54,[[["self"],["setdef"]],["option",["ordering"]]]],[11,"fmt","telamon_gen::ast","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon_gen::ir","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon_gen::lexer","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon_gen::ast","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon_gen::lexer","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon_gen::ast","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon_gen::lexer","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon_gen::error","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon_gen::ast","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon_gen::ir","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon_gen::lexer","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon_gen::ast","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon_gen::lexer","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon_gen::ast","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon_gen::lexer","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon_gen::error","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon_gen::ir","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"hash","","",52,N],[11,"hash","","",44,N],[11,"hash","","",32,N],[11,"hash","","",33,N],[11,"hash","","",45,N],[11,"hash","","",46,N],[11,"hash","","",53,N],[11,"hash","","",68,N],[11,"hash","","",54,[[["self"],["h"]]]],[11,"hash","","",48,N],[11,"serialize","","",38,[[["self"],["__s"]],["result"]]],[11,"serialize","","",48,[[["self"],["__s"]],["result"]]],[11,"serialize","","",49,[[["self"],["__s"]],["result"]]],[11,"name","telamon_gen::ast","",17,[[["self"]],["option",["str"]]]],[11,"cause","","",17,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",17,[[["self"]],["option",["backtrace"]]]],[11,"name","telamon_gen::lexer","",63,[[["self"]],["option",["str"]]]],[11,"cause","","",63,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",63,[[["self"]],["option",["backtrace"]]]],[11,"name","","",61,[[["self"]],["option",["str"]]]],[11,"cause","","",61,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",61,[[["self"]],["option",["backtrace"]]]],[11,"name","telamon_gen::error","",66,[[["self"]],["option",["str"]]]],[11,"cause","","",66,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",66,[[["self"]],["option",["backtrace"]]]],[11,"to_tokens","telamon_gen::ir","",49,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",40,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",46,[[["self"],["tokenstream"]]]],[11,"without_reverse_constraints","","Returns the same set but without reverse constraints.",56,[[["self"]],["setrefimpl"]]],[11,"superset","","Returns the direct superset of this set, if any.",56,[[["self"]],["option",["setrefimpl"]]]],[11,"path_to_superset","","Returns the path of sets to access a super-set.",56,[[["self"],["setref"]],["vec",["setrefimpl"]]]],[11,"is_subset_of","","Indicates if the first set is a sub-set of the second.",56,[[["self"],["set"]],["bool"]]],[11,"as_ref","","Returns the `SetRefImpl` corresponding to this set.",56,[[["self"]],["setrefimpl"]]]],"paths":[[3,"TypedConstraint"],[3,"Position"],[3,"Spanned"],[3,"CounterDef"],[3,"EnumDef"],[3,"IntegerDef"],[3,"Constraint"],[3,"SetDef"],[3,"TriggerDef"],[3,"Ast"],[3,"Quotient"],[3,"CounterBody"],[3,"SetRef"],[3,"VarDef"],[3,"ChoiceInstance"],[4,"ChoiceDef"],[4,"Hint"],[4,"TypeError"],[4,"Statement"],[4,"Check"],[4,"Symmetry"],[4,"Condition"],[4,"CounterVal"],[4,"EnumStatement"],[3,"CheckerContext"],[3,"RemoteFilterCall"],[3,"FilterCall"],[3,"OnChangeAction"],[3,"ChoiceCondition"],[3,"FilterAction"],[3,"Filter"],[3,"Rule"],[3,"ChoiceInstance"],[3,"Code"],[3,"OnNewObject"],[3,"Trigger"],[4,"ChoiceArguments"],[4,"ChoiceDef"],[4,"CounterVisibility"],[4,"CounterVal"],[4,"ValueType"],[4,"FilterRef"],[4,"ChoiceAction"],[4,"SubFilter"],[4,"Variable"],[4,"Condition"],[4,"CmpOp"],[4,"ValueSet"],[4,"SetDefKey"],[4,"CounterKind"],[3,"Adaptator"],[3,"Choice"],[3,"SetConstraints"],[3,"Set"],[3,"SetDef"],[8,"Adaptable"],[8,"SetRef"],[3,"IrDesc"],[3,"Enum"],[3,"LexerPosition"],[3,"Span"],[3,"LexicalError"],[4,"Token"],[4,"ErrorKind"],[3,"Lexer"],[8,"__ToTriple"],[3,"Error"],[3,"VarMap"],[3,"SetRefImpl"]]};
searchIndex["telamon_gen_test"]={"doc":"","items":[],"paths":[]};
searchIndex["telamon_kernels"]={"doc":"Defines common kernels used to test and benchmark Telamon.","items":[[5,"analyze_bounds","telamon_kernels","Prints an analysis of the bounds computed by the lower…",N,[[["vec",["boundsample"]]]]],[0,"linalg","","Linera algebra kernels.",N,N],[3,"Axpy","telamon_kernels::linalg","Computes `z = alpha*x+y`.",N,N],[3,"MatVec","","Computes `y = A.x`.",N,N],[3,"Gesummv","","Computes `y = (alpha*A + beta*B).x`.",N,N],[3,"MatMul","","Computes `C = A.B`.",N,N],[12,"params","","",0,N],[3,"MatMulP","","",N,N],[12,"m","","",1,N],[12,"n","","",1,N],[12,"k","","",1,N],[12,"a_stride","","",1,N],[12,"transpose_a","","",1,N],[12,"transpose_b","","",1,N],[12,"generic","","",1,N],[12,"m_tiling","","",1,N],[12,"n_tiling","","",1,N],[12,"k_tiling","","",1,N],[3,"BatchMM","","Batch transposed matrix-matrix multiplication.",N,N],[3,"BatchMMP","","",N,N],[12,"m","","",2,N],[12,"n","","",2,N],[12,"k","","",2,N],[12,"batch","","",2,N],[12,"transpose_a","","",2,N],[12,"transpose_b","","",2,N],[12,"batch_b","","",2,N],[12,"generic","","",2,N],[11,"new","","",1,[[["i32"],["i32"],["i32"]],["self"]]],[11,"transpose_a","","",1,[[["self"]],["self"]]],[11,"transpose_b","","",1,[[["self"]],["self"]]],[11,"stride_a","","",1,[[["self"],["u32"]],["self"]]],[11,"static_sizes","","Inline the sizes in the generated code.",1,[[["self"]],["self"]]],[11,"new","","",2,[[["i32"],["i32"],["i32"],["i32"]],["self"]]],[11,"transpose_a","","",2,[[["self"]],["self"]]],[11,"transpose_b","","",2,[[["self"]],["self"]]],[11,"static_sizes","","Generate code that is onyl valid for the given sizes. The…",2,[[["self"]],["self"]]],[11,"reuse_b","","Reuse the `B` matrix across the batch.",2,[[["self"]],["self"]]],[0,"statistics","telamon_kernels","Statistical analysis for benchmarking.",N,N],[3,"Estimate","telamon_kernels::statistics","Estimates a mean within a confidence interval.",N,N],[12,"unit","","",3,N],[12,"value","","",3,N],[12,"interval","","",3,N],[12,"confidence","","",3,N],[5,"mean","","Computes the mean of a data set.",N,N],[5,"estimate_mean","","Computes the mean and the confidence interval of the data…",N,[[["vec",["f64"]],["f64"],["str"]],["estimate"]]],[5,"estimate_ratio","","Computes the error margin of a ratio between answer of a…",N,[[["f64"],["usize"]],["estimate"]]],[8,"Kernel","telamon_kernels","A kernel that can be compiled, benchmarked and used for…",N,N],[16,"Parameters","","The input parameters of the kernel.",4,N],[16,"ExpectedOutput","","The values to expect as output.",4,N],[10,"name","","The name of the function computed by the kernel.",4,[[],["str"]]],[10,"build_signature","","Builds the signature of the kernel in the builder and…",4,N],[10,"build_body","","Builder the kernel body in the given builder. This builder…",4,[[["self"],["signature"],["context"]],["vec",["candidate"]]]],[10,"get_expected_output","","Computes the expected output.",4,N],[10,"check_result","","Ensures the generated code performs the correct operation.",4,N],[11,"test_correctness","","Generates, executes and tests the output of candidates for…",4,N],[11,"test_bound","","Tests the correctness of the bound of kernels and returns…",4,N],[11,"benchmark","","Runs the search and benchmarks the resulting candidate.",4,N],[11,"deadend_ratio","","Computes the probability of encountering a dead-end when…",4,N],[8,"Scalar","","A scalar that can be used as the data type for tests.",N,N],[11,"epsilon","","Returns the amount of allowed error in tests.",5,[[],["self"]]],[11,"is_err_ok","","Indicates if the scalar can be considered as zero in the…",5,[[["self"]],["bool"]]],[11,"from","telamon_kernels::linalg","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_string","telamon_kernels::statistics","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"name","telamon_kernels::linalg","",6,[[],["str"]]],[11,"build_signature","","",6,N],[11,"build_body","","",6,[[["self"],["signature"],["context"]],["vec",["candidate"]]]],[11,"get_expected_output","","",6,[[["self"],["context"]],["arrayd"]]],[11,"check_result","","",6,N],[11,"name","","",7,[[],["str"]]],[11,"build_signature","","",7,N],[11,"build_body","","",7,[[["self"],["signature"],["context"]],["vec",["candidate"]]]],[11,"get_expected_output","","",7,[[["self"],["context"]],["array1"]]],[11,"check_result","","",7,N],[11,"name","","",8,[[],["str"]]],[11,"build_signature","","",8,N],[11,"build_body","","",8,[[["self"],["signature"],["context"]],["vec",["candidate"]]]],[11,"get_expected_output","","",8,[[["self"],["context"]],["array1"]]],[11,"check_result","","",8,N],[11,"name","","",0,[[],["str"]]],[11,"build_signature","","",0,[[["matmulp"],["signaturebuilder"]],["self"]]],[11,"build_body","","",0,[[["self"],["signature"],["context"]],["vec",["candidate"]]]],[11,"get_expected_output","","",0,[[["self"],["context"]],["array2"]]],[11,"check_result","","",0,N],[11,"name","","",9,[[],["str"]]],[11,"build_signature","","",9,[[["batchmmp"],["signaturebuilder"]],["self"]]],[11,"build_body","","",9,[[["self"],["signature"],["context"]],["vec",["candidate"]]]],[11,"get_expected_output","","",9,[[["self"],["context"]],["array3"]]],[11,"check_result","","",9,N],[11,"clone","","",1,[[["self"]],["matmulp"]]],[11,"clone","","",2,[[["self"]],["batchmmp"]]],[11,"fmt","telamon_kernels::statistics","",3,[[["self"],["formatter"]],["result"]]],[11,"test_correctness","telamon_kernels","Generates, executes and tests the output of candidates for…",4,N],[11,"test_bound","","Tests the correctness of the bound of kernels and returns…",4,N],[11,"benchmark","","Runs the search and benchmarks the resulting candidate.",4,N],[11,"deadend_ratio","","Computes the probability of encountering a dead-end when…",4,N]],"paths":[[3,"MatMul"],[3,"MatMulP"],[3,"BatchMMP"],[3,"Estimate"],[8,"Kernel"],[8,"Scalar"],[3,"Axpy"],[3,"MatVec"],[3,"Gesummv"],[3,"BatchMM"]]};
searchIndex["telamon_utils"]={"doc":"Generic helper functions.","items":[[3,"Cache","telamon_utils","A thread-safe LRU Cache.",N,N],[3,"Dag","","A directed acyclic graph given by adjacency list.",N,N],[3,"FilterList","","Iterates over a linked list while removing some items.",N,N],[3,"ZipCopy","","Zip copies of an object with an iterator.",N,N],[3,"PartialPermutations","","",N,N],[3,"VecSet","","A set backed by an ordered vector.",N,N],[3,"RcStr","","A reference counted string, compatible with `&str`.",N,N],[4,"Trivalent","","Booleans enhanced with a third `Maybe` value.",N,N],[13,"False","","",0,N],[13,"Maybe","","",0,N],[13,"True","","",0,N],[5,"filter_list","","Iterates over a linked list while removing some items.",N,[[["linkedlist"],["f"]],["filterlist"]]],[5,"zip_copy","","Zip copies of an object with an iterator.",N,[[["i"],["t"]],["zipcopy"]]],[5,"at_most_one","","Ensures an iterator has at most one element.",N,[[["it"]],["option"]]],[5,"to_map","","Transforms an iterator into an `HashMap`. Redundant nodes…",N,[[["it"],["m"]],["hashmap"]]],[5,"div_ceil","","Performs an integer divison rounded to the upper number.",N,[[["t"],["t"]],["t"]]],[5,"log2_u32","","Returns the log2 of a power of 2.",N,[[["u32"]],["option",["u32"]]]],[5,"clone_pair","","Clones a pair of reference.",N,N],[5,"cmp_f64","","Compare two f64, panic if one of them is nan",N,[[["f64"],["f64"]],["ordering"]]],[11,"new","","Returns a new `Cache` that can store `capacity` elements.",1,[[["usize"]],["self"]]],[11,"get","","Returns the element associated to `key` in the cache.…",1,[[["self"],["k"],["f"]],["arc"]]],[11,"clear","","Removes all elements from the `Cache`.",1,[[["self"]]]],[11,"from_order","","Computes a minimal DAG from a partial order.",2,[[["vec"],["c"]],["dag"]]],[11,"nodes","","Returns the list of nodes, in increasing order.",2,N],[11,"before","","Returns the predecessors of the given node.",2,N],[11,"after","","Returns the successors of the given node.",2,N],[11,"minima","","Returns the id of nodes without predecessors.",2,[[["self"]],["vec",["usize"]]]],[11,"predecessors","","Returns all the predecessors of a node.",2,[[["self"],["usize"]],["vec",["usize"]]]],[11,"new","","Returns an iterator of the partial permuations of size `k`…",3,[[["it"],["usize"]],["self"]]],[0,"multimap","","A `HashMap` with mutiple values for each key.",N,N],[3,"MultiHashMap","telamon_utils::multimap","A `HashMap` with mutiple values for each key.",N,N],[11,"new","","Creates an empty `MultiHashMap`.",4,[[],["self"]]],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",4,[[["usize"]],["self"]]],[11,"with_hasher","","Creates an empty `MultiHashMap` which will use the given…",4,[[["s"]],["self"]]],[11,"with_capacity_and_hasher","","Creates an empty `MultiHashMap` with space for at least…",4,[[["usize"],["s"]],["self"]]],[11,"capacity","","Returns the number of elements the map can hold without…",4,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",4,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It…",4,[[["self"]]]],[11,"keys","","An iterator visiting all keys in arbitrary order.",4,[[["self"]],["keys",["vec"]]]],[11,"values","","An iterator visiting all values in arbitrary order.",4,N],[11,"values_mut","","An iterator visitinf all values mutably in arbitrary order.",4,N],[11,"iter","","Iterates over all the keys and returns the associated…",4,[[["self"]],["iter",["vec"]]]],[11,"num_keys","","Returns the number of keys.",4,[[["self"]],["usize"]]],[11,"is_empty","","Indicates if the map contains no elements.",4,[[["self"]],["bool"]]],[11,"drain","","Clears the map, returning all key-value pairs as an…",4,[[["self"]],["drain",["vec"]]]],[11,"clear","","Clears the map, removing all keys and values.",4,[[["self"]]]],[11,"get","","Returns the values mapped to the key.",4,N],[11,"contains_key","","Indicates if the map contains a value for the specified key.",4,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns an iterator over mutable reference to the values…",4,N],[11,"insert","","Inserts new value to the map.",4,[[["self"],["k"],["v"]]]],[11,"insert_many","","Inserts new value to the map.",4,[[["self"],["k"],["vec"]]]],[11,"remove","","Removes all the elements bound to a key.",4,[[["self"],["q"]],["vec"]]],[0,"ndarray","telamon_utils","An array with a variable number of dimensions.",N,N],[3,"NDArray","telamon_utils::ndarray","An array with a variable number of dimensions.",N,N],[12,"dims","","",5,N],[3,"NDRange","","A N-dimentional range.",N,N],[3,"ViewMut","","A mutable view on a `NDArray`, with some dimensions fixed.",N,N],[3,"ViewMutIter","","Iterator over the elements in a mutable view.",N,N],[3,"ViewIterMut","","Mutable iterator over the elements in a mutable view.",N,N],[11,"new","","Create a NDArray and initializes it with the generator.",5,[[["vec",["usize"]],["vec"]],["ndarray"]]],[11,"init_default","","Initializes an NDArray with default values.",5,[[["vec",["usize"]]],["self"]]],[11,"num_dims","","Returns the number of dimensions in the array.",5,[[["self"]],["usize"]]],[11,"view_mut","","Returns a mutable view on the NDArray.",5,[[["self"]],["viewmut"]]],[11,"new","","Creates a ND range with the given bounds.",6,N],[11,"num_dims","","Returns the number of non-fixed dimensions in the view.",7,[[["self"]],["usize"]]],[11,"split","","Splits the view on the given dimension.",7,[[["self"],["usize"]],["vec",["viewmut"]]]],[11,"enumerate","","Enumerates the elements with their indexes.",7,N],[11,"enumerate_mut","","Produces mutable references to the elements, with their…",7,N],[0,"tfrecord","telamon_utils","This module provides Read and Write extensions for reading…",N,N],[3,"Records","telamon_utils::tfrecord","A simple iterator over the records stored in a file.",N,N],[4,"ReadError","","The error type for errors occuring while reading a…",N,N],[13,"IOError","","An I/O error occured.",8,N],[13,"TruncatedRecord","","The underlying data was shorter than advertised in the…",8,N],[13,"CorruptedRecord","","Either the header or the data was corrupted and failed the…",8,N],[4,"WriteError","","The error type for errors occuring while writing a…",N,N],[13,"IOError","","An I/O error occured.",9,N],[8,"RecordReader","","A trait extension for reading records.",N,N],[11,"read_record","","Read a single record, placing the bytes into `buf`.",10,[[["self"],["vec"]],["result",["usize","readerror"]]]],[11,"records","","Transforms this `Read` instance to an `Iterator` over the…",10,[[["self"]],["records"]]],[8,"RecordWriter","","A trait extension for writing records.",N,N],[16,"Writer","","",11,N],[11,"write_record","","",11,N],[10,"finish","","Writes all output to the file and conclude the stream.…",11,[[["self"]],["result",["writeerror"]]]],[10,"finish_box","","Equivalent to `finish` for boxed trait objects, because we…",11,[[["box"]],["result",["writeerror"]]]],[0,"unwrap","telamon_utils","A macro to help debug unwraps.",N,N],[8,"Unwrap","telamon_utils::unwrap","",N,N],[16,"Output","","The type retruned by unwraping.",12,N],[10,"unwrap","","Unwraps the value or panics with the given message.",12,N],[11,"new","telamon_utils","Creates a new `VecSet` with the given data.",13,[[["vec"]],["self"]]],[11,"is_empty","","Indicates if the `VecSet` is empty.",13,[[["self"]],["bool"]]],[11,"len","","Returns the number of elements in the set.",13,[[["self"]],["usize"]]],[11,"iter","","Iterates over the set, in order.",13,[[["self"]],["iter"]]],[11,"difference","","Returns the elements in self but not in other.",13,[[["self"],["vecset"]],["difference"]]],[11,"relative_difference","","Returns `self\\other` and `other\\self`.",13,N],[11,"intersection","","Returns a set containing the elements present in both…",13,[[["self"],["vecset"]],["intersection"]]],[11,"intersect","","In-place intersection with another `VecSet`.",13,[[["self"],["vecset"]]]],[11,"union","","Returns a set containing the elements present in either…",13,[[["self"],["vecset"]],["vecset"]]],[11,"filter","","Returns a new `VecSet` with only the elements for which…",13,[[["self"],["p"]],["self"]]],[11,"retain","","Filters out elements for wich the predicate returns false.",13,[[["self"],["p"]]]],[11,"insert","","Inserts an element in the `VecSet`. This operation has a…",13,[[["self"],["t"]],["bool"]]],[11,"contains","","Indicates if the `VecSet` contains the given object.",13,[[["self"],["t"]],["bool"]]],[6,"DefaultHasher","","A fast but not secure `Hasher`.",N,N],[6,"HashSet","","An `HashSet` based on `DefaultHasher`.",N,N],[6,"HashMap","","An `HashMap` based on `DefaultHasher`.",N,N],[6,"MultiHashMap","","A `HashMap` based on `DefaultHasher`.",N,N],[8,"BuilderTrait","","A trait that implements useful methods on builders.",N,N],[11,"doif","","Runs the closure if the bool is true.",14,[[["self"],["bool"],["f"]],["self"]]],[11,"new","","Creates a new reference-counted string.",15,[[["string"]],["self"]]],[11,"as_bool","","Returns the boolean represented.",0,[[["self"]],["option",["bool"]]]],[11,"maybe_true","","Returns `true` if the underlying boolean might be `true`.",0,[[["self"]],["bool"]]],[11,"maybe_false","","Returns `true` if the underlying boolean might be `false`.",0,[[["self"]],["bool"]]],[11,"is_true","","Returns `true` if the underlying boolean is `true`.",0,[[["self"]],["bool"]]],[11,"is_false","","Returns `true` if the underlying boolean is `false`.",0,[[["self"]],["bool"]]],[11,"is_maybe","","Returns `true` if the underlying boolean might be `true`…",0,[[["self"]],["bool"]]],[14,"unwrap","","Panics after if the value cannot be unwraped.",N,N],[14,"generated_file","","Includes a generates file into the current file.",N,N],[14,"eq_from_key","","Derives `Eq` based on a method that returns a key for the…",N,N],[14,"hash_from_key","","Derives `Eq` and `Hash` based on a method that returns a…",N,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into_iter","","",16,[[["self"]],["i"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"into_iter","","",17,[[["self"]],["i"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"into_iter","","",13,[[["self"]],["i"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"to_string","","",15,[[["self"]],["string"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"into_iter","telamon_utils::multimap","",4,[[["self"]],["i"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","telamon_utils::ndarray","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"into_iter","","",6,[[["self"]],["i"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"into_iter","","",18,[[["self"]],["i"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"into_iter","","",19,[[["self"]],["i"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"into_iter","telamon_utils::tfrecord","",20,[[["self"]],["i"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"as_fail","","",8,[[["self"]],["fail"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"as_fail","","",9,[[["self"]],["fail"]]],[11,"next","telamon_utils","",16,[[["self"]],["option"]]],[11,"next","","",17,[[["self"]],["option"]]],[11,"next","","",3,[[["self"]],["option",["vec"]]]],[11,"next","telamon_utils::ndarray","",6,[[["self"]],["option"]]],[11,"next","","",18,[[["self"]],["option"]]],[11,"next","","",19,[[["self"]],["option"]]],[11,"next","telamon_utils::tfrecord","",20,[[["self"]],["option",["result"]]]],[11,"eq","telamon_utils::multimap","",4,[[["self"],["self"]],["bool"]]],[11,"eq","telamon_utils","",13,[[["self"],["vecset"]],["bool"]]],[11,"ne","","",13,[[["self"],["vecset"]],["bool"]]],[11,"eq","","",15,[[["self"],["rcstr"]],["bool"]]],[11,"ne","","",15,[[["self"],["rcstr"]],["bool"]]],[11,"eq","","",15,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["trivalent"]],["bool"]]],[11,"into_iter","telamon_utils::multimap","",4,N],[11,"into_iter","telamon_utils","",13,N],[11,"default","telamon_utils::multimap","",4,[[],["self"]]],[11,"default","telamon_utils","",13,[[],["self"]]],[11,"default","","",15,[[],["rcstr"]]],[11,"cmp","","",15,[[["self"],["rcstr"]],["ordering"]]],[11,"clone","telamon_utils::multimap","",4,[[["self"]],["multihashmap"]]],[11,"clone","telamon_utils","",13,[[["self"]],["vecset"]]],[11,"clone","","",15,[[["self"]],["rcstr"]]],[11,"clone","","",0,[[["self"]],["trivalent"]]],[11,"from","telamon_utils::tfrecord","",8,[[["error"]],["readerror"]]],[11,"from","","",9,[[["error"]],["writeerror"]]],[11,"from","","",9,[[["intoinnererror"]],["writeerror"]]],[11,"from","telamon_utils","",13,[[["vec"]],["self"]]],[11,"from","","",15,[[["str"]],["self"]]],[11,"from","","",15,[[["string"]],["rcstr"]]],[11,"partial_cmp","","",13,[[["self"],["vecset"]],["option",["ordering"]]]],[11,"partial_cmp","","",15,[[["self"],["rcstr"]],["option",["ordering"]]]],[11,"lt","","",15,[[["self"],["rcstr"]],["bool"]]],[11,"le","","",15,[[["self"],["rcstr"]],["bool"]]],[11,"gt","","",15,[[["self"],["rcstr"]],["bool"]]],[11,"ge","","",15,[[["self"],["rcstr"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon_utils::multimap","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon_utils::ndarray","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon_utils::tfrecord","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon_utils","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon_utils::tfrecord","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","telamon_utils","",15,[[["self"],["formatter"]],["result"]]],[11,"hash","","",13,N],[11,"hash","","",15,N],[11,"not","","",0,[[["self"]],["trivalent"]]],[11,"bitand","","",0,[[["self"],["trivalent"]],["trivalent"]]],[11,"bitor","","",0,[[["self"],["trivalent"]],["trivalent"]]],[11,"deref","","",13,N],[11,"deref","","",15,[[["self"]],["string"]]],[11,"index","telamon_utils::multimap","",4,N],[11,"index","telamon_utils::ndarray","",5,N],[11,"index","","",7,N],[11,"index_mut","","",5,N],[11,"index_mut","","",7,N],[11,"from_iter","telamon_utils::multimap","",4,[[["t"]],["self"]]],[11,"from_iter","","",4,[[["t"]],["self"]]],[11,"from_iter","telamon_utils","",13,[[["it"]],["self"]]],[11,"borrow","","",15,[[["self"]],["str"]]],[11,"borrow","","",15,[[["self"]],["string"]]],[11,"serialize","telamon_utils::multimap","",4,[[["self"],["s"]],["result"]]],[11,"serialize","telamon_utils","",15,[[["self"],["s"]],["result"]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]],[11,"name","telamon_utils::tfrecord","",8,[[["self"]],["option",["str"]]]],[11,"cause","","",8,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",8,[[["self"]],["option",["backtrace"]]]],[11,"name","","",9,[[["self"]],["option",["str"]]]],[11,"cause","","",9,[[["self"]],["option",["fail"]]]],[11,"backtrace","","",9,[[["self"]],["option",["backtrace"]]]]],"paths":[[4,"Trivalent"],[3,"Cache"],[3,"Dag"],[3,"PartialPermutations"],[3,"MultiHashMap"],[3,"NDArray"],[3,"NDRange"],[3,"ViewMut"],[4,"ReadError"],[4,"WriteError"],[8,"RecordReader"],[8,"RecordWriter"],[8,"Unwrap"],[3,"VecSet"],[8,"BuilderTrait"],[3,"RcStr"],[3,"FilterList"],[3,"ZipCopy"],[3,"ViewMutIter"],[3,"ViewIterMut"],[3,"Records"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
